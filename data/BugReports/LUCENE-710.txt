<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=Edge"> 
  <meta name="application-name" content="JIRA" data-name="jira" data-version="7.6.3">
  <meta name="ajs-viewissue-use-history-api" content="false"> 
  <meta name="ajs-jira-base-url" content="https://issues.apache.org/jira"> 
  <meta name="ajs-serverRenderedViewIssue" content="true"> 
  <meta name="ajs-dev-mode" content="false"> 
  <meta name="ajs-context-path" content="/jira"> 
  <meta name="ajs-version-number" content="7.6.3"> 
  <meta name="ajs-build-number" content="76005"> 
  <meta name="ajs-is-beta" content="false"> 
  <meta name="ajs-is-rc" content="false"> 
  <meta name="ajs-is-snapshot" content="false"> 
  <meta name="ajs-is-milestone" content="false"> 
  <meta name="ajs-remote-user" content=""> 
  <meta name="ajs-remote-user-fullname" content=""> 
  <meta name="ajs-user-locale" content="en_UK"> 
  <meta name="ajs-user-locale-group-separator" content=","> 
  <meta name="ajs-app-title" content="ASF JIRA"> 
  <meta name="ajs-keyboard-shortcuts-enabled" content="true"> 
  <meta name="ajs-keyboard-accesskey-modifier" content="Ctrl+Alt"> 
  <meta name="ajs-enabled-dark-features" content="[&quot;com.atlassian.jira.agile.darkfeature.editable.detailsview&quot;,&quot;nps.survey.inline.dialog&quot;,&quot;com.atlassian.jira.agile.darkfeature.edit.closed.sprint.enabled&quot;,&quot;jira.plugin.devstatus.phasetwo&quot;,&quot;jira.frother.reporter.field&quot;,&quot;atlassian.rest.xsrf.legacy.enabled&quot;,&quot;jira.issue.status.lozenge&quot;,&quot;com.atlassian.jira.config.BIG_PIPE&quot;,&quot;com.atlassian.jira.projects.issuenavigator&quot;,&quot;com.atlassian.jira.config.PDL&quot;,&quot;jira.plugin.devstatus.phasetwo.enabled&quot;,&quot;atlassian.aui.raphael.disabled&quot;,&quot;app-switcher.new&quot;,&quot;frother.assignee.field&quot;,&quot;com.atlassian.jira.projects.ProjectCentricNavigation.Switch&quot;,&quot;sd.internal.base.off.thread.on.completion.events.enabled&quot;,&quot;jira.onboarding.cyoa&quot;,&quot;com.atlassian.jira.agile.darkfeature.kanplan.enabled&quot;,&quot;sd.slavalue.record.updated.date.enabled&quot;,&quot;com.atlassian.jira.config.ProjectConfig.MENU&quot;,&quot;com.atlassian.jira.projects.sidebar.DEFER_RESOURCES&quot;,&quot;com.atlassian.jira.agile.darkfeature.kanplan.epics.and.versions.enabled&quot;,&quot;com.atlassian.jira.agile.darkfeature.sprint.goal.enabled&quot;,&quot;jira.zdu.admin-updates-ui&quot;,&quot;jira.zdu.jmx-monitoring&quot;,&quot;sd.sla.improved.rendering.enabled&quot;,&quot;sd.canned.responses.enabled&quot;,&quot;sd.new.settings.sidebar.location.disabled&quot;,&quot;jira.zdu.cluster-upgrade-state&quot;,&quot;com.atlassian.jira.agile.darkfeature.splitissue&quot;,&quot;com.atlassian.jira.config.CoreFeatures.LICENSE_ROLES_ENABLED&quot;,&quot;com.atlassian.feedback.feedback-button-move-to-header-enable&quot;,&quot;jira.export.csv.enabled&quot;]"> 
  <meta name="ajs-in-admin-mode" content="false"> 
  <meta name="ajs-is-sysadmin" content="false"> 
  <meta name="ajs-is-admin" content="false"> 
  <meta name="ajs-outgoing-mail-enabled" content="true"> 
  <meta name="ajs-date-relativize" content="true"> 
  <meta name="ajs-date-time" content="HH:mm"> 
  <meta name="ajs-date-day" content="EEEE HH:mm"> 
  <meta name="ajs-date-dmy" content="dd/MMM/yy"> 
  <meta name="ajs-date-complete" content="dd/MMM/yy HH:mm"> 
  <script type="text/javascript">var AJS=AJS||{};AJS.debug=true;</script> 
  <meta id="atlassian-token" name="atlassian-token" content="A5KQ-2QAV-T4JA-FDED|e434ae92b344e217ef169c4a8cfc72637d6610ac|lout"> 
  <link rel="shortcut icon" href="/jira/s/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/_/favicon.ico"> 
  <!--[if IE]><![endif]--> 
  <script type="text/javascript">
    (function() {
        var contextPath = '/jira';
        var eventBuffer = [];

        function printDeprecatedMsg() {
            if (console && console.warn) {
                console.warn('DEPRECATED JS - contextPath global variable has been deprecated since 7.4.0. Use `wrm/context-path` module instead.');
            }
        }

        function sendEvent(analytics, postfix) {
            analytics.send({
                name: 'js.globals.contextPath.' + postfix
            });
        }

        function sendDeprecatedEvent(postfix) {
            try {
                var analytics = require('jira/analytics');
                if (eventBuffer.length) {
                    eventBuffer.forEach(function(value) {
                        sendEvent(analytics, value);
                    });
                    eventBuffer = [];
                }

                if (postfix) {
                    sendEvent(analytics, postfix);
                }
            } catch(ex) {
                eventBuffer.push(postfix);
                setTimeout(sendDeprecatedEvent, 1000);
            }
        }

        Object.defineProperty(window, 'contextPath', {
            get: function() {
                printDeprecatedMsg();
                sendDeprecatedEvent('get');
                return contextPath;
            },
            set: function(value) {
                printDeprecatedMsg();
                sendDeprecatedEvent('set');
                contextPath = value;
            }
        });
    })();

</script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.plugins.atlassian-plugins-webresource-plugin:context-path.context-path"]="\"/jira\"";
WRM._unparsedData["jira.webresources:feature-flags.feature-flag-data"]="{\"enabled-feature-keys\":[\"com.atlassian.jira.agile.darkfeature.editable.detailsview\",\"nps.survey.inline.dialog\",\"com.atlassian.jira.agile.darkfeature.edit.closed.sprint.enabled\",\"jira.plugin.devstatus.phasetwo\",\"jira.frother.reporter.field\",\"atlassian.rest.xsrf.legacy.enabled\",\"jira.issue.status.lozenge\",\"com.atlassian.jira.config.BIG_PIPE\",\"com.atlassian.jira.projects.issuenavigator\",\"com.atlassian.jira.config.PDL\",\"jira.plugin.devstatus.phasetwo.enabled\",\"atlassian.aui.raphael.disabled\",\"app-switcher.new\",\"frother.assignee.field\",\"com.atlassian.jira.projects.ProjectCentricNavigation.Switch\",\"sd.internal.base.off.thread.on.completion.events.enabled\",\"jira.onboarding.cyoa\",\"com.atlassian.jira.agile.darkfeature.kanplan.enabled\",\"sd.slavalue.record.updated.date.enabled\",\"com.atlassian.jira.config.ProjectConfig.MENU\",\"com.atlassian.jira.projects.sidebar.DEFER_RESOURCES\",\"com.atlassian.jira.agile.darkfeature.kanplan.epics.and.versions.enabled\",\"com.atlassian.jira.agile.darkfeature.sprint.goal.enabled\",\"jira.zdu.admin-updates-ui\",\"jira.zdu.jmx-monitoring\",\"sd.sla.improved.rendering.enabled\",\"sd.canned.responses.enabled\",\"sd.new.settings.sidebar.location.disabled\",\"jira.zdu.cluster-upgrade-state\",\"com.atlassian.jira.agile.darkfeature.splitissue\",\"com.atlassian.jira.config.CoreFeatures.LICENSE_ROLES_ENABLED\",\"com.atlassian.feedback.feedback-button-move-to-header-enable\",\"jira.export.csv.enabled\"],\"feature-flag-states\":{\"sd.customer.profile.multi.languages\":true,\"sd.customer.portal.transitions\":true,\"sd.customer.portal.transitions.config\":true,\"sd.custom.email.stripping.rules\":false,\"sd.sla.lucene.issue.id.callback.performance\":true,\"sd.new.settings.sidebar.location\":true,\"sd.workload.report.paginator\":true,\"sd.experimental.portal.search.algorithm.default.1\":false,\"sd.customer.portal.help.center.agent.announcement\":true,\"sd.sla.improved.rendering\":false,\"sd.experimental.portal.search.algorithm.default.2\":false,\"sd.customer.feedback.validate.reporter.on.token\":true,\"sd.custom.email.notifications.utf8.csat.star\":true,\"sd.who.create.customers.by.email.setting\":true,\"com.atlassian.jira.issuetable.move.links.hidden\":true,\"jira.renderer.consider.variable.format\":true,\"sd.stats.event.tracking\":true,\"sd.password.helper.dialog\":true,\"sd.canned.responses\":false,\"sd.portal.help.center.customer.signup.secondary.email\":true,\"sd.custom.email.notifications.manage.language\":true,\"sd.use.search.by.permissions\":true,\"sd.slavalue.record.updated.date\":false,\"sd.report.custom.date.range\":false,\"sd.kb.article.helpfulness.report\":false,\"com.atlassian.jira.agile.darkfeature.sprint.goal\":false,\"sd.custom.email.notifications.styling\":true,\"sd.workinghours.new.page.bulldog.1\":false,\"sd.customer.portal.two.step.login\":false,\"sd.automation.psmq.async.executor\":true,\"sd.customer.org.list.page.lazy.search\":true,\"sd.approval.requested.when.handler\":true,\"sd.request.type.field.rest.api.filtering.bugfix\":true,\"sd.automation.then.action.auto.answer.approval\":true,\"com.atlassian.jira.agile.darkfeature.kanplan.epics.and.versions\":false,\"sla.will.only.be.paused.if.they.are.already.started\":true,\"sd.kb.comment.share.stats.collection\":true,\"com.atlassian.jira.upgrade.startup.fix.index\":true,\"sd.customer.orgs.group.participants\":true,\"sd.portal.help.center.customer.signup\":true,\"sd.sla.agent.jql.security.restricted\":true,\"sd.test.feature.flag.x\":true,\"sd.test.feature.flag.y\":false,\"sd.cluster.safe.mail.channel.shutdown\":true,\"sd.email.channel.folders\":false,\"sd.email.analytics.open\":false,\"sd.kb.project.creation.create.link.space\":true,\"sd.workinghours.new.page\":false,\"sd.confluence.anonymous.permission.fix\":true,\"com.atlassian.jira.issuetable.draggable\":true,\"sd.customer.portal.project.agent.announcement\":true,\"sd.automation.audit.log\":true,\"jira.jql.suggestrecentfields\":false,\"sd.canned.responses.check.index.startup\":false,\"sd.new.project.templates\":true,\"sd.custom.email.notifications.custom.rules.simple.ui\":false,\"sd.custom.email.notifications.cut.over\":true,\"sd.dismiss.all.misconfiguration.warnings.setting\":true,\"com.atlassian.jira.agile.darkfeature.optimistic.transitions\":true,\"sd.sla.configurations.export\":true,\"sd.canned.responses.variable.substitution\":true,\"com.atlassian.jira.agile.darkfeature.kanplan\":false,\"sd.internal.base.off.thread.on.completion.events\":false,\"sd.customer.portal.prioties.per.project.fix\":true,\"jira.instrumentation.laas\":false,\"sd.kb.self.service.report\":false,\"sla.improved.request.handling\":true,\"sd.no.schedule.async.upgrade.tasks\":true,\"sd.kb.primary.nav\":true,\"com.atlassian.jira.agile.darkfeature.edit.closed.sprint\":false,\"sd.kb.issueview.panel.phase2\":true,\"sd.email.outsider.comments\":true,\"jira.create.linked.issue\":true,\"sd.kb.issueview.panel\":true,\"jira.sal.host.connect.accessor.existing.transaction.will.create.transactions\":true,\"sd.approvals.light.weight\":false,\"sd.automation.then.webhook\":true,\"sd.respect.inline.edit.issue.off\":true,\"jira.jql.smartautoselectfirst\":false,\"sd.global.portal.search.atlassian.only.tracking\":false,\"sd.automation.if.condition.comment.primary.action\":true,\"jira.priorities.per.project\":true,\"sd.inline.noformat.renderer\":true,\"sd.customer.request.type.create.edit.screens\":true}}";
WRM._unparsedData["jira.webresources:default-comment-security-level.DefaultCommentSecurityLevelHelpLink"]="{\"extraClasses\":\"default-comment-level-help\",\"title\":\"Commenting on an Issue\",\"url\":\"https://docs.atlassian.com/jira/jcore-docs-076/Editing+and+collaborating+on+issues#Editingandcollaboratingonissues-restrictacomment\",\"isLocal\":false}";
WRM._unparsedData["jira.webresources:dateFormatProvider.allFormats"]="{\"dateFormats\":{\"meridiem\":[\"AM\",\"PM\"],\"eras\":[\"BC\",\"AD\"],\"months\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"monthsShort\":[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"weekdaysShort\":[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],\"weekdays\":[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},\"lookAndFeelFormats\":{\"relativize\":\"true\",\"time\":\"HH:mm\",\"day\":\"EEEE HH:mm\",\"dmy\":\"dd/MMM/yy\",\"complete\":\"dd/MMM/yy HH:mm\"}}";
WRM._unparsedData["com.atlassian.jira.jira-issue-nav-components:issueviewer.features"]="{\"rteEnabled\":true}";
WRM._unparsedData["com.atlassian.jira.plugins.jira-dnd-attachment-plugin:dnd-issue-drop-zone.thumbnail-mime-types"]="\"image/png,image/vnd.wap.wbmp,image/x-png,image/jpeg,image/bmp,image/gif\"";
WRM._unparsedData["com.atlassian.jira.plugins.jira-dnd-attachment-plugin:dnd-issue-drop-zone.upload-limit"]="\"62914560\"";
WRM._unparsedData["com.atlassian.plugins.helptips.jira-help-tips:help-tip-manager.JiraHelpTipData"]="{\"anonymous\":true}";
WRM._unparsedData["com.atlassian.jira.jira-view-issue-plugin:controller-subtasks.controller.subtasks.parameters"]="{\"url\":\"/rest/api/2/issue/{issueId}/subtask/move\"}";
WRM._unparsedData["com.atlassian.analytics.analytics-client:policy-update-init.policy-update-data-provider"]="false";
WRM._unparsedData["com.atlassian.analytics.analytics-client:programmatic-analytics-init.programmatic-analytics-data-provider"]="false";
WRM._unparsedData["com.atlassian.servicedesk.servicedesk-canned-responses-plugin:canned-responses-data-provider.data"]="{\"substitutionVariables\":{\"issue.summary\":\"Issue summary\",\"issue.description\":\"Issue description\",\"issue.key\":\"Issue key\",\"issue.reporter.name\":\"Issue reporter\",\"issue.resolution\":\"Issue resolution\",\"request.url\":\"Request URL\",\"request.status\":\"Request status\"}}";
WRM._unparsedData["jira.webresources:avatar-picker.data"]="{}";
WRM._unparsedData["com.atlassian.feedback.jira-feedback-plugin:button-resources-init.data"]="{\"jira.feedback.plugin.issue.collector.core\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-UK&collectorId=abbf546d\",\"jira.feedback.plugin.issue.collector.default\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-UK&collectorId=abbf546d\",\"jira.feedback.plugin.issue.collector.service.desk\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector.js?locale=en-UK&collectorId=a698db21\",\"jira.feedback.plugin.issue.collector.software\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-UK&collectorId=abbf546d\",\"isHeaderFeedbackButtonEnabled\":true}";
WRM._unparsedData["com.atlassian.jira.jira-header-plugin:dismissedFlags.flags"]="{\"dismissed\":[]}";
WRM._unparsedData["com.atlassian.jira.jira-header-plugin:newsletter-signup-tip-init.newsletterSignup"]="{\"signupDescription\":\"Get updates, inspiration and best practices from the team behind JIRA.\",\"formUrl\":\"https://www.atlassian.com/apis/exact-target/{0}/subscribe?mailingListId=1401671\",\"signupTitle\":\"Sign up!\",\"signupId\":\"newsletter-signup-tip\",\"showNewsletterTip\":false}";
WRM._unparsedData["com.atlassian.jira.project-templates-plugin:project-templates-plugin-resources.ptAnalyticsData"]="{\"instanceCreatedDate\":\"2011-01-31\"}";
WRM._unparsedData["com.atlassian.servicedesk.core-ui:util-help-links.help-links"]="{\"help\":{\"email.settings\":\"https://docs.atlassian.com/jira/jsd-docs-039/Receiving+requests+by+email\",\"managing.queues\":\"https://docs.atlassian.com/jira/jsd-docs-039/Setting+up+queues+for+your+team\",\"email.setup\":\"https://docs.atlassian.com/jira/jsd-docs-039/Receiving+requests+by+email\",\"request.settings.help.bubble\":\"https://docs.atlassian.com/jira/jsd-docs-039/Managing+access+to+your+service+desk\",\"email.settings.suitablerequest\":\"https://docs.atlassian.com/jira/jsd-docs-039/Receiving+requests+by+email#Receivingrequestsbyemail-suitablerequest\",\"sla.import.help\":\"https://docs.atlassian.com/jira/jsd-docs-039/Importing+SLAs\",\"documentation.home\":\"https://docs.atlassian.com/jira/jsd-docs-039/JIRA+Service+Desk+Documentation\",\"default\":\"https://docs.atlassian.com/jira/jsd-docs-039/\",\"create.space.help\":\"https://docs.atlassian.com/jira/jsd-docs-039/Serving+customers+with+a+knowledge+base#serving-customers-with-a-knowledge-base-createpermission\",\"email.settings.troubleshooting\":\"https://docs.atlassian.com/jira/jsd-docs-039/Troubleshooting+issues+with+the+email+channel\",\"admin.notifications.config\":\"https://docs.atlassian.com/jira/jsd-docs-039/Managing+service+desk+notifications\",\"troubleshoot.requesttype\":\"https://docs.atlassian.com/jira/jsd-docs-039/Troubleshooting+issues+with+request+types\",\"approvals.configuration\":\"https://docs.atlassian.com/jira/jsd-docs-039/Configuring+JIRA+Service+Desk+approvals\",\"setting.up.reports\":\"https://docs.atlassian.com/jira/jsd-docs-039/Setting+up+service+desk+reports\",\"public.signup\":\"https://docs.atlassian.com/jira/jsd-docs-039/Configuring+public+signup\",\"knowledge.base\":\"https://docs.atlassian.com/jira/jsd-docs-039/Serving+customers+with+a+knowledge+base\",\"resolve.permission.scheme.errors\":\"https://docs.atlassian.com/jira/jsd-docs-039/Resolving+permission+scheme+errors\",\"getting.started\":\"https://docs.atlassian.com/jira/jsd-docs-039/Getting+started+with+JIRA+Service+Desk\",\"getting.started.agent\":\"https://docs.atlassian.com/jira/jsd-docs-039/Getting+started+for+service+desk+agents\",\"invite.customers\":\"https://docs.atlassian.com/jira/jsd-docs-039/Managing+access+to+your+service+desk\"},\"kb\":{\"default\":\"https://confluence.atlassian.com/display/SDKB/\",\"troubleshooting.user.management.issues\":\"https://confluence.atlassian.com/display/SDKB/Troubleshooting+issues+with+service+desk+user+management\",\"legacytransition\":\"https://confluence.atlassian.com/display/SDKB/Replacing+legacy+automatic+transitions+with+automation+rules\",\"umtroubleshoot\":\"https://confluence.atlassian.com/display/SDKB/Troubleshooting+issues+with+service+desk+user+management\"}}";
WRM._unparsedData["com.atlassian.servicedesk.core-ui:util-base-url.base-url"]="\"https://issues.apache.org/jira\"";
WRM._unparsedData["com.atlassian.jira.plugins.jira-wiki-editor:wiki-editor-resources.help-data"]="{\"showHelp\":true,\"editorDocumentationUrl\":[\"https://docs.atlassian.com/jira/jcore-docs-076/Visual+editing\"],\"editorDocumentationTitle\":[\"Show me documentation for the visual editor\"]}";
WRM._unparsedData["com.atlassian.jira.plugins.jira-wiki-editor:wiki-editor-resources.thumbnails-allowed"]="false";
WRM._unparsedData["jira.webresources:user-message-flags.adminLockout"]="{}";
WRM._unparsedData["jira.request.correlation-id"]="\"6add9067ad5cc2\"";
WRM._unparsedData["project-id"]="12310110";
WRM._unparsedData["project-key"]="\"LUCENE\"";
WRM._unparsedData["project-name"]="\"Lucene - Core\"";
WRM._unparsedData["project-type"]="\"software\"";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:generic-filters"]="[{\"id\":\"allissues\",\"jql\":\"project = \\\"{0}\\\" ORDER BY {1}\",\"defaultOrderby\":\"created DESC\",\"label\":\"All issues\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[]},{\"id\":\"allopenissues\",\"jql\":\"project = \\\"{0}\\\" AND resolution = Unresolved ORDER BY {1}\",\"defaultOrderby\":\"priority DESC, updated DESC\",\"label\":\"Open issues\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"resolution\"]},{\"id\":\"doneissues\",\"jql\":\"project = \\\"{0}\\\" AND statusCategory = Done ORDER BY {1}\",\"defaultOrderby\":\"updated DESC\",\"label\":\"Done issues\",\"requiresUser\":false,\"supportsInlineIssueCreate\":false,\"fields\":[\"status\"]},{\"id\":\"recentlyviewed\",\"jql\":\"project = \\\"{0}\\\" AND issuekey in issueHistory() ORDER BY {1}\",\"defaultOrderby\":\"lastViewed DESC\",\"label\":\"Viewed recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"issuekey\"]},{\"id\":\"addedrecently\",\"jql\":\"project = \\\"{0}\\\" AND created \u003e= -1w ORDER BY {1}\",\"defaultOrderby\":\"created DESC\",\"label\":\"Created recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"created\"]},{\"id\":\"resolvedrecently\",\"jql\":\"project = \\\"{0}\\\" AND resolutiondate \u003e= -1w ORDER BY {1}\",\"defaultOrderby\":\"updated DESC\",\"label\":\"Resolved recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":false,\"fields\":[\"resolutiondate\"]},{\"id\":\"updatedrecently\",\"jql\":\"project = \\\"{0}\\\" AND updated \u003e= -1w ORDER BY {1}\",\"defaultOrderby\":\"updated DESC\",\"label\":\"Updated recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"updated\"]}]";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:default-filter-priority"]="[\"allopenissues\",\"allissues\"]";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:can-manage-filters"]="false";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:project-filters"]="[]";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:can-create-issues"]="false";
WRM._unparsedData["projectId"]="12310110";
WRM._unparsedData["projectKey"]="\"LUCENE\"";
WRM._unparsedData["projectType"]="\"software\"";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:server-rendered"]="true";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <link type="text/css" rel="stylesheet" href="/jira/s/a8a4711bc3f2eb261d8c8fd9fbcbba8b-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1fca1750044f2777c977e8d8cc023344/_/download/contextbatch/css/_super/batch.css" data-wrm-key="_super" data-wrm-batch-type="context" media="all"> 
  <link type="text/css" rel="stylesheet" href="/jira/s/1a6b21131945f6f49ff48336b49ca3fe-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/37a6e594cbbfd462a8a54d5aa11475c1/_/download/contextbatch/css/project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super/batch.css?agile_global_admin_condition=true&amp;hc-enabled=true&amp;is-server-instance=true&amp;jag=true&amp;jira.create.linked.issue=true&amp;nps-acknowledged=true&amp;richediton=true&amp;sd_operational=true" data-wrm-key="project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super" data-wrm-batch-type="context" media="all"> 
  <link type="text/css" rel="stylesheet" href="/jira/s/611672383f6cab00ab202241ba6f9d68-T/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/7.6.3/_/download/batch/com.atlassian.feedback.jira-feedback-plugin:button-resources-init/com.atlassian.feedback.jira-feedback-plugin:button-resources-init.css" data-wrm-key="com.atlassian.feedback.jira-feedback-plugin:button-resources-init" data-wrm-batch-type="resource" media="all"> 
  <script type="text/javascript" src="/jira/s/d8484c9183f546511a8e336a8779bcd9-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1fca1750044f2777c977e8d8cc023344/_/download/contextbatch/js/_super/batch.js?locale=en-UK" data-wrm-key="_super" data-wrm-batch-type="context" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d3b35d835f8f46fc3b53bb4db7f85158-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/37a6e594cbbfd462a8a54d5aa11475c1/_/download/contextbatch/js/project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super/batch.js?agile_global_admin_condition=true&amp;hc-enabled=true&amp;is-server-instance=true&amp;jag=true&amp;jira.create.linked.issue=true&amp;locale=en-UK&amp;nps-acknowledged=true&amp;richediton=true&amp;sd_operational=true" data-wrm-key="project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super" data-wrm-batch-type="context" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/71d42e74136d842a3ef4d5d136484843-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/871d45c9f322a22cb3aa9b7948a69803/_/download/contextbatch/js/atl.global,-_super/batch.js?locale=en-UK" data-wrm-key="atl.global,-_super" data-wrm-batch-type="context" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:calendar-en/jira.webresources:calendar-en.js" data-wrm-key="jira.webresources:calendar-en" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:calendar-localisation-moment/jira.webresources:calendar-localisation-moment.js" data-wrm-key="jira.webresources:calendar-localisation-moment" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/7.6.3/_/download/batch/com.atlassian.feedback.jira-feedback-plugin:button-resources/com.atlassian.feedback.jira-feedback-plugin:button-resources.js" data-wrm-key="com.atlassian.feedback.jira-feedback-plugin:button-resources" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <link type="text/css" rel="stylesheet" href="/jira/s/95a4826c265852f4904f1e0e7300df68-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/e0de73613a1027de08f3da6a45e1d1a2/_/download/contextbatch/css/jira.global.look-and-feel,-_super/batch.css" data-wrm-key="jira.global.look-and-feel,-_super" data-wrm-batch-type="context" media="all"> 
  <script type="text/javascript" src="/jira/rest/api/1.0/shortcuts/76005/944bb39eced1b35cfc7194aa02eb5a5a/shortcuts.js?context=issuenavigation&amp;context=issueaction"></script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.jira.jira-issue-nav-components:inline-edit-enabled"]="true";
WRM._unparsedData["should-display-chaperone"]="false";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <link type="text/css" rel="stylesheet" href="/jira/s/15712b600e9aecf72ffd9fd3704a0c78-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/6b22a15c7b83f87a47b1757076f43542/_/download/contextbatch/css/com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue/batch.css?jira.create.linked.issue=true&amp;richediton=true&amp;sd_operational=true" data-wrm-key="com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue" data-wrm-batch-type="context" media="all"> 
  <script type="text/javascript" src="/jira/s/5a8f0f8b8aa8f96a4f0f7e9e248d62f3-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/6b22a15c7b83f87a47b1757076f43542/_/download/contextbatch/js/com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue/batch.js?jira.create.linked.issue=true&amp;locale=en-UK&amp;richediton=true&amp;sd_operational=true" data-wrm-key="com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue" data-wrm-batch-type="context" data-initially-rendered></script> 
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="ajs-can-search-users" content="false"> 
  <meta name="ajs-can-edit-watchers" content="false"> 
  <meta name="ajs-default-avatar-url" content="https://issues.apache.org/jira/secure/useravatar?size=xsmall&amp;avatarId=10453"> 
  <meta name="ajs-issue-project-type" content="software"> 
  <meta name="ajs-issue-key" content="LUCENE-710"> 
  <meta name="ajs-server-view-issue-is-editable" content="false"> 
  <title>[LUCENE-710] Implement "point in time" searching without relying on filesystem semantics - ASF JIRA</title> 
  <link rel="search" type="application/opensearchdescription+xml" href="/jira/osd.jsp" title="[LUCENE-710] Implement &quot;point in time&quot; searching without relying on filesystem semantics - ASF JIRA"> 
 </head> 
 <body id="jira" class="aui-layout aui-theme-default " data-version="7.6.3"> 
  <div id="page"> 
   <header id="header" role="banner"> 
    <script>
require(["jquery", "jira/license-banner"], function ($, licenseBanner) {
    $(function () {
        licenseBanner.showLicenseBanner("");
        licenseBanner.showLicenseFlag("");
    });
});
</script> 
    <nav class="aui-header aui-dropdown2-trigger-group" role="navigation">
     <div class="aui-header-inner">
      <div class="aui-header-before">
       <a class=" aui-dropdown2-trigger app-switcher-trigger" aria-controls="app-switcher" aria-haspopup="true" role="button" tabindex="0" data-aui-trigger href="#app-switcher"><span class="aui-icon aui-icon-small aui-iconfont-appswitcher">Linked Applications</span></a>
       <div id="app-switcher" class="aui-dropdown2 aui-style-default" role="menu" aria-hidden="true" data-is-switcher="true" data-environment="{&quot;isUserAdmin&quot;:false,&quot;isAppSuggestionAvailable&quot;:false,&quot;isSiteAdminUser&quot;:false}">
        <div role="application">
         <div class="app-switcher-loading">
          Loading…
         </div>
        </div>
       </div>
      </div>
      <div class="aui-header-primary">
       <h1 id="logo" class="aui-header-logo aui-header-logo-custom"><a href="https://issues.apache.org/jira/secure/MyJiraHome.jspa"><img src="/jira/s/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/_/jira-logo-scaled.png" alt="ASF JIRA"></a></h1>
       <ul class="aui-nav">
        <li><a href="/jira/secure/Dashboard.jspa" class=" aui-nav-link aui-dropdown2-trigger aui-dropdown2-ajax" id="home_link" aria-haspopup="true" aria-controls="home_link-content" title="View and manage your dashboards" accesskey="d">Dashboards</a>
         <div class="aui-dropdown2 aui-style-default" id="home_link-content" data-aui-dropdown2-ajax-key="home_link"></div></li>
        <li><a href="/jira/browse/LUCENE" class=" aui-nav-link aui-dropdown2-trigger aui-dropdown2-ajax" id="browse_link" aria-haspopup="true" aria-controls="browse_link-content" title="View recent projects and browse a list of projects" accesskey="p">Projects</a>
         <div class="aui-dropdown2 aui-style-default" id="browse_link-content" data-aui-dropdown2-ajax-key="browse_link"></div></li>
        <li><a href="/jira/issues/" class=" aui-nav-link aui-dropdown2-trigger aui-dropdown2-ajax" id="find_link" aria-haspopup="true" aria-controls="find_link-content" title="Search for issues and view recent issues" accesskey="i">Issues</a>
         <div class="aui-dropdown2 aui-style-default" id="find_link-content" data-aui-dropdown2-ajax-key="find_link"></div></li> 
       </ul>
      </div>
      <div class="aui-header-secondary">
       <ul class="aui-nav">
        <li id="quicksearch-menu"> 
         <form action="/jira/secure/QuickSearch.jspa" method="get" id="quicksearch" class="aui-quicksearch dont-default-focus ajs-dirty-warning-exempt"> 
          <input id="quickSearchInput" class="search" type="text" title="Search" placeholder="Search" name="searchString" accessKey="q"> 
          <input type="submit" class="hidden" value="Search"> 
         </form> </li> 
        <li><a class="jira-feedback-plugin" role="button" aria-haspopup="true" id="jira-header-feedback-link" href="#"><span class="aui-icon aui-icon-small jira-feedback-plugin-icon">Give feedback to Atlassian</span></a></li> 
        <li id="system-help-menu"> <a class="aui-nav-link aui-dropdown2-trigger" id="help_menu" aria-haspopup="true" aria-owns="system-help-menu-content" href="https://docs.atlassian.com/jira/jcore-docs-076/" target="$textUtils.htmlEncode($rootHelpMenuItem.params.target)" title="Help"><span class="aui-icon aui-icon-small aui-iconfont-help">Help</span></a> 
         <div id="system-help-menu-content" class="aui-dropdown2 aui-style-default"> 
          <div class="aui-dropdown2-section"> 
           <ul id="jira-help" class="aui-list-truncate"> 
            <li> <a id="view_core_help" class="aui-nav-link " title="Go to the online documentation for JIRA Core" href="https://docs.atlassian.com/jira/jcore-docs-076/" target="_blank">JIRA Core help</a> </li> 
            <li> <a id="keyshortscuthelp" class="aui-nav-link " title="Get more information about JIRA's Keyboard Shortcuts" href="/jira/secure/ViewKeyboardShortcuts!default.jspa" target="_blank">Keyboard Shortcuts</a> </li> 
            <li> <a id="view_about" class="aui-nav-link " title="Get more information about JIRA" href="/jira/secure/AboutPage.jspa">About JIRA</a> </li> 
            <li> <a id="view_credits" class="aui-nav-link " title="See who did what" href="/jira/secure/JiraCreditsPage!default.jspa" target="_blank">JIRA Credits</a> </li> 
           </ul> 
          </div> 
         </div> </li> 
        <li id="user-options"> <a class="aui-nav-link login-link" href="/jira/login.jsp?os_destination=%2Fbrowse%2FLUCENE-710">Log In</a> 
         <div id="user-options-content" class="aui-dropdown2 aui-style-default"> 
          <div class="aui-dropdown2-section"> 
          </div> 
         </div> </li> 
       </ul>
      </div>
     </div>
     <!-- .aui-header-inner-->
    </nav>
    <!-- .aui-header --> 
   </header> 
   <section id="content" role="main"> 
    <big-pipe data-id="sidebar-id" unresolved></big-pipe>
    <div class="aui-sidebar  sidebar-placeholder">
     <div class="aui-sidebar-wrapper">
      <div class="aui-sidebar-body"></div>
      <div class="aui-sidebar-footer">
       <a class="aui-button aui-button-subtle aui-sidebar-toggle aui-sidebar-footer-tipsy" data-tooltip="Expand sidebar ( [ )" href="#"><span class="aui-icon aui-icon-small"></span></a>
      </div>
     </div>
    </div>
    <script id="projects-sidebar-init">
    require(['jira/projects/sidebar/expansion-manager'], function(expansionManager) {
        var scriptTag = document.getElementById('projects-sidebar-init');
        var sidebar = AJS.sidebar('.aui-sidebar');
        expansionManager(sidebar);
        scriptTag.parentElement.removeChild(scriptTag);
    });
    </script>
    <div class="aui-page-panel">
     <div class="aui-page-panel-inner">
      <div class="issue-navigator">
       <div class="content">
        <div class="issue-view">
         <div class="navigation-tools">
          <div class="pager-container"></div>
         </div>
         <div class="issue-container">
          <div id="issue-content" class="issue-edit-form">
           <header id="stalker" class="issue-header js-stalker">
            <div class="issue-header-content">
             <header class="aui-page-header">
              <div class="aui-page-header-inner">
               <div class="aui-page-header-image">
                <span id="12310110" class="aui-avatar aui-avatar-large aui-avatar-project"><span class="aui-avatar-inner"><img id="project-avatar" alt="Uploaded image for project: 'Lucene - Core'" src="https://issues.apache.org/jira/secure/projectavatar?pid=12310110&amp;avatarId=10061"></span></span>
               </div>
               <!-- .aui-page-header-image -->
               <div class="aui-page-header-main">
                <ol class="aui-nav aui-nav-breadcrumbs">
                 <li><a id="project-name-val" href="/jira/browse/LUCENE">Lucene - Core</a></li>
                 <li><a class="issue-link" data-issue-key="LUCENE-710" href="/jira/browse/LUCENE-710" id="key-val" rel="12355631">LUCENE-710</a></li>
                </ol>
                <h1 id="summary-val">Implement "point in time" searching without relying on filesystem semantics</h1>
               </div>
               <!-- .aui-page-header-main -->
               <div class="aui-page-header-actions">
                <div id="issue-header-pager"></div>
               </div>
               <!-- .aui-page-header-actions -->
              </div>
              <!-- .aui-page-header-inner -->
             </header>
             <!-- .aui-page-header -->
             <div class="command-bar">
              <div class="ops-cont">
               <div class="ops-menus aui-toolbar">
                <div class="toolbar-split toolbar-split-left">
                 <ul id="opsbar-ops-login-lnk_container" class="toolbar-group pluggable-ops">
                  <li class="toolbar-item"><a id="ops-login-lnk" title="Log In" class="toolbar-trigger" href="/jira/login.jsp?os_destination=%2Fbrowse%2FLUCENE-710"><span class="trigger-label">Log In</span></a></li>
                 </ul>
                 <ul id="opsbar-opsbar-operations" class="toolbar-group pluggable-ops"></ul>
                 <ul id="opsbar-opsbar-transitions" class="toolbar-group pluggable-ops"></ul>
                 <ul id="opsbar-opsbar-admin" class="toolbar-group pluggable-ops"></ul>
                </div>
                <div class="toolbar-split toolbar-split-right">
                 <ul id="opsbar-jira.issue.tools" class="toolbar-group pluggable-ops">
                  <li class="toolbar-item">
                   <div>
                    <a href="#" id="viewissue-export" aria-owns="viewissue-export_drop" aria-haspopup="true" title="Export this issue in another format" class="toolbar-trigger aui-button aui-style-default aui-dropdown2-trigger"><span class="icon icon-default aui-icon aui-icon-small aui-iconfont-export"></span> <span class="dropdown-text">Export</span></a>
                    <div id="viewissue-export_drop" class="aui-style-default aui-dropdown2">
                     <ul>
                      <li class="aui-list-item"><a href="/jira/si/jira.issueviews:issue-xml/LUCENE-710/LUCENE-710.xml" id="jira.issueviews:issue-xml"><span class="trigger-label">XML</span></a></li>
                      <li class="aui-list-item"><a href="/jira/si/jira.issueviews:issue-word/LUCENE-710/LUCENE-710.doc" id="jira.issueviews:issue-word"><span class="trigger-label">Word</span></a></li>
                      <li class="aui-list-item"><a href="/jira/si/jira.issueviews:issue-html/LUCENE-710/LUCENE-710.html" id="jira.issueviews:issue-html"><span class="trigger-label">Printable</span></a></li>
                      <li class="aui-list-item"><a href="/jira/si/com.atlassian.jira.plugins.jira-importers-plugin:issue-json/LUCENE-710/LUCENE-710.json" id="com.atlassian.jira.plugins.jira-importers-plugin:issue-json"><span class="trigger-label">JSON</span></a></li>
                     </ul>
                    </div>
                   </div></li>
                 </ul>
                </div>
               </div>
              </div>
             </div>
            </div>
           </header>
           <div class="issue-body-content">
            <div class="aui-group issue-body">
             <div class="aui-item issue-main-column">
              <div id="details-module" class="module toggle-wrap">
               <div id="details-module_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Details</h2>
               </div>
               <div class="mod-content"> 
                <ul id="issuedetails" class="property-list two-cols"> 
                 <li class="item"> 
                  <div class="wrap"> 
                   <strong class="name">Type:</strong> 
                   <span id="type-val" class="value"> <img alt="" height="16" src="/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype" title="Improvement - An improvement or enhancement to an existing feature or task." width="16"> Improvement </span> 
                  </div> </li> 
                 <li class="item item-right"> 
                  <div class="wrap"> 
                   <strong class="name">Status:</strong> 
                   <span id="status-val" class="value"> <span class=" jira-issue-status-lozenge aui-lozenge jira-issue-status-lozenge-green jira-issue-status-lozenge-done jira-issue-status-lozenge-max-width-medium" data-tooltip="<span class=&quot;jira-issue-status-tooltip-title&quot;>Resolved</span><br><span class=&quot;jira-issue-status-tooltip-desc&quot;>A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.</span>">Resolved</span> </span> 
                  </div> </li> 
                 <li class="item new"> 
                  <div class="wrap"> 
                   <strong class="name">Priority:</strong> 
                   <span id="priority-val" class="value"> <img alt="" height="16" src="/jira/images/icons/priorities/minor.svg" title="Minor - Minor loss of function, or other problem where easy workaround is present." width="16"> Minor </span> 
                  </div> </li> 
                 <li class="item item-right"> 
                  <div class="wrap"> 
                   <strong class="name">Resolution:</strong> 
                   <span id="resolution-val" class="value resolved"> Fixed </span> 
                  </div> </li> 
                 <li class="item"> 
                  <div class="wrap"> 
                   <strong class="name">Affects Version/s:</strong> 
                   <span id="versions-val" class="value"> <span class="shorten" id="versions-field"> <span title="2.1 ">2.1</span> </span> </span> 
                  </div> </li> 
                 <li class="item item-right"> 
                  <div class="wrap"> 
                   <strong class="name">Fix Version/s:</strong> 
                   <span id="fixfor-val" class="value"> None </span> 
                  </div> </li> 
                 <li class="item"> 
                  <div class="wrap"> 
                   <strong class="name">Component/s:</strong> 
                   <span id="components-val" class="value"> <span class="shorten" id="components-field"> <a href="/jira/issues/?jql=project+%3D+LUCENE+AND+component+%3D+%22core%2Findex%22" title="core/index issues with indexing code">core/index</a> </span> </span> 
                  </div> </li> 
                 <li class="item full-width"> 
                  <div class="wrap" id="wrap-labels"> 
                   <strong class="name">Labels:</strong> 
                   <div class="labels-wrap value"> 
                    <span class="labels" id="labels-12355631-value">None</span> 
                   </div> 
                  </div> </li> 
                </ul> 
                <div id="customfieldmodule"> 
                 <div class="aui-tabs horizontal-tabs" id="customfield-tabs"> 
                  <div id="customfield-panel-1" class="tabs-pane active-pane"> 
                   <ul class="property-list"> 
                    <li id="rowForcustomfield_12310120" class="item"> 
                     <div class="wrap"> 
                      <strong title="Lucene Fields" class="name">Lucene Fields:</strong> 
                      <div id="customfield_12310120-val" class="value type-multicheckboxes" data-fieldtype="multicheckboxes" data-fieldtypecompletekey="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes"> 
                       <div class="shorten" id="customfield_12310120-field"> 
                        <span>New</span> 
                       </div> 
                      </div> 
                     </div> </li> 
                   </ul> 
                  </div> 
                 </div>
                </div> 
               </div>
              </div>
              <div id="descriptionmodule" class="module toggle-wrap">
               <div id="descriptionmodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Description</h2>
               </div>
               <div class="mod-content">
                <div id="description-val" class="field-ignore-highlight"> 
                 <div class="user-content-block"> 
                  <p>This was touched on in recent discussion on dev list:</p> 
                  <p> <a href="http://www.gossamer-threads.com/lists/lucene/java-dev/41700#41700" class="external-link" rel="nofollow">http://www.gossamer-threads.com/lists/lucene/java-dev/41700#41700</a></p> 
                  <p>and then more recently on the user list:</p> 
                  <p> <a href="http://www.gossamer-threads.com/lists/lucene/java-user/42088" class="external-link" rel="nofollow">http://www.gossamer-threads.com/lists/lucene/java-user/42088</a></p> 
                  <p>Lucene's "point in time" searching currently relies on how the<br> underlying storage handles deletion files that are held open for<br> reading.</p> 
                  <p>This is highly variable across filesystems. For example, UNIX-like<br> filesystems usually do "close on last delete", and Windows filesystem<br> typically refuses to delete a file open for reading (so Lucene retries<br> later). But NFS just removes the file out from under the reader, and<br> for that reason "point in time" searching doesn't work on NFS<br> (see <a href="https://issues.apache.org/jira/browse/LUCENE-673" title="Exceptions when using Lucene over NFS" class="issue-link" data-issue-key="LUCENE-673"><del>LUCENE-673</del></a> ).</p> 
                  <p>With the lockless commits changes (<a href="https://issues.apache.org/jira/browse/LUCENE-701" title="Lock-less commits" class="issue-link" data-issue-key="LUCENE-701"><del>LUCENE-701</del></a> ), it's quite simple to<br> re-implement "point in time searching" so as to not rely on filesystem<br> semantics: we can just keep more than the last segments_N file (as<br> well as all files they reference).</p> 
                  <p>This is also in keeping with the design goal of "rely on as little as<br> possible from the filesystem". EG with lockless we no longer re-use<br> filenames (don't rely on filesystem cache being coherent) and we no<br> longer use file renaming (because on Windows it can fails). This<br> would be another step of not relying on semantics of "deleting open<br> files". The less we require from filesystem the more portable Lucene<br> will be!</p> 
                  <p>Where it gets interesting is what "policy" we would then use for<br> removing segments_N files. The policy now is "remove all but the last<br> one". I think we would keep this policy as the default. Then you<br> could imagine other policies:</p> 
                  <ul> 
                   <li>Keep past N day's worth</li> 
                  </ul> 
                  <ul> 
                   <li>Keep the last N</li> 
                  </ul> 
                  <ul> 
                   <li>Keep only those in active use by a reader somewhere (note: tricky<br> how to reliably figure this out when readers have crashed, etc.)</li> 
                  </ul> 
                  <ul> 
                   <li>Keep those "marked" as rollback points by some transaction, or<br> marked explicitly as a "snaphshot".</li> 
                  </ul> 
                  <ul> 
                   <li>Or, roll your own: the "policy" would be an interface or abstract<br> class and you could make your own implementation.</li> 
                  </ul> 
                  <p>I think for this issue we could just create the framework<br> (interface/abstract class for "policy" and invoke it from<br> IndexFileDeleter) and then implement the current policy (delete all<br> but most recent segments_N) as the default policy.</p> 
                  <p>In separate issue(s) we could then create the above more interesting<br> policies.</p> 
                  <p>I think there are some important advantages to doing this:</p> 
                  <ul> 
                   <li>"Point in time" searching would work on NFS (it doesn't now<br> because NFS doesn't do "delete on last close"; see <a href="https://issues.apache.org/jira/browse/LUCENE-673" title="Exceptions when using Lucene over NFS" class="issue-link" data-issue-key="LUCENE-673"><del>LUCENE-673</del></a> )<br> and any other Directory implementations that don't work<br> currently.</li> 
                  </ul> 
                  <ul> 
                   <li>Transactional semantics become a possibility: you can set a<br> snapshot, do a bunch of stuff to your index, and then rollback to<br> the snapshot at a later time.</li> 
                  </ul> 
                  <ul> 
                   <li>If a reader crashes or machine gets rebooted, etc, it could choose<br> to re-open the snapshot it had previously been using, whereas now<br> the reader must always switch to the last commit point.</li> 
                  </ul> 
                  <ul> 
                   <li>Searchers could search the same snapshot for follow-on actions.<br> Meaning, user does search, then next page, drill down (Solr),<br> drill up, etc. These are each separate trips to the server and if<br> searcher has been re-opened, user can get inconsistent results (=<br> lost trust). But with, one series of search interactions could<br> explicitly stay on the snapshot it had started with.</li> 
                  </ul> 
                 </div> 
                </div> 
               </div>
              </div>
              <div id="dnd-metadata" class="module toggle-wrap">
               <div id="dnd-metadata_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Attachments</h2>
               </div>
               <div class="mod-content">
                <div id="dnd-metadata-webpanel" data-can-attach="false" data-project-type="software" data-upload-limit="62914560" data-thumbnails-allowed="false"></div>
               </div>
              </div>
              <div id="attachmentmodule" class="module toggle-wrap">
               <div id="attachmentmodule_heading" class="mod-header">
                <ul class="ops">
                 <li class="drop">
                  <div class="aui-dd-parent">
                   <a href="#" class="icon drop-menu js-default-dropdown" title="Options"><span>Options</span></a>
                   <div class="aui-dropdown-content aui-list">
                    <ul id="attachment-sorting-options" class="aui-list-section aui-first">
                     <li class="aui-list-item"><a id="attachment-sort-key-name" href="/jira/browse/LUCENE-710?attachmentSortBy=fileName#attachmentmodule" class="aui-list-checked aui-checked aui-list-item-link" title="viewissue.subtasks.tab.show.all.name"><span>Sort By Name</span></a></li>
                     <li class="aui-list-item"><a id="attachment-sort-key-date" href="/jira/browse/LUCENE-710?attachmentSortBy=dateTime#attachmentmodule" class="aui-list-checked aui-list-item-link" title="Sort By Date"><span>Sort By Date</span></a></li>
                    </ul>
                    <ul id="attachment-sorting-order-options" class="aui-list-section aui-last">
                     <li class="aui-list-item"><a id="attachment-sort-direction-asc" href="/jira/browse/LUCENE-710?attachmentOrder=asc#attachmentmodule" class="aui-list-checked aui-checked aui-list-item-link" title="Ascending"><span>Ascending</span></a></li>
                     <li class="aui-list-item"><a id="attachment-sort-direction-desc" href="/jira/browse/LUCENE-710?attachmentOrder=desc#attachmentmodule" class="aui-list-checked aui-list-item-link" title="Descending"><span>Descending</span></a></li>
                    </ul>
                   </div>
                  </div></li>
                </ul>
                <h2 class="toggle-title">Attachments</h2>
               </div>
               <div class="mod-content">
                <ol id="file_attachments" class="item-attachments" data-sort-key="fileName" data-sort-order="asc">
                 <li class="attachment-content js-file-attachment" data-attachment-id="12353363" data-issue-id="12355631" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12353363/710.review.diff" draggable="true" data-downloadurl="text/plain:710.review.diff:https://issues.apache.org/jira/secure/attachment/12353363/710.review.diff"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12353363/710.review.diff" title="Latest  15/Mar/07 10:08 - Doron Cohen" draggable="true" data-downloadurl="text/plain:710.review.diff:https://issues.apache.org/jira/secure/attachment/12353363/710.review.diff">710.review.diff</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-03-15T10:08:49.998Z">15/Mar/07 10:08</time>
                   </dd>
                   <dd class="attachment-size">
                    25 kB
                   </dd>
                   <dd class="attachment-author">
                    Doron Cohen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12353369" data-issue-id="12355631" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12353369/710.review.take2.diff" draggable="true" data-downloadurl="application/octet-stream:710.review.take2.diff:https://issues.apache.org/jira/secure/attachment/12353369/710.review.take2.diff"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-devtools-file" title="File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12353369/710.review.take2.diff" title="Latest  15/Mar/07 12:14 - Michael McCandless" draggable="true" data-downloadurl="application/octet-stream:710.review.take2.diff:https://issues.apache.org/jira/secure/attachment/12353369/710.review.take2.diff">710.review.take2.diff</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-03-15T12:14:57.059Z">15/Mar/07 12:14</time>
                   </dd>
                   <dd class="attachment-size">
                    26 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12352438" data-issue-id="12355631" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12352438/LUCENE-710.patch" draggable="true" data-downloadurl="text/plain:LUCENE-710.patch:https://issues.apache.org/jira/secure/attachment/12352438/LUCENE-710.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12352438/LUCENE-710.patch" title="Latest  02/Mar/07 15:52 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-710.patch:https://issues.apache.org/jira/secure/attachment/12352438/LUCENE-710.patch">LUCENE-710.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-03-02T15:52:01.222Z">02/Mar/07 15:52</time>
                   </dd>
                   <dd class="attachment-size">
                    162 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12352818" data-issue-id="12355631" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12352818/LUCENE-710.take2.patch" draggable="true" data-downloadurl="text/plain:LUCENE-710.take2.patch:https://issues.apache.org/jira/secure/attachment/12352818/LUCENE-710.take2.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12352818/LUCENE-710.take2.patch" title="Latest  07/Mar/07 09:56 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-710.take2.patch:https://issues.apache.org/jira/secure/attachment/12352818/LUCENE-710.take2.patch">LUCENE-710.take2.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-03-07T09:56:35.559Z">07/Mar/07 09:56</time>
                   </dd>
                   <dd class="attachment-size">
                    162 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12352965" data-issue-id="12355631" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12352965/LUCENE-710.take3.patch" draggable="true" data-downloadurl="text/plain:LUCENE-710.take3.patch:https://issues.apache.org/jira/secure/attachment/12352965/LUCENE-710.take3.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12352965/LUCENE-710.take3.patch" title="Latest  09/Mar/07 09:44 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-710.take3.patch:https://issues.apache.org/jira/secure/attachment/12352965/LUCENE-710.take3.patch">LUCENE-710.take3.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-03-09T09:44:04.797Z">09/Mar/07 09:44</time>
                   </dd>
                   <dd class="attachment-size">
                    163 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                </ol>
               </div>
              </div>
              <div id="activitymodule" class="module toggle-wrap">
               <div id="activitymodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Activity</h2>
               </div>
               <div class="mod-content"> 
                <big-pipe data-id="activity-panel-pipe-id" style="height: 70px"> 
                 <div></div> 
                </big-pipe> 
               </div>
              </div>
             </div>
             <div id="viewissuesidebar" class="aui-item issue-side-column">
              <div id="peoplemodule" class="module toggle-wrap">
               <div id="peoplemodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">People</h2>
               </div>
               <div class="mod-content"> 
                <ul class="item-details" id="peopledetails"> 
                 <li class="people-details"> 
                  <dl> 
                   <dt>
                    Assignee:
                   </dt> 
                   <dd> 
                    <span id="assignee-val" class="view-issue-field"> <span class="user-hover" id="issue_summary_assignee_mikemccand" rel="mikemccand" data-user="{&quot;avatarUrl&quot;:&quot;https://issues.apache.org/jira/secure/useravatar?size=xsmall&amp;avatarId=10452&quot;,&quot;displayName&quot;:&quot;Michael McCandless&quot;,&quot;emailAddress&quot;:&quot;lucene@mikemccandless.com&quot;,&quot;username&quot;:&quot;mikemccand&quot;}"> <span class="aui-avatar aui-avatar-small"><span class="aui-avatar-inner"><img src="https://issues.apache.org/jira/secure/useravatar?size=small&amp;avatarId=10452" alt="mikemccand"></span></span> Michael McCandless </span> </span> 
                   </dd> 
                  </dl> 
                  <dl> 
                   <dt>
                    Reporter:
                   </dt> 
                   <dd> 
                    <span id="reporter-val" class="view-issue-field"> <span class="user-hover" id="issue_summary_reporter_mikemccand" rel="mikemccand" data-user="{&quot;avatarUrl&quot;:&quot;https://issues.apache.org/jira/secure/useravatar?size=xsmall&amp;avatarId=10452&quot;,&quot;displayName&quot;:&quot;Michael McCandless&quot;,&quot;emailAddress&quot;:&quot;lucene@mikemccandless.com&quot;,&quot;username&quot;:&quot;mikemccand&quot;}"> <span class="aui-avatar aui-avatar-small"><span class="aui-avatar-inner"><img src="https://issues.apache.org/jira/secure/useravatar?size=small&amp;avatarId=10452" alt="mikemccand"></span></span> Michael McCandless </span> </span> 
                   </dd> 
                  </dl> </li> 
                </ul> 
                <ul class="item-details"> 
                 <li> 
                  <dl> 
                   <dt>
                    Votes:
                   </dt> 
                   <dd> 
                    <span id="vote-data" class="aui-badge vote-state-off">0</span> 
                    <span id="vote-label" title="You have to be logged in to vote for an issue.">Vote for this issue</span> 
                   </dd> 
                  </dl> 
                  <dl> 
                   <dt>
                    Watchers:
                   </dt> 
                   <dd> 
                    <span id="watcher-data" class="aui-badge watch-state-off">2</span> 
                    <span id="watch-label" title="You have to be logged in to watch an issue.">Start watching this issue</span> 
                   </dd> 
                  </dl> </li> 
                </ul> 
               </div>
              </div>
              <div id="datesmodule" class="module toggle-wrap">
               <div id="datesmodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Dates</h2>
               </div>
               <div class="mod-content"> 
                <ul class="item-details"> 
                 <li> 
                  <dl class="dates"> 
                   <dt>
                    Created:
                   </dt> 
                   <dd class="date user-tz" title="14/Nov/06 19:46"> 
                    <span data-name="Created" id="created-val" data-fieldtype="datetime"> <time class="livestamp" datetime="2006-11-14T19:46:22+0000">14/Nov/06 19:46</time> </span> 
                   </dd> 
                  </dl> 
                  <dl class="dates"> 
                   <dt>
                    Updated:
                   </dt> 
                   <dd class="date user-tz" title="15/Mar/07 22:31"> 
                    <span data-name="Updated" id="updated-val" data-fieldtype="datetime"> <time class="livestamp" datetime="2007-03-15T22:31:12+0000">15/Mar/07 22:31</time> </span> 
                   </dd> 
                  </dl> 
                  <dl class="dates"> 
                   <dt>
                    Resolved:
                   </dt> 
                   <dd class="date user-tz" title="13/Mar/07 09:11"> 
                    <span data-name="Resolved" id="resolutiondate-val" data-fieldtype="datetime"> <time class="livestamp" datetime="2007-03-13T09:11:58+0000">13/Mar/07 09:11</time> </span> 
                   </dd> 
                  </dl> </li> 
                </ul> 
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
     <!-- .aui-page-panel-inner -->
    </div>
    <!-- .aui-page-panel -->
    <div class="issue-navigator-init"></div> 
   </section> 
   <footer id="footer" role="contentinfo"> 
    <section class="footer-body"> 
     <ul class="atlassian-footer"> 
      <li> Atlassian JIRA <a class="seo-link" rel="nofollow" href="https://www.atlassian.com/software/jira">Project Management Software</a> <span id="footer-build-information">(v7.6.3#76005-<span title="8a4e38d34af948780dbf52044e7aafb13a7cae58" data-commit-id="8a4e38d34af948780dbf52044e7aafb13a7cae58}">sha1:8a4e38d</span>)</span> </li> 
      <li> <a id="about-link" rel="nofollow" href="/jira/secure/AboutPage.jspa/secure/AboutPage.jspa">About JIRA</a> </li> 
      <li> <a id="footer-report-problem-link" rel="nofollow" href="/jira/secure/CreateIssue!default.jspa">Report a problem</a> </li> 
     </ul> 
     <ul class="atlassian-footer"> 
      <li class="licensemessage"> Powered by a free Atlassian <a rel="nofollow" href="http://www.atlassian.com/software/jira">JIRA</a> open source license for n/a, Apache Software Foundation. Try JIRA - <a rel="nofollow" href="http://www.atlassian.com/software/jira">bug tracking software</a> for <i>your</i> team. </li> 
     </ul> 
     <div id="footer-logo">
      <a rel="nofollow" href="http://www.atlassian.com/">Atlassian</a>
     </div> 
    </section> 
    <fieldset class="hidden parameters"> 
     <input type="hidden" title="loggedInUser" value=""> 
     <input type="hidden" title="ajaxTimeout" value="The call to the JIRA server did not complete within the timeout period.  We are unsure of the result of this operation."> 
     <input type="hidden" title="JiraVersion" value="7.6.3"> 
     <input type="hidden" title="ajaxUnauthorised" value="You are not authorised to perform this operation. Please log in."> 
     <input type="hidden" title="baseURL" value="https://issues.apache.org/jira"> 
     <input type="hidden" title="ajaxCommsError" value="The JIRA server could not be contacted. This may be a temporary glitch or the server may be down. "> 
     <input type="hidden" title="ajaxServerError" value="The JIRA server was contacted but has returned an error response. We are unsure of the result of this operation."> 
     <input type="hidden" title="ajaxErrorCloseDialog" value="Close this dialog and press refresh in your browser"> 
     <input type="hidden" title="ajaxErrorDialogHeading" value="Communications Breakdown"> 
     <input type="hidden" title="dirtyMessage" value="You have entered new data on this page. If you navigate away from this page without first saving your data, the changes will be lost."> 
     <input type="hidden" title="dirtyDialogMessage" value="You have entered new data in this dialog. If you navigate away from this dialog without first saving your data, the changes will be lost. Click cancel to return to the dialog."> 
     <input type="hidden" title="keyType" value="Type"> 
     <input type="hidden" title="keyThen" value="then"> 
     <input type="hidden" title="dblClickToExpand" value="Double click to expand"> 
     <input type="hidden" title="actions" value="Actions"> 
     <input type="hidden" title="removeItem" value="Remove"> 
     <input type="hidden" title="workflow" value="Workflow"> 
     <input type="hidden" title="labelNew" value="New Label"> 
     <input type="hidden" title="issueActionsHint" value="Begin typing for available operations or press down to see all"> 
     <input type="hidden" title="closelink" value="Close"> 
     <input type="hidden" title="dotOperations" value="Operations"> 
     <input type="hidden" title="dotLoading" value="Loading..."> 
     <input type="hidden" title="frotherSuggestions" value="Suggestions"> 
     <input type="hidden" title="frotherNomatches" value="No Matches"> 
     <input type="hidden" title="multiselectVersionsError" value="{0} is not a valid version."> 
     <input type="hidden" title="multiselectComponentsError" value="{0} is not a valid component."> 
     <input type="hidden" title="multiselectGenericError" value="The value {0} is invalid."> 
    </fieldset> 
   </footer> 
  </div> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:bigpipe-js/jira.webresources:bigpipe-js.js" data-wrm-key="jira.webresources:bigpipe-js" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["activity-panel-pipe-id"]="\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    \u003cdiv class=\\\"tabwrap tabs2\\\"\u003e\\n\\n        \u003cul id=\\\"issue-tabs\\\" class=\\\"tabs horizontal\\\"\u003e\\n                                \\n            \u003cli  data-id=\\\"all-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel\\\" data-label=\\\"All\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-710?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"all-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-710?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel\\\"\u003e\u003cstrong\u003eAll\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  class=\\\"active\\\" id=\\\"comment-tabpanel\\\"  data-id=\\\"comment-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel\\\" data-label=\\\"Comments\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-710?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel\\\"\u003e\\n                            \u003cstrong tabindex=\\\"0\\\"\u003eComments\u003c\\/strong\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"worklog-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:worklog-tabpanel\\\" data-label=\\\"Work Log\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-710?page=com.atlassian.jira.plugin.system.issuetabpanels:worklog-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"worklog-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-710?page=com.atlassian.jira.plugin.system.issuetabpanels:worklog-tabpanel\\\"\u003e\u003cstrong\u003eWork Log\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"changehistory-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel\\\" data-label=\\\"History\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-710?page=com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"changehistory-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-710?page=com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel\\\"\u003e\u003cstrong\u003eHistory\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"activity-stream-issue-tab\\\" data-key=\\\"com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab\\\" data-label=\\\"Activity\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-710?page=com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"activity-stream-issue-tab\\\" href=\\\"\\/jira\\/browse\\/LUCENE-710?page=com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab\\\"\u003e\u003cstrong\u003eActivity\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"transitions-summary-tabpanel\\\" data-key=\\\"com.googlecode.jira-suite-utilities:transitions-summary-tabpanel\\\" data-label=\\\"Transitions\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-710?page=com.googlecode.jira-suite-utilities:transitions-summary-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"transitions-summary-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-710?page=com.googlecode.jira-suite-utilities:transitions-summary-tabpanel\\\"\u003e\u003cstrong\u003eTransitions\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                \u003c\\/ul\u003e\\n\\n                    \u003cdiv class=\\\"sortwrap\\\"\u003e\\n                                    \u003ca class=\\\"issue-activity-sort-link ajax-activity-content\\\" rel=\\\"nofollow\\\" data-tab-sort data-order=\\\"desc\\\" href=\\\"\\/jira\\/browse\\/LUCENE-710?actionOrder=desc\\\" title=\\\"Ascending order - Click to sort in descending order\\\"\u003e\\n                        \u003cspan class=\\\"aui-icon aui-icon-small aui-iconfont-up\\\"\u003eAscending order - Click to sort in descending order\u003c\\/span\u003e\\n                    \u003c\\/a\u003e\\n                            \u003c\\/div\u003e\\n            \u003c\\/div\u003e\\n    \u003cdiv class=\\\"issuePanelWrapper\\\"\u003e\\n        \u003cdiv class=\\\"issuePanelProgress\\\"\u003e\u003c\\/div\u003e\\n        \u003cdiv class=\\\"issuePanelContainer\\\" id=\\\"issue_actions_container\\\"\u003e\\n                                    \\n\\n\\n\u003cdiv id=\\\"comment-12466073\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466073&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466073\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466073_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466073_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 15:09\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T15:09:01+0000\'\u003e19\\/Jan\\/07 15:09\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eThere has been some great design discussions \\/ iterations recently\u003cbr\\/\u003e\\non how to approach this:\u003c\\/p\u003e\\n\\n\u003cp\u003e    \u003ca href=\\\"http:\\/\\/www.gossamer-threads.com\\/lists\\/lucene\\/java-dev\\/44162\\\" class=\\\"external-link\\\" rel=\\\"nofollow\\\"\u003ehttp:\\/\\/www.gossamer-threads.com\\/lists\\/lucene\\/java-dev\\/44162\u003c\\/a\u003e\u003c\\/p\u003e\\n\\n\u003cp\u003e    \u003ca href=\\\"http:\\/\\/www.gossamer-threads.com\\/lists\\/lucene\\/java-dev\\/44236\\\" class=\\\"external-link\\\" rel=\\\"nofollow\\\"\u003ehttp:\\/\\/www.gossamer-threads.com\\/lists\\/lucene\\/java-dev\\/44236\u003c\\/a\u003e\u003c\\/p\u003e\\n\\n\\n\u003cp\u003eI think we\'ve iterated to a good approach now.  Here\'s the summary:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eFirst, add an option to IndexWriter to \\\"commit (write segments_N)\u003cbr\\/\u003e\\n    only on close\\\" vs writing a segments_N every time there is a\u003cbr\\/\u003e\\n    flush, merge, etc., during a single IndexWriter session.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003e    This means a reader won\'t see anything a writer has been doing\u003cbr\\/\u003e\\n    until it\'s closed.\u003c\\/p\u003e\\n\\n\u003cp\u003e    We would still have an \\\"autoCommit\\\" true\\/false (default true) to\u003cbr\\/\u003e\\n    keep backwards compatibility.  If true, the IndexWriter writes a\u003cbr\\/\u003e\\n    new segments_N every time it flushes, merges segments, etc.; else\u003cbr\\/\u003e\\n    it only writes one on close.\u003c\\/p\u003e\\n\\n\u003cp\u003e    We would add an \\\"abort()\\\" to IndexWriter to not commit, clean up\u003cbr\\/\u003e\\n    any temp files created, and rollback.\u003c\\/p\u003e\\n\\n\u003cp\u003e    \\\"Commit on close\\\" will also address \\/ enable fixes for other\u003cbr\\/\u003e\\n    issues like prevent readers from refreshing half way through\u003cbr\\/\u003e\\n    something like \\\"bulk delete then bulk add\\\", preventing readers\u003cbr\\/\u003e\\n    from refreshing during optimize() thus tying up lots of disk\u003cbr\\/\u003e\\n    space, enabling a write session to be transactional (all or\u003cbr\\/\u003e\\n    none), etc.\u003c\\/p\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eSecond, change how IndexFileDeleter works: have it keep track of\u003cbr\\/\u003e\\n    which commits are still live and which one is pending (as the\u003cbr\\/\u003e\\n    SegmentInfos in IndexWriter, not yet written to disk).\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003e    Allow IndexFileDeleter to be subclassed to implement different\u003cbr\\/\u003e\\n    \\\"deletion policies\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003e    The base IndexFileDeleter class will use ref counts to figure out\u003cbr\\/\u003e\\n    which individual index files are still referenced by one or more\u003cbr\\/\u003e\\n    \\\"segments_N\\\" commits or by the uncommitted \\\"in-memory\\\"\u003cbr\\/\u003e\\n    SegmentInfos.  Then the policy is invoked on commit (and also on\u003cbr\\/\u003e\\n    init) and can choose which commits (if any) to now remove.\u003c\\/p\u003e\\n\\n\u003cp\u003e    Add constructors to IndexWriter allowing you to pass in your own\u003cbr\\/\u003e\\n    deleter. The default policy would still be \\\"delete all past\u003cbr\\/\u003e\\n    commits as soon as a new commit is written\\\" (this is how deleting\u003cbr\\/\u003e\\n    happens today).\u003c\\/p\u003e\\n\\n\u003cp\u003e    For NFS we can then try different policies as discussed on those\u003cbr\\/\u003e\\n    threads above (there were at least 4 proposals).  They all have\u003cbr\\/\u003e\\n    different tradeoffs.  I would open separate issues for these\u003cbr\\/\u003e\\n    policies after this issue is resolved.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466073_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466073_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 15:09\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T15:09:01+0000\'\u003e19\\/Jan\\/07 15:09\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    There has been some great design discussions \\/ iterations recently \\non how to approach this: \\n\\n      http:\\/\\/www.gossamer-threads.com\\/lists\\/lucene\\/java-dev\\/44162  \\n\\n      http:\\/\\/www.gossamer-threads.com\\/lists\\/lucene\\/java-dev\\/44236  \\n\\n\\n I think we\'ve iterated to a good approach now.  Here\'s the summary: \\n\\n \\n\\t First, add an option to IndexWriter to \\\"commit (write segments_N) \\n    only on close\\\" vs writing a segments_N every time there is a \\n    flush, merge, etc., during a single IndexWriter session. \\n \\n\\n\\n     This means a reader won\'t see anything a writer has been doing \\n    until it\'s closed. \\n\\n     We would still have an \\\"autoCommit\\\" true\\/false (default true) to \\n    keep backwards compatibility.  If true, the IndexWriter writes a \\n    new segments_N every time it flushes, merges segments, etc.; else \\n    it only writes one on close. \\n\\n     We would add an \\\"abort()\\\" to IndexWriter to not commit, clean up \\n    any temp files created, and rollback. \\n\\n     \\\"Commit on close\\\" will also address \\/ enable fixes for other \\n    issues like prevent readers from refreshing half way through \\n    something like \\\"bulk delete then bulk add\\\", preventing readers \\n    from refreshing during optimize() thus tying up lots of disk \\n    space, enabling a write session to be transactional (all or \\n    none), etc. \\n\\n\\n \\n\\t Second, change how IndexFileDeleter works: have it keep track of \\n    which commits are still live and which one is pending (as the \\n    SegmentInfos in IndexWriter, not yet written to disk). \\n \\n\\n\\n     Allow IndexFileDeleter to be subclassed to implement different \\n    \\\"deletion policies\\\". \\n\\n     The base IndexFileDeleter class will use ref counts to figure out \\n    which individual index files are still referenced by one or more \\n    \\\"segments_N\\\" commits or by the uncommitted \\\"in-memory\\\" \\n    SegmentInfos.  Then the policy is invoked on commit (and also on \\n    init) and can choose which commits (if any) to now remove. \\n\\n     Add constructors to IndexWriter allowing you to pass in your own \\n    deleter. The default policy would still be \\\"delete all past \\n    commits as soon as a new commit is written\\\" (this is how deleting \\n    happens today). \\n\\n     For NFS we can then try different policies as discussed on those \\n    threads above (there were at least 4 proposals).  They all have \\n    different tradeoffs.  I would open separate issues for these \\n    policies after this issue is resolved.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466117\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466117&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466117\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12466117_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466117_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 18:25\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T18:25:43+0000\'\u003e19\\/Jan\\/07 18:25\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e(This is a continuation of the discussion from one of the threads quoted in the previous comment, with some summations to provide context.)\u003c\\/p\u003e\\n\\n\u003cp\u003eReferring to a proposal to implement advisory locking where possible, and prevent index creation on volumes\\/systems where the delete mechanism fails, Michael McCandless wrote:\u003c\\/p\u003e\\n\\n\u003cp\u003eBut what I don\'t like about it is it doesn\'t \\\"gracefully degrade\\\" to\u003cbr\\/\u003e\\nthe common NFS case where locking does not work.  And, this is often\u003cbr\\/\u003e\\noutside our user\'s control. \u003c\\/p\u003e\\n\\n\u003cp\u003eThe stratagem of publicly exposing IndexFileDeleter does not \\\"degrade gracefully\\\", either.  \u003c\\/p\u003e\\n\\n\u003cp\u003eIf today\'s default deletions policy remains the default, then when an index is put on an NFS system, at some point search-time exceptions will occur after an update to an index.  The user has to 1) detect this scenario without Lucene\'s help, probably from logs or user complaints 2) diagnose it without the aid of a meaningful error message, and 3) either implement their own IndexFileDeleter or choose an appropriate provided subclass, a task which will require that they grok both the innards of Lucene and the subtleties of NFS.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe first step to graceful degradation is a meaningful error message.  That means detecting a problem which normally requires both a indexing process and a search process to trigger, so we have to simulate it artificially with a test.\u003c\\/p\u003e\\n\\n\u003cp\u003e   1) Open a file for read\\/write and write a few bytes to it.\u003cbr\\/\u003e\\n   2) Delete the test file (without closing the handle).\u003cbr\\/\u003e\\n   3) Try to read from the handle and if a \\\"stale NFS filehandle\\\" \u003cbr\\/\u003e\\n      exception is caught, throw something more informative.\u003c\\/p\u003e\\n\\n\u003cp\u003eOur first opportunity to perform this test occurs at index-creation time.  This is essentially cost free.\u003c\\/p\u003e\\n\\n\u003cp\u003eA second opportunity arises whenever deletions are performed.  Here, there\'s a small cost involved, and it may not be worth it, as this would only catch cases where an index was copied onto an NFS volume rather than created there, then subsequently modified.\u003c\\/p\u003e\\n\\n\u003cp\u003eThere\'s also another stratagem available to us: we can have IndexReaders establish advisory read locks against their relevant segments_N files on systems which support such locks.  This won\'t help us to \\\"degrade gracefully\\\".  However, it will help us degrade less often, as modern versions of NFS support file locking - but still do NOT support the \\\"delete-on-last-close\\\" mechanism Lucene depends on.\u003c\\/p\u003e\\n\\n\u003cp\u003eImplementing advisory read locks is orthogonal to the addition of IndexFileDeleter, but diminishes the justification for adding it as a public API.\u003c\\/p\u003e\\n\\n\u003cp\u003eBut the good news is since we will allow subclassing to make your own\u003cbr\\/\u003e\\ndeletion policy, we can eventually do both of these approaches and our\u003cbr\\/\u003e\\nusers can pick one or do their own.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe number of users this class will serve is diminishingly small.    Other mitigation strategies are available.    \u003c\\/p\u003e\\n\\n\u003cp\u003e1) If we implement advisory read locks, many people who see this error will no longer see it.  For those who do, the best option is to upgrade the OS to a version which supports advisory locks over NFS.  Then an index on an NFS volume will behave as any other.\u003cbr\\/\u003e\\n2) If you don\'t actually need to put the index on an NFS volume, put it somewhere else.\u003cbr\\/\u003e\\n3) Catch stale NFS filehandle exceptions in your search application and refresh the reader when they occur.\u003cbr\\/\u003e\\n4) Maintain two copies of an index and do an rsync\\/switch.\u003cbr\\/\u003e\\n5) Hack Lucene.\u003c\\/p\u003e\\n\\n\u003cp\u003eFlexibility is not free.  There have been recent lamentations on java-dev about how difficult it will be to merge the write interfaces of IndexReader and IndexWriter to provide a single, unified class through which all index modifications can be performed.  The exposure of the IndexFileDeleter mechanism contributes to this problem &#8211; it\'s one more small step in the wrong direction.  \u003c\\/p\u003e\\n\\n\u003cp\u003eProviding a subclassing\\/callback API is often an elegant strategy, and it is surely better in this case than it would be to provide a list of deletion policies for the user to select from.  However, whenever possible, \u003cem\u003eno\u003c\\/em\u003e API is always a better solution &#8211; especially in a case like this one, where the functionality provided has nothing to do with Lucene\'s core mission and is there solely to work around an implmentation-specific bug.  \u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12466117_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466117_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 18:25\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T18:25:43+0000\'\u003e19\\/Jan\\/07 18:25\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    (This is a continuation of the discussion from one of the threads quoted in the previous comment, with some summations to provide context.) \\n\\n Referring to a proposal to implement advisory locking where possible, and prevent index creation on volumes\\/systems where the delete mechanism fails, Michael McCandless wrote: \\n\\n But what I don\'t like about it is it doesn\'t \\\"gracefully degrade\\\" to \\nthe common NFS case where locking does not work.  And, this is often \\noutside our user\'s control.  \\n\\n The stratagem of publicly exposing IndexFileDeleter does not \\\"degrade gracefully\\\", either.   \\n\\n If today\'s default deletions policy remains the default, then when an index is put on an NFS system, at some point search-time exceptions will occur after an update to an index.  The user has to 1) detect this scenario without Lucene\'s help, probably from logs or user complaints 2) diagnose it without the aid of a meaningful error message, and 3) either implement their own IndexFileDeleter or choose an appropriate provided subclass, a task which will require that they grok both the innards of Lucene and the subtleties of NFS. \\n\\n The first step to graceful degradation is a meaningful error message.  That means detecting a problem which normally requires both a indexing process and a search process to trigger, so we have to simulate it artificially with a test. \\n\\n    1) Open a file for read\\/write and write a few bytes to it. \\n   2) Delete the test file (without closing the handle). \\n   3) Try to read from the handle and if a \\\"stale NFS filehandle\\\"  \\n      exception is caught, throw something more informative. \\n\\n Our first opportunity to perform this test occurs at index-creation time.  This is essentially cost free. \\n\\n A second opportunity arises whenever deletions are performed.  Here, there\'s a small cost involved, and it may not be worth it, as this would only catch cases where an index was copied onto an NFS volume rather than created there, then subsequently modified. \\n\\n There\'s also another stratagem available to us: we can have IndexReaders establish advisory read locks against their relevant segments_N files on systems which support such locks.  This won\'t help us to \\\"degrade gracefully\\\".  However, it will help us degrade less often, as modern versions of NFS support file locking - but still do NOT support the \\\"delete-on-last-close\\\" mechanism Lucene depends on. \\n\\n Implementing advisory read locks is orthogonal to the addition of IndexFileDeleter, but diminishes the justification for adding it as a public API. \\n\\n But the good news is since we will allow subclassing to make your own \\ndeletion policy, we can eventually do both of these approaches and our \\nusers can pick one or do their own. \\n\\n The number of users this class will serve is diminishingly small.    Other mitigation strategies are available.     \\n\\n 1) If we implement advisory read locks, many people who see this error will no longer see it.  For those who do, the best option is to upgrade the OS to a version which supports advisory locks over NFS.  Then an index on an NFS volume will behave as any other. \\n2) If you don\'t actually need to put the index on an NFS volume, put it somewhere else. \\n3) Catch stale NFS filehandle exceptions in your search application and refresh the reader when they occur. \\n4) Maintain two copies of an index and do an rsync\\/switch. \\n5) Hack Lucene. \\n\\n Flexibility is not free.  There have been recent lamentations on java-dev about how difficult it will be to merge the write interfaces of IndexReader and IndexWriter to provide a single, unified class through which all index modifications can be performed.  The exposure of the IndexFileDeleter mechanism contributes to this problem &#8211; it\'s one more small step in the wrong direction.   \\n\\n Providing a subclassing\\/callback API is often an elegant strategy, and it is surely better in this case than it would be to provide a list of deletion policies for the user to select from.  However, whenever possible,  no  API is always a better solution &#8211; especially in a case like this one, where the functionality provided has nothing to do with Lucene\'s core mission and is there solely to work around an implmentation-specific bug.                \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466122\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466122&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466122\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12466122_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466122_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 18:33\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T18:33:27+0000\'\u003e19\\/Jan\\/07 18:33\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eThere are two sections in the previous comment that are supposed to be quoted, but which are not because JIRA ate the email-style \\\"greater than\\\" quoting.  They are:\u003c\\/p\u003e\\n\\n\u003cp\u003e  \\\"But what I don\'t like about it is it doesn\'t \\\"gracefully degrade\\\" to\u003cbr\\/\u003e\\n   the common NFS case where locking does not work. And, this is often\u003cbr\\/\u003e\\n   outside our user\'s control.\\\"\u003c\\/p\u003e\\n\\n\u003cp\u003e \\\"But the good news is since we will allow subclassing to make your own\u003cbr\\/\u003e\\n  deletion policy, we can eventually do both of these approaches and our\u003cbr\\/\u003e\\n  users can pick one or do their own.\\\"\u003c\\/p\u003e\\n\\n\u003cp\u003eI wish  it were possible to edit that note, as it\'s really confusing as things stand.  \u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/sad.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e  A preview mechanism would have been handy.\u003c\\/p\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12466122_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466122_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 18:33\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T18:33:27+0000\'\u003e19\\/Jan\\/07 18:33\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    There are two sections in the previous comment that are supposed to be quoted, but which are not because JIRA ate the email-style \\\"greater than\\\" quoting.  They are: \\n\\n   \\\"But what I don\'t like about it is it doesn\'t \\\"gracefully degrade\\\" to \\n   the common NFS case where locking does not work. And, this is often \\n   outside our user\'s control.\\\" \\n\\n  \\\"But the good news is since we will allow subclassing to make your own \\n  deletion policy, we can eventually do both of these approaches and our \\n  users can pick one or do their own.\\\" \\n\\n I wish  it were possible to edit that note, as it\'s really confusing as things stand.     A preview mechanism would have been handy. \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466126\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466126&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466126\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12466126_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466126_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 18:55\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T18:55:21+0000\'\u003e19\\/Jan\\/07 18:55\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt;   * Second, change how IndexFileDeleter works: have it keep track of\u003cbr\\/\u003e\\n&gt;     which commits are still live and which one is pending (as the\u003cbr\\/\u003e\\n&gt;     SegmentInfos in IndexWriter, not yet written to disk).\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt;     Allow IndexFileDeleter to be subclassed to implement different\u003cbr\\/\u003e\\n&gt;     \\\"deletion policies\\\".\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt;     The base IndexFileDeleter class will use ref counts to figure out\u003cbr\\/\u003e\\n&gt;     which individual index files are still referenced by one or more\u003cbr\\/\u003e\\n&gt;     \\\"segments_N\\\" commits or by the uncommitted \\\"in-memory\\\"\u003cbr\\/\u003e\\n&gt;     SegmentInfos.  Then the policy is invoked on commit (and also on\u003cbr\\/\u003e\\n&gt;     init) and can choose which commits (if any) to now remove.\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt;     Add constructors to IndexWriter allowing you to pass in your own\u003cbr\\/\u003e\\n&gt;     deleter. The default policy would still be \\\"delete all past\u003cbr\\/\u003e\\n&gt;     commits as soon as a new commit is written\\\" (this is how deleting\u003cbr\\/\u003e\\n&gt;     happens today).\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt;     For NFS we can then try different policies as discussed on those\u003cbr\\/\u003e\\n&gt;     threads above (there were at least 4 proposals).  They all have\u003cbr\\/\u003e\\n&gt;     different tradeoffs.  I would open separate issues for these\u003cbr\\/\u003e\\n&gt;     policies after this issue is resolved.\u003cbr\\/\u003e\\n&gt; \u003c\\/p\u003e\\n\\n\u003cp\u003eThis ties solving the NFS issue with an extendable-file-deletion policy.\u003cbr\\/\u003e\\nI am wondering is this the right way, or, perhaps, should the reference \u003cbr\\/\u003e\\ncounting be considered alone, apart from the deletion policy.\u003cbr\\/\u003e\\n(Would modifying IndexFileDeleter to base on ref-count make it simpler\u003cbr\\/\u003e\\nor harder to maintain?)\u003c\\/p\u003e\\n\\n\u003cp\u003eAlso, IndexFileDeleter is doing delicate work - not sure you want \u003cbr\\/\u003e\\napplications to mess with it. Better let applications control some\u003cbr\\/\u003e\\nsimple well defined behavior, maybe the same way that a sorter \u003cbr\\/\u003e\\nallows applications to provide a comparator, but keeps the sorting \u003cbr\\/\u003e\\nalgorithm for itself.\u003c\\/p\u003e\\n\\n\u003cp\u003eBack to reference counting,- how about the following approach:\u003c\\/p\u003e\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eAdd to Directory a FileReferenceCounter data member, get()\\/set() etc.\u003c\\/li\u003e\\n\\t\u003cli\u003eAdd a class FileReferenceCounter with simple general methods:\u003cbr\\/\u003e\\n  void increment (String name)\u003cbr\\/\u003e\\n  void decrement (String name)\u003cbr\\/\u003e\\n  int getRefCount (String name)\u003c\\/li\u003e\\n\\t\u003cli\u003eDefault implementation would do nothing, i.e. would not record\u003cbr\\/\u003e\\n  references, and always return 0.\u003c\\/li\u003e\\n\\t\u003cli\u003eIndexReader, upon opening a segment, would call increment(segName)\u003c\\/li\u003e\\n\\t\u003cli\u003eIndexReader, upon closing a segment, would call decrement(segName)\u003c\\/li\u003e\\n\\t\u003cli\u003eIndexFileDeleter, before removing a file belonging to a certain segment,\u003cbr\\/\u003e\\n  would verify getRefCount(segName)==0.\u003c\\/li\u003e\\n\\t\u003cli\u003eNotice that the FilereferenceCounter is available from the Directory,\u003cbr\\/\u003e\\n  so no constructors should be added to IndexWriter\\/Reader.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eSo, this is adding to Directory a general file utility, no knowledge of \u003cbr\\/\u003e\\nindex structure required in Directory. Also, IndexFileDeleter can remain \u003cbr\\/\u003e\\nas today, and at some later point can be made more powerful with various \u003cbr\\/\u003e\\ndeletion policies - but those policies remain unrelated to the NFS \u003cbr\\/\u003e\\nissue - they can focus on point-in-time issues, where I think it \u003cbr\\/\u003e\\nstemmed from. \u003c\\/p\u003e\\n\\n\u003cp\u003eAn NFS geared FileReferenceCounter would then be able to keep alive \u003cbr\\/\u003e\\n\\\"counter files\\\", name those files based on counted fileName plus\u003cbr\\/\u003e\\nprocessID plus machID, base getRefCount on safety window since file \u003cbr\\/\u003e\\nwas last touched, etc. All this is left out from point-in-time \u003cbr\\/\u003e\\npolicies (how many\\/time points-in-time should be retained).\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12466126_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466126_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 18:55\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T18:55:21+0000\'\u003e19\\/Jan\\/07 18:55\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt;   * Second, change how IndexFileDeleter works: have it keep track of \\n&gt;     which commits are still live and which one is pending (as the \\n&gt;     SegmentInfos in IndexWriter, not yet written to disk). \\n&gt;  \\n&gt;     Allow IndexFileDeleter to be subclassed to implement different \\n&gt;     \\\"deletion policies\\\". \\n&gt;  \\n&gt;     The base IndexFileDeleter class will use ref counts to figure out \\n&gt;     which individual index files are still referenced by one or more \\n&gt;     \\\"segments_N\\\" commits or by the uncommitted \\\"in-memory\\\" \\n&gt;     SegmentInfos.  Then the policy is invoked on commit (and also on \\n&gt;     init) and can choose which commits (if any) to now remove. \\n&gt;  \\n&gt;     Add constructors to IndexWriter allowing you to pass in your own \\n&gt;     deleter. The default policy would still be \\\"delete all past \\n&gt;     commits as soon as a new commit is written\\\" (this is how deleting \\n&gt;     happens today). \\n&gt;  \\n&gt;     For NFS we can then try different policies as discussed on those \\n&gt;     threads above (there were at least 4 proposals).  They all have \\n&gt;     different tradeoffs.  I would open separate issues for these \\n&gt;     policies after this issue is resolved. \\n&gt;  \\n\\n This ties solving the NFS issue with an extendable-file-deletion policy. \\nI am wondering is this the right way, or, perhaps, should the reference  \\ncounting be considered alone, apart from the deletion policy. \\n(Would modifying IndexFileDeleter to base on ref-count make it simpler \\nor harder to maintain?) \\n\\n Also, IndexFileDeleter is doing delicate work - not sure you want  \\napplications to mess with it. Better let applications control some \\nsimple well defined behavior, maybe the same way that a sorter  \\nallows applications to provide a comparator, but keeps the sorting  \\nalgorithm for itself. \\n\\n Back to reference counting,- how about the following approach: \\n \\n\\t Add to Directory a FileReferenceCounter data member, get()\\/set() etc. \\n\\t Add a class FileReferenceCounter with simple general methods: \\n  void increment (String name) \\n  void decrement (String name) \\n  int getRefCount (String name) \\n\\t Default implementation would do nothing, i.e. would not record \\n  references, and always return 0. \\n\\t IndexReader, upon opening a segment, would call increment(segName) \\n\\t IndexReader, upon closing a segment, would call decrement(segName) \\n\\t IndexFileDeleter, before removing a file belonging to a certain segment, \\n  would verify getRefCount(segName)==0. \\n\\t Notice that the FilereferenceCounter is available from the Directory, \\n  so no constructors should be added to IndexWriter\\/Reader. \\n \\n\\n\\n So, this is adding to Directory a general file utility, no knowledge of  \\nindex structure required in Directory. Also, IndexFileDeleter can remain  \\nas today, and at some later point can be made more powerful with various  \\ndeletion policies - but those policies remain unrelated to the NFS  \\nissue - they can focus on point-in-time issues, where I think it  \\nstemmed from.  \\n\\n An NFS geared FileReferenceCounter would then be able to keep alive  \\n\\\"counter files\\\", name those files based on counted fileName plus \\nprocessID plus machID, base getRefCount on safety window since file  \\nwas last touched, etc. All this is left out from point-in-time  \\npolicies (how many\\/time points-in-time should be retained).              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466164\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466164&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466164\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466164_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466164_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 22:03\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T22:03:30+0000\'\u003e19\\/Jan\\/07 22:03\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eOK, a few top level summary comments and then some specifics below:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eI don\'t want to modify the Lucene core (adding advisory read\u003cbr\\/\u003e\\n     locks, etc) just to handle the NFS case.  That risks hurting the\u003cbr\\/\u003e\\n     non-NFS cases.  \\\"First do no harm.\\\"  \\\"Keep it simple.\\\"  We\'ve been\u003cbr\\/\u003e\\n     working hard to remove locking lately (lockless commits) and I\u003cbr\\/\u003e\\n     rather not add more locking back.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003e     By implementing each approach (I think there are now 5 different\u003cbr\\/\u003e\\n     ideas now) instead as its own deletion policy (subclass of\u003cbr\\/\u003e\\n     IndexFileDeleter) we contain the added complexity of locking,\u003cbr\\/\u003e\\n     file-based ref counts, etc, to just that one subclass of\u003cbr\\/\u003e\\n     IndexFileDeleter.\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eI think NFS support is part of Lucene\'s core mission.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003e     Lucene should try hard to be as portable as possible.\u003c\\/p\u003e\\n\\n\u003cp\u003e     NFS is used \u003cb\u003ealot\u003c\\/b\u003e.\u003c\\/p\u003e\\n\\n\u003cp\u003e     It\'s tempting to tell users to \\\"upgrade OS\\\", \\\"upgrade NFS server\u003cbr\\/\u003e\\n     and\\/or client\\\", etc, but taking that approach will only hurt our\u003cbr\\/\u003e\\n     users because typically this is not something they can control.\u003c\\/p\u003e\\n\\n\u003cp\u003e     Now, if we had to bend over backwards for NFS, then I would agree\u003cbr\\/\u003e\\n     it\'s not worth it.  But, we don\'t have to: by allowing custom\u003cbr\\/\u003e\\n     deletion policies (which is a minor change) we can try out all of\u003cbr\\/\u003e\\n     the approaches suggested so far on this thread.\u003c\\/p\u003e\\n\\n\u003cp\u003e     Rather than baking any one of these approaches into the Lucene\u003cbr\\/\u003e\\n     core, I\'d rather just enable \\\"custom deletion policies\\\" then\u003cbr\\/\u003e\\n     people can build out these polices outside of the core (eg in\u003cbr\\/\u003e\\n     \\\"contrib\\\" first).\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eI agree that \\\"giving a good error message when index is on NFS\\\" is\u003cbr\\/\u003e\\n     really important and that custom deletion policy alone doesn\'t\u003cbr\\/\u003e\\n     address this.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003e     Marvin I don\'t think your test will work either (see below).\u003c\\/p\u003e\\n\\n\u003cp\u003e     But I really like this direction: does anyone know how (Java\u003cbr\\/\u003e\\n     friendly way) to determine that a given directory is on an NFS\u003cbr\\/\u003e\\n     mount?  That would be wonderful.  I will spin off a new thread\u003cbr\\/\u003e\\n     here.\u003c\\/p\u003e\\n\\n\\n\u003cp\u003eSome specifics below:\u003c\\/p\u003e\\n\\n\u003cp\u003eMarvin Humphrey wrote:\u003c\\/p\u003e\\n\\n\u003cp\u003e &gt; The first step to graceful degradation is a meaningful error message. \u003cbr\\/\u003e\\n  That means detecting a problem which normally requires both a indexing \u003cbr\\/\u003e\\nprocess and a search process to trigger, so we have to simulate it \u003cbr\\/\u003e\\nartificially with a test.\u003cbr\\/\u003e\\n &gt;\u003cbr\\/\u003e\\n &gt;    1) Open a file for read\\/write and write a few bytes to it.\u003cbr\\/\u003e\\n &gt;    2) Delete the test file (without closing the handle).\u003cbr\\/\u003e\\n &gt;    3) Try to read from the handle and if a \\\"stale NFS filehandle\\\"\u003cbr\\/\u003e\\n &gt;       exception is caught, throw something more informative.\u003cbr\\/\u003e\\n &gt;\u003cbr\\/\u003e\\n &gt; Our first opportunity to perform this test occurs at index-creation \u003cbr\\/\u003e\\ntime.  This is essentially cost free.\u003cbr\\/\u003e\\n &gt;\u003cbr\\/\u003e\\n &gt; A second opportunity arises whenever deletions are performed.  Here, \u003cbr\\/\u003e\\nthere\'s a small cost involved, and it may not be worth it, as this would \u003cbr\\/\u003e\\nonly catch cases where an index was copied onto an NFS volume rather \u003cbr\\/\u003e\\nthan created there, then subsequently modified.\u003c\\/p\u003e\\n\\n\u003cp\u003eI think this test won\'t work (though I haven\'t tested...).  Typically\u003cbr\\/\u003e\\nan NFS client will catch this case and locally emulate \\\"delete on last\u003cbr\\/\u003e\\nclose\\\".  Worse, even if it doesn\'t, those bytes would likely be cached\u003cbr\\/\u003e\\nand then would fail to hit \\\"stale NFS filehandle\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003e &gt; But the good news is since we will allow subclassing to make your own\u003cbr\\/\u003e\\n &gt; deletion policy, we can eventually do both of these approaches and our\u003cbr\\/\u003e\\n &gt; users can pick one or do their own.\u003cbr\\/\u003e\\n &gt;\u003cbr\\/\u003e\\n &gt; The number of users this class will serve is diminishingly small. \u003cbr\\/\u003e\\nOther mitigation strategies are available.\u003cbr\\/\u003e\\n &gt;\u003cbr\\/\u003e\\n &gt; 1) If we implement advisory read locks, many people who see this \u003cbr\\/\u003e\\nerror will no longer see it.  For those who do, the best option is to \u003cbr\\/\u003e\\nupgrade the OS to a version which supports advisory locks over NFS. \u003cbr\\/\u003e\\nThen an index on an NFS volume will behave as any other.\u003cbr\\/\u003e\\n &gt; 2) If you don\'t actually need to put the index on an NFS volume, put \u003cbr\\/\u003e\\nit somewhere else.\u003cbr\\/\u003e\\n &gt; 3) Catch stale NFS filehandle exceptions in your search application \u003cbr\\/\u003e\\nand refresh the reader when they occur.\u003cbr\\/\u003e\\n &gt; 4) Maintain two copies of an index and do an rsync\\/switch.\u003cbr\\/\u003e\\n &gt; 5) Hack Lucene.\u003c\\/p\u003e\\n\\n\u003cp\u003e5) isn\'t really a good option since we all can\'t even agree how to\u003cbr\\/\u003e\\n\\\"hack Lucene\\\" to make this work!  1) I think is too dangerous as part\u003cbr\\/\u003e\\nof the core.  2) typically this is not an option.  People choose NFS\u003cbr\\/\u003e\\nbecause they want to share the index.  4) is a fair amount of added\u003cbr\\/\u003e\\ncomplexity.  3) is the most viable option I see here, but it\'s not\u003cbr\\/\u003e\\ngreat because you\'re forced to refresh \\\"right now\\\".  What if warming\u003cbr\\/\u003e\\ntakes 8 minutes?  What if \\\"now\\\" is a bad time because deletes were\u003cbr\\/\u003e\\ndone by the writer but not yet adds?\u003c\\/p\u003e\\n\\n\u003cp\u003e &gt; Flexibility is not free.  There have been recent lamentations on \u003cbr\\/\u003e\\njava-dev about how difficult it will be to merge the write interfaces of \u003cbr\\/\u003e\\nIndexReader and IndexWriter to provide a single, unified class through \u003cbr\\/\u003e\\nwhich all index modifications can be performed.  The exposure of the \u003cbr\\/\u003e\\nIndexFileDeleter mechanism contributes to this problem &#8211; it\'s one more \u003cbr\\/\u003e\\nsmall step in the wrong direction.\u003c\\/p\u003e\\n\\n\u003cp\u003eYes there is an open question now on what to do about the confusion on\u003cbr\\/\u003e\\nusing IndexReader vs IndexWriter.  I think moving towards \\\"use\u003cbr\\/\u003e\\nIndexWriter for changes, use IndexReader for reading\\\" is the best\u003cbr\\/\u003e\\nsolution here.  But I don\'t see how this relates to allowing\u003cbr\\/\u003e\\nsubclassing of IndexFileDeleter to make your own deletion policy.\u003c\\/p\u003e\\n\\n\u003cp\u003e &gt; Providing a subclassing\\/callback API is often an elegant strategy, \u003cbr\\/\u003e\\nand it is surely better in this case than it would be to provide a list \u003cbr\\/\u003e\\nof deletion policies for the user to select from.  However, whenever \u003cbr\\/\u003e\\npossible, \u003cem\u003eno\u003c\\/em\u003e API is always a better solution &#8211; especially in a case \u003cbr\\/\u003e\\nlike this one, where the functionality provided has nothing to do with \u003cbr\\/\u003e\\nLucene\'s core mission and is there solely to work around an \u003cbr\\/\u003e\\nimplmentation-specific bug.\u003c\\/p\u003e\\n\\n\u003cp\u003eI disagree on this point (\\\"no\\\" API is better than subclassing).  As\u003cbr\\/\u003e\\nyou\'ve said, this issue won\'t affect that many people (though I think\u003cbr\\/\u003e\\nit\'s a fairly large subset of our users).  Given that, I would not\u003cbr\\/\u003e\\nwant to add file locking &amp; additional complexity into the Lucene core,\u003cbr\\/\u003e\\njust to handle NFS.\u003c\\/p\u003e\\n\\n\u003cp\u003eBy allowing a different delete policy as a subclass of\u003cbr\\/\u003e\\nIndexFileDeleter we keep the changes required for supporting NFS way\u003cbr\\/\u003e\\noutside the Lucene core.  Since there\'s so much debate about which\u003cbr\\/\u003e\\ndeletion policy is best we should create all of these in contrib to\u003cbr\\/\u003e\\nbegin with and if something proves reliable we can eventually promote\u003cbr\\/\u003e\\nit into core Lucene.\u003c\\/p\u003e\\n\\n\u003cp\u003eI think subclassing is perfect for this sort of situation.  It\'s like\u003cbr\\/\u003e\\nthe various LockFactory implementations we have: there is no \\\"one size\u003cbr\\/\u003e\\nfits all\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003eMike\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466164_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466164_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 22:03\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T22:03:30+0000\'\u003e19\\/Jan\\/07 22:03\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    OK, a few top level summary comments and then some specifics below: \\n\\n \\n\\t I don\'t want to modify the Lucene core (adding advisory read \\n     locks, etc) just to handle the NFS case.  That risks hurting the \\n     non-NFS cases.  \\\"First do no harm.\\\"  \\\"Keep it simple.\\\"  We\'ve been \\n     working hard to remove locking lately (lockless commits) and I \\n     rather not add more locking back. \\n \\n\\n\\n      By implementing each approach (I think there are now 5 different \\n     ideas now) instead as its own deletion policy (subclass of \\n     IndexFileDeleter) we contain the added complexity of locking, \\n     file-based ref counts, etc, to just that one subclass of \\n     IndexFileDeleter. \\n\\n \\n\\t I think NFS support is part of Lucene\'s core mission. \\n \\n\\n\\n      Lucene should try hard to be as portable as possible. \\n\\n      NFS is used  alot . \\n\\n      It\'s tempting to tell users to \\\"upgrade OS\\\", \\\"upgrade NFS server \\n     and\\/or client\\\", etc, but taking that approach will only hurt our \\n     users because typically this is not something they can control. \\n\\n      Now, if we had to bend over backwards for NFS, then I would agree \\n     it\'s not worth it.  But, we don\'t have to: by allowing custom \\n     deletion policies (which is a minor change) we can try out all of \\n     the approaches suggested so far on this thread. \\n\\n      Rather than baking any one of these approaches into the Lucene \\n     core, I\'d rather just enable \\\"custom deletion policies\\\" then \\n     people can build out these polices outside of the core (eg in \\n     \\\"contrib\\\" first). \\n\\n \\n\\t I agree that \\\"giving a good error message when index is on NFS\\\" is \\n     really important and that custom deletion policy alone doesn\'t \\n     address this. \\n \\n\\n\\n      Marvin I don\'t think your test will work either (see below). \\n\\n      But I really like this direction: does anyone know how (Java \\n     friendly way) to determine that a given directory is on an NFS \\n     mount?  That would be wonderful.  I will spin off a new thread \\n     here. \\n\\n\\n Some specifics below: \\n\\n Marvin Humphrey wrote: \\n\\n  &gt; The first step to graceful degradation is a meaningful error message.  \\n  That means detecting a problem which normally requires both a indexing  \\nprocess and a search process to trigger, so we have to simulate it  \\nartificially with a test. \\n &gt; \\n &gt;    1) Open a file for read\\/write and write a few bytes to it. \\n &gt;    2) Delete the test file (without closing the handle). \\n &gt;    3) Try to read from the handle and if a \\\"stale NFS filehandle\\\" \\n &gt;       exception is caught, throw something more informative. \\n &gt; \\n &gt; Our first opportunity to perform this test occurs at index-creation  \\ntime.  This is essentially cost free. \\n &gt; \\n &gt; A second opportunity arises whenever deletions are performed.  Here,  \\nthere\'s a small cost involved, and it may not be worth it, as this would  \\nonly catch cases where an index was copied onto an NFS volume rather  \\nthan created there, then subsequently modified. \\n\\n I think this test won\'t work (though I haven\'t tested...).  Typically \\nan NFS client will catch this case and locally emulate \\\"delete on last \\nclose\\\".  Worse, even if it doesn\'t, those bytes would likely be cached \\nand then would fail to hit \\\"stale NFS filehandle\\\". \\n\\n  &gt; But the good news is since we will allow subclassing to make your own \\n &gt; deletion policy, we can eventually do both of these approaches and our \\n &gt; users can pick one or do their own. \\n &gt; \\n &gt; The number of users this class will serve is diminishingly small.  \\nOther mitigation strategies are available. \\n &gt; \\n &gt; 1) If we implement advisory read locks, many people who see this  \\nerror will no longer see it.  For those who do, the best option is to  \\nupgrade the OS to a version which supports advisory locks over NFS.  \\nThen an index on an NFS volume will behave as any other. \\n &gt; 2) If you don\'t actually need to put the index on an NFS volume, put  \\nit somewhere else. \\n &gt; 3) Catch stale NFS filehandle exceptions in your search application  \\nand refresh the reader when they occur. \\n &gt; 4) Maintain two copies of an index and do an rsync\\/switch. \\n &gt; 5) Hack Lucene. \\n\\n 5) isn\'t really a good option since we all can\'t even agree how to \\n\\\"hack Lucene\\\" to make this work!  1) I think is too dangerous as part \\nof the core.  2) typically this is not an option.  People choose NFS \\nbecause they want to share the index.  4) is a fair amount of added \\ncomplexity.  3) is the most viable option I see here, but it\'s not \\ngreat because you\'re forced to refresh \\\"right now\\\".  What if warming \\ntakes 8 minutes?  What if \\\"now\\\" is a bad time because deletes were \\ndone by the writer but not yet adds? \\n\\n  &gt; Flexibility is not free.  There have been recent lamentations on  \\njava-dev about how difficult it will be to merge the write interfaces of  \\nIndexReader and IndexWriter to provide a single, unified class through  \\nwhich all index modifications can be performed.  The exposure of the  \\nIndexFileDeleter mechanism contributes to this problem &#8211; it\'s one more  \\nsmall step in the wrong direction. \\n\\n Yes there is an open question now on what to do about the confusion on \\nusing IndexReader vs IndexWriter.  I think moving towards \\\"use \\nIndexWriter for changes, use IndexReader for reading\\\" is the best \\nsolution here.  But I don\'t see how this relates to allowing \\nsubclassing of IndexFileDeleter to make your own deletion policy. \\n\\n  &gt; Providing a subclassing\\/callback API is often an elegant strategy,  \\nand it is surely better in this case than it would be to provide a list  \\nof deletion policies for the user to select from.  However, whenever  \\npossible,  no  API is always a better solution &#8211; especially in a case  \\nlike this one, where the functionality provided has nothing to do with  \\nLucene\'s core mission and is there solely to work around an  \\nimplmentation-specific bug. \\n\\n I disagree on this point (\\\"no\\\" API is better than subclassing).  As \\nyou\'ve said, this issue won\'t affect that many people (though I think \\nit\'s a fairly large subset of our users).  Given that, I would not \\nwant to add file locking &amp; additional complexity into the Lucene core, \\njust to handle NFS. \\n\\n By allowing a different delete policy as a subclass of \\nIndexFileDeleter we keep the changes required for supporting NFS way \\noutside the Lucene core.  Since there\'s so much debate about which \\ndeletion policy is best we should create all of these in contrib to \\nbegin with and if something proves reliable we can eventually promote \\nit into core Lucene. \\n\\n I think subclassing is perfect for this sort of situation.  It\'s like \\nthe various LockFactory implementations we have: there is no \\\"one size \\nfits all\\\". \\n\\n Mike              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466165\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466165&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466165\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466165_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466165_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 22:09\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T22:09:17+0000\'\u003e19\\/Jan\\/07 22:09\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\\n\u003cp\u003eDoron Cohen wrote:\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; This ties solving the NFS issue with an extendable-file-deletion policy.\u003cbr\\/\u003e\\n&gt; I am wondering is this the right way, or, perhaps, should the reference \u003cbr\\/\u003e\\n&gt; counting be considered alone, apart from the deletion policy.\u003cbr\\/\u003e\\n&gt; (Would modifying IndexFileDeleter to base on ref-count make it simpler\u003cbr\\/\u003e\\n&gt; or harder to maintain?)\u003cbr\\/\u003e\\n&gt;\u003cbr\\/\u003e\\n&gt; Also, IndexFileDeleter is doing delicate work - not sure you want \u003cbr\\/\u003e\\n&gt; applications to mess with it. Better let applications control some\u003cbr\\/\u003e\\n&gt; simple well defined behavior, maybe the same way that a sorter \u003cbr\\/\u003e\\n&gt; allows applications to provide a comparator, but keeps the sorting \u003cbr\\/\u003e\\n&gt; algorithm for itself.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe solution I have in mind abstracts away all tricky details of\u003cbr\\/\u003e\\ndeleting files.  EG something like:\u003c\\/p\u003e\\n\\n\u003cp\u003e  public class OnlyLastCommitDeleter extends IndexFileDeleter {\u003c\\/p\u003e\\n\\n\u003cp\u003e    void onInit(List commits) \u003c\\/p\u003e\\n{\\n      onCommit(commits);\\n    }\\n\\n\u003cp\u003e    void onCommit(List commits) {\u003cbr\\/\u003e\\n      if (commits.size() &gt; 1) {\u003cbr\\/\u003e\\n        for(int i=0;i&lt;commits.size()-1;i++) \u003c\\/p\u003e\\n{\\n          deleteCommit(commits.get(i));\\n        }\\n\u003cp\u003e      }\u003cbr\\/\u003e\\n    }\u003c\\/p\u003e\\n\\n\u003cp\u003eIe, the sole responsibility of the IndexFileDeleter subclass (policy)\u003cbr\\/\u003e\\nis to decide when to delete a commit.  The rest of the details\u003cbr\\/\u003e\\n(figuring out what actual files can be deleted now that a given commit\u003cbr\\/\u003e\\nsegments_N is deleted) are handled by the base class (with in-memory\u003cbr\\/\u003e\\nref counting).\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; Back to reference counting,- how about the following approach:\u003cbr\\/\u003e\\n&gt; - Add to Directory a FileReferenceCounter data member, get()\\/set() etc.\u003cbr\\/\u003e\\n&gt; - Add a class FileReferenceCounter with simple general methods:\u003cbr\\/\u003e\\n&gt;   void increment (String name)\u003cbr\\/\u003e\\n&gt;   void decrement (String name)\u003cbr\\/\u003e\\n&gt;   int getRefCount (String name)\u003cbr\\/\u003e\\n&gt; - Default implementation would do nothing, i.e. would not record \u003cbr\\/\u003e\\n&gt;   references, and always return 0.\u003cbr\\/\u003e\\n&gt; - IndexReader, upon opening a segment, would call increment(segName)\u003cbr\\/\u003e\\n&gt; - IndexReader, upon closing a segment, would call decrement(segName)\u003cbr\\/\u003e\\n&gt; - IndexFileDeleter, before removing a file belonging to a certain segment, \u003cbr\\/\u003e\\n&gt;   would verify getRefCount(segName)==0.\u003cbr\\/\u003e\\n&gt; - Notice that the FilereferenceCounter is available from the Directory, \u003cbr\\/\u003e\\n&gt;   so no constructors should be added to IndexWriter\\/Reader.\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; So, this is adding to Directory a general file utility, no knowledge of \u003cbr\\/\u003e\\n&gt; index structure required in Directory. Also, IndexFileDeleter can remain \u003cbr\\/\u003e\\n&gt; as today, and at some later point can be made more powerful with various \u003cbr\\/\u003e\\n&gt; deletion policies - but those policies remain unrelated to the NFS \u003cbr\\/\u003e\\n&gt; issue - they can focus on point-in-time issues, where I think it \u003cbr\\/\u003e\\n&gt; stemmed from. \u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; An NFS geared FileReferenceCounter would then be able to keep alive \u003cbr\\/\u003e\\n&gt; \\\"counter files\\\", name those files based on counted fileName plus\u003cbr\\/\u003e\\n&gt; processID plus machID, base getRefCount on safety window since file \u003cbr\\/\u003e\\n&gt; was last touched, etc. All this is left out from point-in-time \u003cbr\\/\u003e\\n&gt; policies (how many\\/time points-in-time should be retained).\u003c\\/p\u003e\\n\\n\u003cp\u003eI think this approach could work, but, rather than implementing in the\u003cbr\\/\u003e\\nLucene core (adding methods to Directory) I\'d like to see it tested as\u003cbr\\/\u003e\\na custom deletion policy + wrappers around IndexReader\u003cbr\\/\u003e\\ncreation\\/destruction.\u003c\\/p\u003e\\n\\n\u003cp\u003eWe have so much debate about the best \\\"deletion policy\\\" for NFS that\u003cbr\\/\u003e\\nI\'d like to make the minimal extension to the core (ability to make\u003cbr\\/\u003e\\nyour own \\\"deletion policy\\\") and then people can build their own and\u003cbr\\/\u003e\\ntry them out.\u003c\\/p\u003e\\n\\n\u003cp\u003eMike\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466165_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466165_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/07 22:09\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-19T22:09:17+0000\'\u003e19\\/Jan\\/07 22:09\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                   \\n Doron Cohen wrote: \\n\\n &gt; This ties solving the NFS issue with an extendable-file-deletion policy. \\n&gt; I am wondering is this the right way, or, perhaps, should the reference  \\n&gt; counting be considered alone, apart from the deletion policy. \\n&gt; (Would modifying IndexFileDeleter to base on ref-count make it simpler \\n&gt; or harder to maintain?) \\n&gt; \\n&gt; Also, IndexFileDeleter is doing delicate work - not sure you want  \\n&gt; applications to mess with it. Better let applications control some \\n&gt; simple well defined behavior, maybe the same way that a sorter  \\n&gt; allows applications to provide a comparator, but keeps the sorting  \\n&gt; algorithm for itself. \\n\\n The solution I have in mind abstracts away all tricky details of \\ndeleting files.  EG something like: \\n\\n   public class OnlyLastCommitDeleter extends IndexFileDeleter { \\n\\n     void onInit(List commits)  \\n{\\n      onCommit(commits);\\n    }\\n\\n     void onCommit(List commits) { \\n      if (commits.size() &gt; 1) { \\n        for(int i=0;i&lt;commits.size()-1;i++)  \\n{\\n          deleteCommit(commits.get(i));\\n        }\\n       } \\n    } \\n\\n Ie, the sole responsibility of the IndexFileDeleter subclass (policy) \\nis to decide when to delete a commit.  The rest of the details \\n(figuring out what actual files can be deleted now that a given commit \\nsegments_N is deleted) are handled by the base class (with in-memory \\nref counting). \\n\\n &gt; Back to reference counting,- how about the following approach: \\n&gt; - Add to Directory a FileReferenceCounter data member, get()\\/set() etc. \\n&gt; - Add a class FileReferenceCounter with simple general methods: \\n&gt;   void increment (String name) \\n&gt;   void decrement (String name) \\n&gt;   int getRefCount (String name) \\n&gt; - Default implementation would do nothing, i.e. would not record  \\n&gt;   references, and always return 0. \\n&gt; - IndexReader, upon opening a segment, would call increment(segName) \\n&gt; - IndexReader, upon closing a segment, would call decrement(segName) \\n&gt; - IndexFileDeleter, before removing a file belonging to a certain segment,  \\n&gt;   would verify getRefCount(segName)==0. \\n&gt; - Notice that the FilereferenceCounter is available from the Directory,  \\n&gt;   so no constructors should be added to IndexWriter\\/Reader. \\n&gt;  \\n&gt; So, this is adding to Directory a general file utility, no knowledge of  \\n&gt; index structure required in Directory. Also, IndexFileDeleter can remain  \\n&gt; as today, and at some later point can be made more powerful with various  \\n&gt; deletion policies - but those policies remain unrelated to the NFS  \\n&gt; issue - they can focus on point-in-time issues, where I think it  \\n&gt; stemmed from.  \\n&gt;  \\n&gt; An NFS geared FileReferenceCounter would then be able to keep alive  \\n&gt; \\\"counter files\\\", name those files based on counted fileName plus \\n&gt; processID plus machID, base getRefCount on safety window since file  \\n&gt; was last touched, etc. All this is left out from point-in-time  \\n&gt; policies (how many\\/time points-in-time should be retained). \\n\\n I think this approach could work, but, rather than implementing in the \\nLucene core (adding methods to Directory) I\'d like to see it tested as \\na custom deletion policy + wrappers around IndexReader \\ncreation\\/destruction. \\n\\n We have so much debate about the best \\\"deletion policy\\\" for NFS that \\nI\'d like to make the minimal extension to the core (ability to make \\nyour own \\\"deletion policy\\\") and then people can build their own and \\ntry them out. \\n\\n Mike              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466223\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466223&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466223\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466223_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466223_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/07 10:12\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-20T10:12:15+0000\'\u003e20\\/Jan\\/07 10:12\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eOne clarification on \\\"different deletion policies\\\": to support \\\"commit\u003cbr\\/\u003e\\non close\\\" in IndexWriter, I already have to improve IndexFileDeleter\u003cbr\\/\u003e\\nto give it a different deletion policy than the current one.\u003c\\/p\u003e\\n\\n\u003cp\u003eSpecifically, the deleter must not delete anything referenced by the\u003cbr\\/\u003e\\nlast commit nor anything referenced by the in-memory SegmentInfos.\u003c\\/p\u003e\\n\\n\u003cp\u003eFor example, if a writer is opened with autoCommit=false (\\\"commit on\u003cbr\\/\u003e\\nclose\\\") on an existing index, and lots of docs are added\\/deleted\\/etc,\u003cbr\\/\u003e\\nthere will have been flushes &amp; merges of segments.  The deletion\u003cbr\\/\u003e\\npolicy should not delete anything that existed \\\"at the start\\\" because\u003cbr\\/\u003e\\nit\'s referenced by the segments_N commit, nor anything that is now\u003cbr\\/\u003e\\nreferenced by the in-memory SegmentInfos.  But it should delete\u003cbr\\/\u003e\\nanything \\\"in between\\\" (any newly written segments that have now been\u003cbr\\/\u003e\\nmerged away).\u003c\\/p\u003e\\n\\n\u003cp\u003eTo the deleter this would just be a different policy, one that keeps\u003cbr\\/\u003e\\ntwo SegmentInfos alive (one on disk and one not yet committed, in\u003cbr\\/\u003e\\nmemory).  And the default deletion policy would be selected depending\u003cbr\\/\u003e\\non whether the writer is in autoCommit mode or not.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466223_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466223_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/07 10:12\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-20T10:12:15+0000\'\u003e20\\/Jan\\/07 10:12\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    One clarification on \\\"different deletion policies\\\": to support \\\"commit \\non close\\\" in IndexWriter, I already have to improve IndexFileDeleter \\nto give it a different deletion policy than the current one. \\n\\n Specifically, the deleter must not delete anything referenced by the \\nlast commit nor anything referenced by the in-memory SegmentInfos. \\n\\n For example, if a writer is opened with autoCommit=false (\\\"commit on \\nclose\\\") on an existing index, and lots of docs are added\\/deleted\\/etc, \\nthere will have been flushes &amp; merges of segments.  The deletion \\npolicy should not delete anything that existed \\\"at the start\\\" because \\nit\'s referenced by the segments_N commit, nor anything that is now \\nreferenced by the in-memory SegmentInfos.  But it should delete \\nanything \\\"in between\\\" (any newly written segments that have now been \\nmerged away). \\n\\n To the deleter this would just be a different policy, one that keeps \\ntwo SegmentInfos alive (one on disk and one not yet committed, in \\nmemory).  And the default deletion policy would be selected depending \\non whether the writer is in autoCommit mode or not.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466377\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466377&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466377\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12466377_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466377_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/07 01:22\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-22T01:22:49+0000\'\u003e22\\/Jan\\/07 01:22\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\\n\u003cp\u003eOn Jan 19, 2007, at 2:04 PM, Michael McCandless (JIRA) wrote:\u003cbr\\/\u003e\\n&gt;   * I think NFS support is part of Lucene\'s core mission.\u003c\\/p\u003e\\n\\n\u003cp\u003eWhen I asserted that IndexFileDeleter had nothing to do with Lucene\'s core\u003cbr\\/\u003e\\nmission, I meant: you don\'t use Lucene to build yourself an app which helps\u003cbr\\/\u003e\\nyou delete files.  \u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; Yes there is an open question now on what to do about the confusion on using\u003cbr\\/\u003e\\n&gt; IndexReader vs IndexWriter.  I think moving towards \\\"use IndexWriter for\u003cbr\\/\u003e\\n&gt; changes, use IndexReader for reading\\\" is the best solution here.  But I\u003cbr\\/\u003e\\n&gt; don\'t see how this relates to allowing subclassing of IndexFileDeleter to\u003cbr\\/\u003e\\n&gt; make your own deletion policy.\u003c\\/p\u003e\\n\\n\u003cp\u003eThey\'re hard to refactor because they\'re both big, hence adding either code or\u003cbr\\/\u003e\\nAPI commitments to them should be avoided when possible.  We\'re in agreement\u003cbr\\/\u003e\\nabout the desirability of simplicity.  We part ways in how we measure\u003cbr\\/\u003e\\nsimplicity: I give greater emphasis to simplicity of API design. \u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; I disagree on this point (\\\"no\\\" API is better than subclassing). \u003c\\/p\u003e\\n\\n\u003cp\u003eWe\'re talking past each other.  I was generalizing: a 100% successful, purely\u003cbr\\/\u003e\\ninternal \\\"black box\\\" solution is always better than a solution that involves\u003cbr\\/\u003e\\nthe user.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; I would not want to add file locking &amp; additional complexity into the Lucene\u003cbr\\/\u003e\\n&gt; core, just to handle NFS.\u003c\\/p\u003e\\n\\n\u003cp\u003eThis is where our differing priorities manifest.  I would rather add some\u003cbr\\/\u003e\\ncode complexity to the Lucene \\\"core\\\" than accept the increased \u003cbr\\/\u003e\\nsupport burden of an expanded API.\u003c\\/p\u003e\\n\\n\u003cp\u003eIronically, though you consider supporting NFS \\\"part of Lucene\'s core\u003cbr\\/\u003e\\nmission\\\", for the average user your proposal as it stands is not very\u003cbr\\/\u003e\\nuser-friendly.  People like Chuck, Doron, and Robert will have no trouble with\u003cbr\\/\u003e\\nit, but if you\'re a newcomer to Lucene and you \\\"just want to put an index on\u003cbr\\/\u003e\\nNFS\\\", subclassing IndexFileDeleter will pose a challenge.\u003c\\/p\u003e\\n\\n\u003cp\u003eI also think you may be over-estimating the amount of effort it will take to\u003cbr\\/\u003e\\nexploit advisory read locks.  (The vexing problem of how to issue a warning \u003cbr\\/\u003e\\nwhen index creation is attempted on an NFS volume is orthogonal to the \u003cbr\\/\u003e\\nread-locks approach as well.) They should be easy in KS; I\'ll know soon enough.  \u003cbr\\/\u003e\\nHowever, there are some OO discipline issues which complicate applying what I\u003cbr\\/\u003e\\nhave in mind to Java Lucene.  In KS, the public API is defined solely via\u003cbr\\/\u003e\\ndocumentation, so I can have code in Index call methods from Store without\u003cbr\\/\u003e\\nhaving to expose it.  With Lucene divided into multiple packages, that\'s a\u003cbr\\/\u003e\\nproblem.  \u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; I think subclassing is perfect for this sort of situation.  \u003c\\/p\u003e\\n\\n\u003cp\u003eI\'m not so enamored of subclassing. It\'s less constraining than some other\u003cbr\\/\u003e\\napproaches, but it\'s still constraining.\u003c\\/p\u003e\\n\\n\u003cp\u003eCase in point: it\'s not possible to provide a subclass of IndexFileDeleter\u003cbr\\/\u003e\\nwhich exploits advisory read locking under your current proposal.\u003c\\/p\u003e\\n\\n\u003cp\u003eIn theory, your proposal even prevents the addition of such read locks to\u003cbr\\/\u003e\\nLucene later, because doing so could conflict with a deletions policy you\'ve\u003cbr\\/\u003e\\nallowed the user to set.  (; Given that locks over NFS make you \\\"nervous\\\",\u003cbr\\/\u003e\\nperhaps you consider foreclosing that option a feature. \u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/wink.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; It\'s like the various LockFactory implementations we have: there is no \\\"one\u003cbr\\/\u003e\\n&gt; size fits all\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003eI don\'t think LockFactory ought to be exposed either.  \u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/smile.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e\u003c\\/p\u003e\\n\\n\u003cp\u003eReading from an index &#8211; any index, on any volume &#8211; should Just Work.\u003cbr\\/\u003e\\nWriting to an index from a single IndexWriter should Just Work.  In a perfect\u003cbr\\/\u003e\\nworld, writing from multiple writers simultaneously would Just Work, too, but\u003cbr\\/\u003e\\nas that\'s inherently impractical given Lucene\'s current design, opening a\u003cbr\\/\u003e\\nsecond writer must fail.  That failure should be the only visible evidence\u003cbr\\/\u003e\\nthat a locking mechanism even exists.  \u003c\\/p\u003e\\n\\n\u003cp\u003eIn my view, any deviance from that ideal API due to implementation defects\u003cbr\\/\u003e\\nshould be handled with exceptions rather than API additions.\u003c\\/p\u003e\\n\\n\u003cp\u003eIn keeping with this philosophy, Lock is not publicly exposed in KinoSearch.\u003cbr\\/\u003e\\nIn fact, nothing about the locking mechanism is publicly exposed.  So far,\u003cbr\\/\u003e\\nthere seem to be three bugs with the current implementation: \u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eStale NFS Filehandle exceptions.\u003c\\/li\u003e\\n\\t\u003cli\u003eStale lock files interfering with unattended indexing sessions.  I plan\u003cbr\\/\u003e\\n    to mitigate this by moving to advisory write locks when possible.\u003c\\/li\u003e\\n\\t\u003cli\u003eMultiple machines can cause index corruption when attempting to write\u003cbr\\/\u003e\\n    simultaneously to a shared volume.  Moving the write.lock file to the\u003cbr\\/\u003e\\n    index directory, as enabled by lockless commits, solves this problem.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eOnce advisory file locks are in place, and if they work as expected under\u003cbr\\/\u003e\\nrecent versions of NFS, I expect no further problems under any common, recent\u003cbr\\/\u003e\\nUnix.\u003c\\/p\u003e\\n\\n\u003cp\u003eWith the switch to lockless commits in KinoSearch, I\'ve able to refactor Lock\u003cbr\\/\u003e\\nand eliminate all of Lock\'s subclasses, simplifying the KinoSearch \\\"core\\\".\u003cbr\\/\u003e\\n\\\"No more subclassing of Lock\\\" was originally a line-item in my list of\u003cbr\\/\u003e\\n\\\"great stuff\\\" about lockless commits, but I had to take it out because it\u003cbr\\/\u003e\\nwasn\'t true for Lucene!\u003c\\/p\u003e\\n\\n\u003cp\u003eWith Otis signing on to your solution, it looks like momentum is gathering for\u003cbr\\/\u003e\\nit.  For the record, I don\'t think it\'s a catastrophic change, just suboptimal\u003cbr\\/\u003e\\nand IMO not ready for addition until improved.  \u003c\\/p\u003e\\n\\n\u003cp\u003eI think you can do better.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12466377_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466377_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/07 01:22\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-22T01:22:49+0000\'\u003e22\\/Jan\\/07 01:22\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                   \\n On Jan 19, 2007, at 2:04 PM, Michael McCandless (JIRA) wrote: \\n&gt;   * I think NFS support is part of Lucene\'s core mission. \\n\\n When I asserted that IndexFileDeleter had nothing to do with Lucene\'s core \\nmission, I meant: you don\'t use Lucene to build yourself an app which helps \\nyou delete files.   \\n\\n &gt; Yes there is an open question now on what to do about the confusion on using \\n&gt; IndexReader vs IndexWriter.  I think moving towards \\\"use IndexWriter for \\n&gt; changes, use IndexReader for reading\\\" is the best solution here.  But I \\n&gt; don\'t see how this relates to allowing subclassing of IndexFileDeleter to \\n&gt; make your own deletion policy. \\n\\n They\'re hard to refactor because they\'re both big, hence adding either code or \\nAPI commitments to them should be avoided when possible.  We\'re in agreement \\nabout the desirability of simplicity.  We part ways in how we measure \\nsimplicity: I give greater emphasis to simplicity of API design.  \\n\\n &gt; I disagree on this point (\\\"no\\\" API is better than subclassing).  \\n\\n We\'re talking past each other.  I was generalizing: a 100% successful, purely \\ninternal \\\"black box\\\" solution is always better than a solution that involves \\nthe user. \\n\\n &gt; I would not want to add file locking &amp; additional complexity into the Lucene \\n&gt; core, just to handle NFS. \\n\\n This is where our differing priorities manifest.  I would rather add some \\ncode complexity to the Lucene \\\"core\\\" than accept the increased  \\nsupport burden of an expanded API. \\n\\n Ironically, though you consider supporting NFS \\\"part of Lucene\'s core \\nmission\\\", for the average user your proposal as it stands is not very \\nuser-friendly.  People like Chuck, Doron, and Robert will have no trouble with \\nit, but if you\'re a newcomer to Lucene and you \\\"just want to put an index on \\nNFS\\\", subclassing IndexFileDeleter will pose a challenge. \\n\\n I also think you may be over-estimating the amount of effort it will take to \\nexploit advisory read locks.  (The vexing problem of how to issue a warning  \\nwhen index creation is attempted on an NFS volume is orthogonal to the  \\nread-locks approach as well.) They should be easy in KS; I\'ll know soon enough.   \\nHowever, there are some OO discipline issues which complicate applying what I \\nhave in mind to Java Lucene.  In KS, the public API is defined solely via \\ndocumentation, so I can have code in Index call methods from Store without \\nhaving to expose it.  With Lucene divided into multiple packages, that\'s a \\nproblem.   \\n\\n &gt; I think subclassing is perfect for this sort of situation.   \\n\\n I\'m not so enamored of subclassing. It\'s less constraining than some other \\napproaches, but it\'s still constraining. \\n\\n Case in point: it\'s not possible to provide a subclass of IndexFileDeleter \\nwhich exploits advisory read locking under your current proposal. \\n\\n In theory, your proposal even prevents the addition of such read locks to \\nLucene later, because doing so could conflict with a deletions policy you\'ve \\nallowed the user to set.  (; Given that locks over NFS make you \\\"nervous\\\", \\nperhaps you consider foreclosing that option a feature.   \\n\\n &gt; It\'s like the various LockFactory implementations we have: there is no \\\"one \\n&gt; size fits all\\\". \\n\\n I don\'t think LockFactory ought to be exposed either.    \\n\\n Reading from an index &#8211; any index, on any volume &#8211; should Just Work. \\nWriting to an index from a single IndexWriter should Just Work.  In a perfect \\nworld, writing from multiple writers simultaneously would Just Work, too, but \\nas that\'s inherently impractical given Lucene\'s current design, opening a \\nsecond writer must fail.  That failure should be the only visible evidence \\nthat a locking mechanism even exists.   \\n\\n In my view, any deviance from that ideal API due to implementation defects \\nshould be handled with exceptions rather than API additions. \\n\\n In keeping with this philosophy, Lock is not publicly exposed in KinoSearch. \\nIn fact, nothing about the locking mechanism is publicly exposed.  So far, \\nthere seem to be three bugs with the current implementation:  \\n\\n \\n\\t Stale NFS Filehandle exceptions. \\n\\t Stale lock files interfering with unattended indexing sessions.  I plan \\n    to mitigate this by moving to advisory write locks when possible. \\n\\t Multiple machines can cause index corruption when attempting to write \\n    simultaneously to a shared volume.  Moving the write.lock file to the \\n    index directory, as enabled by lockless commits, solves this problem. \\n \\n\\n\\n Once advisory file locks are in place, and if they work as expected under \\nrecent versions of NFS, I expect no further problems under any common, recent \\nUnix. \\n\\n With the switch to lockless commits in KinoSearch, I\'ve able to refactor Lock \\nand eliminate all of Lock\'s subclasses, simplifying the KinoSearch \\\"core\\\". \\n\\\"No more subclassing of Lock\\\" was originally a line-item in my list of \\n\\\"great stuff\\\" about lockless commits, but I had to take it out because it \\nwasn\'t true for Lucene! \\n\\n With Otis signing on to your solution, it looks like momentum is gathering for \\nit.  For the record, I don\'t think it\'s a catastrophic change, just suboptimal \\nand IMO not ready for addition until improved.   \\n\\n I think you can do better.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466592\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466592&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466592\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466592_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466592_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/07 23:30\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-22T23:30:23+0000\'\u003e22\\/Jan\\/07 23:30\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eQuick summary first:\u003c\\/p\u003e\\n\\n\u003cp\u003eOK, as you said (and I agree) I think we just have a difference of\u003cbr\\/\u003e\\nopinion on what\'s the \\\"lesser evil\\\" tradeoff here.  You would prefer to\u003cbr\\/\u003e\\nchange the core of KinoSearch to always use advisory read locks for\u003cbr\\/\u003e\\nall indices.\u003c\\/p\u003e\\n\\n\u003cp\u003eWhereas I prefer to leave the Lucene core untouched since things work\u003cbr\\/\u003e\\nfine in most cases today (\\\"if it ain\'t broke don\'t fix it\\\"), and then\u003cbr\\/\u003e\\nopen up an API so for those cases (NFS) where it doesn\'t work, users\u003cbr\\/\u003e\\nat least have possible solutions to try.\u003c\\/p\u003e\\n\\n\u003cp\u003eI think you also have a high confidence that the locking approach will\u003cbr\\/\u003e\\nwork fine (be perfect) on the first go and will not alienate too many\u003cbr\\/\u003e\\nusers, but I don\'t: I have had problems with locking in the past and I\u003cbr\\/\u003e\\nthink most users don\'t have the freedom to \\\"upgrade OS\\/fileserver\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003eSo I would prefer instead to open a minimal API in the core of Lucene\u003cbr\\/\u003e\\n(so users can use different deletion policies), and then try the 5\u003cbr\\/\u003e\\ndifferent ideas proposed so far (and more later I\'m sure) as their own\u003cbr\\/\u003e\\ndeletion policy, external to Lucene\'s core (eg in contrib).  If one of\u003cbr\\/\u003e\\nthem proves to work well, universally, then sometime down the road we\u003cbr\\/\u003e\\ncan promote it as the default deletion policy.\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003eOK details below:\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; &gt; * I think NFS support is part of Lucene\'s core mission.\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; When I asserted that IndexFileDeleter had nothing to do with Lucene\'s core\u003cbr\\/\u003e\\n&gt; mission, I meant: you don\'t use Lucene to build yourself an app which helps\u003cbr\\/\u003e\\n&gt; you delete files.\u003c\\/p\u003e\\n\\n\u003cp\u003eWell, \\\"custom deletion policies\\\" is in support of the core mission of\u003cbr\\/\u003e\\n\\\"working over NFS\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; &gt; Yes there is an open question now on what to do about the confusion on using\u003cbr\\/\u003e\\n&gt; &gt; IndexReader vs IndexWriter. I think moving towards \\\"use IndexWriter for\u003cbr\\/\u003e\\n&gt; &gt; changes, use IndexReader for reading\\\" is the best solution here. But I\u003cbr\\/\u003e\\n&gt; &gt; don\'t see how this relates to allowing subclassing of IndexFileDeleter to\u003cbr\\/\u003e\\n&gt; &gt; make your own deletion policy.\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; They\'re hard to refactor because they\'re both big, hence adding either code or\u003cbr\\/\u003e\\n&gt; API commitments to them should be avoided when possible. We\'re in agreement\u003cbr\\/\u003e\\n&gt; about the desirability of simplicity. We part ways in how we measure\u003cbr\\/\u003e\\n&gt; simplicity: I give greater emphasis to simplicity of API design.\u003cbr\\/\u003e\\n&gt;  \u003cbr\\/\u003e\\n&gt; &gt; I disagree on this point (\\\"no\\\" API is better than subclassing).\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; We\'re talking past each other. I was generalizing: a 100% successful, purely\u003cbr\\/\u003e\\n&gt; internal \\\"black box\\\" solution is always better than a solution that involves\u003cbr\\/\u003e\\n&gt; the user.\u003c\\/p\u003e\\n\\n\u003cp\u003eOK, yes in the ideal case, no API is better than API if your situation\u003cbr\\/\u003e\\nallows for no API.  I just don\'t think this is one of those\u003cbr\\/\u003e\\nsituations: I don\'t think we have a clear cut \\\"one size fits all\\\"\u003cbr\\/\u003e\\nsolution.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; &gt; I would not want to add file locking &amp; additional complexity into the Lucene\u003cbr\\/\u003e\\n&gt; &gt; core, just to handle NFS.\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; This is where our differing priorities manifest. I would rather add some\u003cbr\\/\u003e\\n&gt; code complexity to the Lucene \\\"core\\\" than accept the increased\u003cbr\\/\u003e\\n&gt; support burden of an expanded API.\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; Ironically, though you consider supporting NFS \\\"part of Lucene\'s core\u003cbr\\/\u003e\\n&gt; mission\\\", for the average user your proposal as it stands is not very\u003cbr\\/\u003e\\n&gt; user-friendly. People like Chuck, Doron, and Robert will have no trouble with\u003cbr\\/\u003e\\n&gt; it, but if you\'re a newcomer to Lucene and you \\\"just want to put an index on\u003cbr\\/\u003e\\n&gt; NFS\\\", subclassing IndexFileDeleter will pose a challenge.\u003c\\/p\u003e\\n\\n\u003cp\u003eYes, but at least having the option (picking one of the deletion\u003cbr\\/\u003e\\npolicies in \\\"contrib\\\" once we\'ve built them out) is quite a bit better\u003cbr\\/\u003e\\nthan what we have today (no option besides \\\"you must refresh now\\\").  I\u003cbr\\/\u003e\\nwould love to have the \\\"perfect\\\" solution (which you are aiming for in\u003cbr\\/\u003e\\none step), but I\'ll settle today for just good progress: \\\"progress not\u003cbr\\/\u003e\\nperfection\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; I also think you may be over-estimating the amount of effort it will take to\u003cbr\\/\u003e\\n&gt; exploit advisory read locks. (The vexing problem of how to issue a warning\u003cbr\\/\u003e\\n&gt; when index creation is attempted on an NFS volume is orthogonal to the\u003cbr\\/\u003e\\n&gt; read-locks approach as well.) They should be easy in KS; I\'ll know soon enough.\u003cbr\\/\u003e\\n&gt; However, there are some OO discipline issues which complicate applying what I\u003cbr\\/\u003e\\n&gt; have in mind to Java Lucene. In KS, the public API is defined solely via\u003cbr\\/\u003e\\n&gt; documentation, so I can have code in Index call methods from Store without\u003cbr\\/\u003e\\n&gt; having to expose it. With Lucene divided into multiple packages, that\'s a\u003cbr\\/\u003e\\n&gt; problem.\u003c\\/p\u003e\\n\\n\u003cp\u003eYes detection of NFS is orthogonal and I would love to find a solution\u003cbr\\/\u003e\\nhere.  And yes Java\'s method\\/field protection is quite different from\u003cbr\\/\u003e\\nwhat KS can do.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; &gt; I think subclassing is perfect for this sort of situation.\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; I\'m not so enamored of subclassing. It\'s less constraining than some other\u003cbr\\/\u003e\\n&gt; approaches, but it\'s still constraining.\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; Case in point: it\'s not possible to provide a subclass of IndexFileDeleter\u003cbr\\/\u003e\\n&gt; which exploits advisory read locking under your current proposal.\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; In theory, your proposal even prevents the addition of such read locks to\u003cbr\\/\u003e\\n&gt; Lucene later, because doing so could conflict with a deletions policy you\'ve\u003cbr\\/\u003e\\n&gt; allowed the user to set. (; Given that locks over NFS make you \\\"nervous\\\",\u003cbr\\/\u003e\\n&gt; perhaps you consider foreclosing that option a feature. \u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/wink.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e\u003c\\/p\u003e\\n\\n\u003cp\u003eNo, I would not consider foreclosing that option a feature!\u003c\\/p\u003e\\n\\n\u003cp\u003eYes, I am nervous about relying on advisory read locks 100% today in\u003cbr\\/\u003e\\nthe Lucene core.  But, I would love to be proven wrong in the future:\u003cbr\\/\u003e\\nif your lock based solution actually works out \\\"perfectly\\\" in the\u003cbr\\/\u003e\\nfuture then users can indeed fire up Lucene\\/KS regardless of what\u003cbr\\/\u003e\\nfilesystem the index is on.  I would equally love to see file-based\u003cbr\\/\u003e\\nreference counting work out, etc: if any option proves reliable enough\u003cbr\\/\u003e\\nin the future then we can make it the default deletion policy.\u003c\\/p\u003e\\n\\n\u003cp\u003eYes users who set their own deletion policies would not get this\u003cbr\\/\u003e\\ndefault but that\'s OK: such users understand what they\'ve done.\u003c\\/p\u003e\\n\\n\u003cp\u003eAnd, I don\'t want to change the default policy now (\\\"first do no\u003cbr\\/\u003e\\nharm\\\").\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e&gt; &gt; It\'s like the various LockFactory implementations we have: there is no \\\"one\u003cbr\\/\u003e\\n&gt; &gt; size fits all\\\".\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; I don\'t think LockFactory ought to be exposed either. \u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/smile.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e\u003cbr\\/\u003e\\n&gt;\u003cbr\\/\u003e\\n&gt; Reading from an index &#8211; any index, on any volume &#8211; should Just Work.\u003cbr\\/\u003e\\n&gt; Writing to an index from a single IndexWriter should Just Work. In a perfect\u003cbr\\/\u003e\\n&gt; world, writing from multiple writers simultaneously would Just Work, too, but\u003cbr\\/\u003e\\n&gt; as that\'s inherently impractical given Lucene\'s current design, opening a\u003cbr\\/\u003e\\n&gt; second writer must fail. That failure should be the only visible evidence\u003cbr\\/\u003e\\n&gt; that a locking mechanism even exists.\u003cbr\\/\u003e\\n&gt;\u003cbr\\/\u003e\\n&gt; In my view, any deviance from that ideal API due to implementation defects\u003cbr\\/\u003e\\n&gt; should be handled with exceptions rather than API additions.\u003cbr\\/\u003e\\n&gt;\u003cbr\\/\u003e\\n&gt; In keeping with this philosophy, Lock is not publicly exposed in KinoSearch.\u003cbr\\/\u003e\\n&gt; In fact, nothing about the locking mechanism is publicly exposed. So far,\u003cbr\\/\u003e\\n&gt; there seem to be three bugs with the current implementation:\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt;   * Stale NFS Filehandle exceptions.\u003cbr\\/\u003e\\n&gt;   * Stale lock files interfering with unattended indexing sessions. I plan\u003cbr\\/\u003e\\n&gt;     to mitigate this by moving to advisory write locks when possible.\u003cbr\\/\u003e\\n&gt;   * Multiple machines can cause index corruption when attempting to write\u003cbr\\/\u003e\\n&gt;     simultaneously to a shared volume. Moving the write.lock file to the\u003cbr\\/\u003e\\n&gt;     index directory, as enabled by lockless commits, solves this problem.\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; Once advisory file locks are in place, and if they work as expected under\u003cbr\\/\u003e\\n&gt; recent versions of NFS, I expect no further problems under any common, recent\u003cbr\\/\u003e\\n&gt; Unix.\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; With the switch to lockless commits in KinoSearch, I\'ve able to refactor Lock\u003cbr\\/\u003e\\n&gt; and eliminate all of Lock\'s subclasses, simplifying the KinoSearch \\\"core\\\".\u003cbr\\/\u003e\\n&gt; \\\"No more subclassing of Lock\\\" was originally a line-item in my list of\u003cbr\\/\u003e\\n&gt; \\\"great stuff\\\" about lockless commits, but I had to take it out because it\u003cbr\\/\u003e\\n&gt; wasn\'t true for Lucene!\u003cbr\\/\u003e\\n&gt;\u003cbr\\/\u003e\\n&gt; With Otis signing on to your solution, it looks like momentum is gathering for\u003cbr\\/\u003e\\n&gt; it. For the record, I don\'t think it\'s a catastrophic change, just suboptimal\u003cbr\\/\u003e\\n&gt; and IMO not ready for addition until improved.\u003c\\/p\u003e\\n\\n\u003cp\u003eI agree it would be great to reach this perfect world.  It would be\u003cbr\\/\u003e\\neven better to get there in just one jump from where we are today.\u003cbr\\/\u003e\\nIt\'s just not nearly clear to me that a locking solution (or reference\u003cbr\\/\u003e\\ncounting, time based expiration, etc.) for NFS is or will evolve to\u003cbr\\/\u003e\\nthat pefect solution.  And I think \\\"not alienating users\\\" who are\u003cbr\\/\u003e\\nstuck on past UNIX versions is more important than \\\"not adding any\u003cbr\\/\u003e\\nAPI\\\".  I think we are just picking a different \\\"lesser evil\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; I think you can do better.\u003c\\/p\u003e\\n\\n\u003cp\u003eWith time, I hope so too.  Progress not perfection!\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466592_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466592_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/07 23:30\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-22T23:30:23+0000\'\u003e22\\/Jan\\/07 23:30\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Quick summary first: \\n\\n OK, as you said (and I agree) I think we just have a difference of \\nopinion on what\'s the \\\"lesser evil\\\" tradeoff here.  You would prefer to \\nchange the core of KinoSearch to always use advisory read locks for \\nall indices. \\n\\n Whereas I prefer to leave the Lucene core untouched since things work \\nfine in most cases today (\\\"if it ain\'t broke don\'t fix it\\\"), and then \\nopen up an API so for those cases (NFS) where it doesn\'t work, users \\nat least have possible solutions to try. \\n\\n I think you also have a high confidence that the locking approach will \\nwork fine (be perfect) on the first go and will not alienate too many \\nusers, but I don\'t: I have had problems with locking in the past and I \\nthink most users don\'t have the freedom to \\\"upgrade OS\\/fileserver\\\". \\n\\n So I would prefer instead to open a minimal API in the core of Lucene \\n(so users can use different deletion policies), and then try the 5 \\ndifferent ideas proposed so far (and more later I\'m sure) as their own \\ndeletion policy, external to Lucene\'s core (eg in contrib).  If one of \\nthem proves to work well, universally, then sometime down the road we \\ncan promote it as the default deletion policy. \\n\\n\\n\\n OK details below: \\n\\n &gt; &gt; * I think NFS support is part of Lucene\'s core mission. \\n&gt;  \\n&gt; When I asserted that IndexFileDeleter had nothing to do with Lucene\'s core \\n&gt; mission, I meant: you don\'t use Lucene to build yourself an app which helps \\n&gt; you delete files. \\n\\n Well, \\\"custom deletion policies\\\" is in support of the core mission of \\n\\\"working over NFS\\\". \\n\\n &gt; &gt; Yes there is an open question now on what to do about the confusion on using \\n&gt; &gt; IndexReader vs IndexWriter. I think moving towards \\\"use IndexWriter for \\n&gt; &gt; changes, use IndexReader for reading\\\" is the best solution here. But I \\n&gt; &gt; don\'t see how this relates to allowing subclassing of IndexFileDeleter to \\n&gt; &gt; make your own deletion policy. \\n&gt;  \\n&gt; They\'re hard to refactor because they\'re both big, hence adding either code or \\n&gt; API commitments to them should be avoided when possible. We\'re in agreement \\n&gt; about the desirability of simplicity. We part ways in how we measure \\n&gt; simplicity: I give greater emphasis to simplicity of API design. \\n&gt;   \\n&gt; &gt; I disagree on this point (\\\"no\\\" API is better than subclassing). \\n&gt;  \\n&gt; We\'re talking past each other. I was generalizing: a 100% successful, purely \\n&gt; internal \\\"black box\\\" solution is always better than a solution that involves \\n&gt; the user. \\n\\n OK, yes in the ideal case, no API is better than API if your situation \\nallows for no API.  I just don\'t think this is one of those \\nsituations: I don\'t think we have a clear cut \\\"one size fits all\\\" \\nsolution. \\n\\n &gt; &gt; I would not want to add file locking &amp; additional complexity into the Lucene \\n&gt; &gt; core, just to handle NFS. \\n&gt;  \\n&gt; This is where our differing priorities manifest. I would rather add some \\n&gt; code complexity to the Lucene \\\"core\\\" than accept the increased \\n&gt; support burden of an expanded API. \\n&gt;  \\n&gt; Ironically, though you consider supporting NFS \\\"part of Lucene\'s core \\n&gt; mission\\\", for the average user your proposal as it stands is not very \\n&gt; user-friendly. People like Chuck, Doron, and Robert will have no trouble with \\n&gt; it, but if you\'re a newcomer to Lucene and you \\\"just want to put an index on \\n&gt; NFS\\\", subclassing IndexFileDeleter will pose a challenge. \\n\\n Yes, but at least having the option (picking one of the deletion \\npolicies in \\\"contrib\\\" once we\'ve built them out) is quite a bit better \\nthan what we have today (no option besides \\\"you must refresh now\\\").  I \\nwould love to have the \\\"perfect\\\" solution (which you are aiming for in \\none step), but I\'ll settle today for just good progress: \\\"progress not \\nperfection\\\". \\n\\n &gt; I also think you may be over-estimating the amount of effort it will take to \\n&gt; exploit advisory read locks. (The vexing problem of how to issue a warning \\n&gt; when index creation is attempted on an NFS volume is orthogonal to the \\n&gt; read-locks approach as well.) They should be easy in KS; I\'ll know soon enough. \\n&gt; However, there are some OO discipline issues which complicate applying what I \\n&gt; have in mind to Java Lucene. In KS, the public API is defined solely via \\n&gt; documentation, so I can have code in Index call methods from Store without \\n&gt; having to expose it. With Lucene divided into multiple packages, that\'s a \\n&gt; problem. \\n\\n Yes detection of NFS is orthogonal and I would love to find a solution \\nhere.  And yes Java\'s method\\/field protection is quite different from \\nwhat KS can do. \\n\\n &gt; &gt; I think subclassing is perfect for this sort of situation. \\n&gt;  \\n&gt; I\'m not so enamored of subclassing. It\'s less constraining than some other \\n&gt; approaches, but it\'s still constraining. \\n&gt;  \\n&gt; Case in point: it\'s not possible to provide a subclass of IndexFileDeleter \\n&gt; which exploits advisory read locking under your current proposal. \\n&gt;  \\n&gt; In theory, your proposal even prevents the addition of such read locks to \\n&gt; Lucene later, because doing so could conflict with a deletions policy you\'ve \\n&gt; allowed the user to set. (; Given that locks over NFS make you \\\"nervous\\\", \\n&gt; perhaps you consider foreclosing that option a feature.   \\n\\n No, I would not consider foreclosing that option a feature! \\n\\n Yes, I am nervous about relying on advisory read locks 100% today in \\nthe Lucene core.  But, I would love to be proven wrong in the future: \\nif your lock based solution actually works out \\\"perfectly\\\" in the \\nfuture then users can indeed fire up Lucene\\/KS regardless of what \\nfilesystem the index is on.  I would equally love to see file-based \\nreference counting work out, etc: if any option proves reliable enough \\nin the future then we can make it the default deletion policy. \\n\\n Yes users who set their own deletion policies would not get this \\ndefault but that\'s OK: such users understand what they\'ve done. \\n\\n And, I don\'t want to change the default policy now (\\\"first do no \\nharm\\\"). \\n\\n\\n &gt; &gt; It\'s like the various LockFactory implementations we have: there is no \\\"one \\n&gt; &gt; size fits all\\\". \\n&gt;  \\n&gt; I don\'t think LockFactory ought to be exposed either.   \\n&gt; \\n&gt; Reading from an index &#8211; any index, on any volume &#8211; should Just Work. \\n&gt; Writing to an index from a single IndexWriter should Just Work. In a perfect \\n&gt; world, writing from multiple writers simultaneously would Just Work, too, but \\n&gt; as that\'s inherently impractical given Lucene\'s current design, opening a \\n&gt; second writer must fail. That failure should be the only visible evidence \\n&gt; that a locking mechanism even exists. \\n&gt; \\n&gt; In my view, any deviance from that ideal API due to implementation defects \\n&gt; should be handled with exceptions rather than API additions. \\n&gt; \\n&gt; In keeping with this philosophy, Lock is not publicly exposed in KinoSearch. \\n&gt; In fact, nothing about the locking mechanism is publicly exposed. So far, \\n&gt; there seem to be three bugs with the current implementation: \\n&gt;  \\n&gt;   * Stale NFS Filehandle exceptions. \\n&gt;   * Stale lock files interfering with unattended indexing sessions. I plan \\n&gt;     to mitigate this by moving to advisory write locks when possible. \\n&gt;   * Multiple machines can cause index corruption when attempting to write \\n&gt;     simultaneously to a shared volume. Moving the write.lock file to the \\n&gt;     index directory, as enabled by lockless commits, solves this problem. \\n&gt;  \\n&gt; Once advisory file locks are in place, and if they work as expected under \\n&gt; recent versions of NFS, I expect no further problems under any common, recent \\n&gt; Unix. \\n&gt;  \\n&gt; With the switch to lockless commits in KinoSearch, I\'ve able to refactor Lock \\n&gt; and eliminate all of Lock\'s subclasses, simplifying the KinoSearch \\\"core\\\". \\n&gt; \\\"No more subclassing of Lock\\\" was originally a line-item in my list of \\n&gt; \\\"great stuff\\\" about lockless commits, but I had to take it out because it \\n&gt; wasn\'t true for Lucene! \\n&gt; \\n&gt; With Otis signing on to your solution, it looks like momentum is gathering for \\n&gt; it. For the record, I don\'t think it\'s a catastrophic change, just suboptimal \\n&gt; and IMO not ready for addition until improved. \\n\\n I agree it would be great to reach this perfect world.  It would be \\neven better to get there in just one jump from where we are today. \\nIt\'s just not nearly clear to me that a locking solution (or reference \\ncounting, time based expiration, etc.) for NFS is or will evolve to \\nthat pefect solution.  And I think \\\"not alienating users\\\" who are \\nstuck on past UNIX versions is more important than \\\"not adding any \\nAPI\\\".  I think we are just picking a different \\\"lesser evil\\\". \\n\\n &gt; I think you can do better. \\n\\n With time, I hope so too.  Progress not perfection!              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466639\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466639&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466639\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12466639_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466639_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/07 04:25\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-23T04:25:07+0000\'\u003e23\\/Jan\\/07 04:25\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eMichael McCandless wrote: \u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; The solution I have in mind abstracts away all tricky details of\u003cbr\\/\u003e\\n&gt; deleting files.  EG something like:\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt;   public class OnlyLastCommitDeleter extends IndexFileDeleter {\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt;     void onInit(List commits) \u003c\\/p\u003e\\n{\\n&gt;       onCommit(commits);\\n&gt;     }\\n\u003cp\u003e&gt; \u003cbr\\/\u003e\\n&gt;     void onCommit(List commits) {\u003cbr\\/\u003e\\n&gt;       if (commits.size() &gt; 1) {\u003cbr\\/\u003e\\n&gt;         for(int i=0;i&lt;commits.size()-1;i++) \u003c\\/p\u003e\\n{\\n&gt;           deleteCommit(commits.get(i));\\n&gt;         }\\n\u003cp\u003e&gt;       }\u003cbr\\/\u003e\\n&gt;     }\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; Ie, the sole responsibility of the IndexFileDeleter subclass (policy)\u003cbr\\/\u003e\\n&gt; is to decide when to delete a commit.  The rest of the details\u003cbr\\/\u003e\\n&gt; (figuring out what actual files can be deleted now that a given commit\u003cbr\\/\u003e\\n&gt; segments_N is deleted) are handled by the base class (with in-memory\u003cbr\\/\u003e\\n&gt; ref counting).\u003cbr\\/\u003e\\n&gt; \u003c\\/p\u003e\\n\\n\u003cp\u003eI don\'t really understand this interface and so I cannot see how \u003cbr\\/\u003e\\nyou intend to rewrite the IndexFileDeleter as you describe, but I \u003cbr\\/\u003e\\nagree that if this can be done it is a better solution. So I am \u003cbr\\/\u003e\\nokay with waiting for this approach to mature into code. \u003c\\/p\u003e\\n\\n\u003cp\u003e(I would prefer the DeletionPolicy to be a \u003cbr\\/\u003e\\npluggable \u003cb\u003einterface\u003c\\/b\u003e and the IndexFileDeleter to be \u003cbr\\/\u003e\\nan internal \u003cb\u003eclass\u003c\\/b\u003e, so that at least we do not expose now something \u003cbr\\/\u003e\\nthat would stand in our way in the future. But again, since I do not \u003cbr\\/\u003e\\nfully understand your solution maybe please bear with me if this is \u003cbr\\/\u003e\\nnot making sense.)\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12466639_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466639_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/07 04:25\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-23T04:25:07+0000\'\u003e23\\/Jan\\/07 04:25\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Michael McCandless wrote:  \\n\\n &gt; The solution I have in mind abstracts away all tricky details of \\n&gt; deleting files.  EG something like: \\n&gt;  \\n&gt;   public class OnlyLastCommitDeleter extends IndexFileDeleter { \\n&gt;  \\n&gt;     void onInit(List commits)  \\n{\\n&gt;       onCommit(commits);\\n&gt;     }\\n &gt;  \\n&gt;     void onCommit(List commits) { \\n&gt;       if (commits.size() &gt; 1) { \\n&gt;         for(int i=0;i&lt;commits.size()-1;i++)  \\n{\\n&gt;           deleteCommit(commits.get(i));\\n&gt;         }\\n &gt;       } \\n&gt;     } \\n&gt;  \\n&gt; Ie, the sole responsibility of the IndexFileDeleter subclass (policy) \\n&gt; is to decide when to delete a commit.  The rest of the details \\n&gt; (figuring out what actual files can be deleted now that a given commit \\n&gt; segments_N is deleted) are handled by the base class (with in-memory \\n&gt; ref counting). \\n&gt;  \\n\\n I don\'t really understand this interface and so I cannot see how  \\nyou intend to rewrite the IndexFileDeleter as you describe, but I  \\nagree that if this can be done it is a better solution. So I am  \\nokay with waiting for this approach to mature into code.  \\n\\n (I would prefer the DeletionPolicy to be a  \\npluggable  interface  and the IndexFileDeleter to be  \\nan internal  class , so that at least we do not expose now something  \\nthat would stand in our way in the future. But again, since I do not  \\nfully understand your solution maybe please bear with me if this is  \\nnot making sense.)              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466749\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466749&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466749\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12466749_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466749_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/07 15:09\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-23T15:09:15+0000\'\u003e23\\/Jan\\/07 15:09\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI found a flaw in my plan. If the read locks are always applied, they will\u003cbr\\/\u003e\\nslow deletion of obsolete segments for everybody where delete-on-last-close\u003cbr\\/\u003e\\ncurrently works as intended.  Right now, the files are unlinked and disappear\u003cbr\\/\u003e\\nas soon as the last reader holding them open goes away.  With read locks, the\u003cbr\\/\u003e\\nunlink op wouldn\'t take place if a reader was open.\u003c\\/p\u003e\\n\\n\u003cp\u003eI also spent a good bit of time yesterday further researching the subtleties\u003cbr\\/\u003e\\nof locks over NFS.  Summing up: flock can work, but dot-lock files are more\u003cbr\\/\u003e\\nreliable.\u003c\\/p\u003e\\n\\n\u003cp\u003eSo, new proposal: \u003c\\/p\u003e\\n\\n\u003cp\u003eAdd a new public method IndexReader.aquireReadLock(String hostId), which would\u003cbr\\/\u003e\\nwrite a dot-lock file to the index directory with hostId, a pid, and an\u003cbr\\/\u003e\\nincrementing integer spliced into the file name.  The relevant segments_N file\u003cbr\\/\u003e\\nname would be written to the lockfile.  Calling it would only be necessary on NFS,\u003cbr\\/\u003e\\nand an exception would occur if the attempt to create the lockfile\u003cbr\\/\u003e\\nfailed.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe deletions policy would work as in my earlier proposal, and the user\u003cbr\\/\u003e\\nwouldn\'t have to grok its innards.  Troubleshooting stale lockfiles\u003cbr\\/\u003e\\nby snooping the index directory contents would be straightforward and\u003cbr\\/\u003e\\nintuitive.\u003c\\/p\u003e\\n\\n\u003cp\u003eWe might want aquireReadLock() to automatically zap any locks associated with\u003cbr\\/\u003e\\nhostId for which the pid couldn\'t be found, or we might want to break that out\u003cbr\\/\u003e\\ninto another method.\u003c\\/p\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12466749_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466749_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/07 15:09\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-23T15:09:15+0000\'\u003e23\\/Jan\\/07 15:09\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I found a flaw in my plan. If the read locks are always applied, they will \\nslow deletion of obsolete segments for everybody where delete-on-last-close \\ncurrently works as intended.  Right now, the files are unlinked and disappear \\nas soon as the last reader holding them open goes away.  With read locks, the \\nunlink op wouldn\'t take place if a reader was open. \\n\\n I also spent a good bit of time yesterday further researching the subtleties \\nof locks over NFS.  Summing up: flock can work, but dot-lock files are more \\nreliable. \\n\\n So, new proposal:  \\n\\n Add a new public method IndexReader.aquireReadLock(String hostId), which would \\nwrite a dot-lock file to the index directory with hostId, a pid, and an \\nincrementing integer spliced into the file name.  The relevant segments_N file \\nname would be written to the lockfile.  Calling it would only be necessary on NFS, \\nand an exception would occur if the attempt to create the lockfile \\nfailed. \\n\\n The deletions policy would work as in my earlier proposal, and the user \\nwouldn\'t have to grok its innards.  Troubleshooting stale lockfiles \\nby snooping the index directory contents would be straightforward and \\nintuitive. \\n\\n We might want aquireReadLock() to automatically zap any locks associated with \\nhostId for which the pid couldn\'t be found, or we might want to break that out \\ninto another method. \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466840\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466840&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466840\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466840_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466840_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/07 22:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-23T22:00:52+0000\'\u003e23\\/Jan\\/07 22:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; I don\'t really understand this interface and so I cannot see how you\u003cbr\\/\u003e\\n&gt; intend to rewrite the IndexFileDeleter as you describe, but I agree\u003cbr\\/\u003e\\n&gt; that if this can be done it is a better solution. So I am okay with\u003cbr\\/\u003e\\n&gt; waiting for this approach to mature into code.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe deletion policy is called on creation of a writer (onInit) and\u003cbr\\/\u003e\\nonce per commit (onCommit) and is given a List of existing commits (=\u003cbr\\/\u003e\\nSegmentInfos instances) in the index.  The policy then decides which\u003cbr\\/\u003e\\ncommits should be removed and IndexFileDeleter translates that request\u003cbr\\/\u003e\\n(using reference counting, because a given index file may still be\u003cbr\\/\u003e\\nreference by commits that are not yet deleted) into which specific\u003cbr\\/\u003e\\nfiles to remove.\u003c\\/p\u003e\\n\\n\u003cp\u003eFor example, onCommit you would typically see a List of length 2: the\u003cbr\\/\u003e\\nprior commit and the new one.  And the default policy\u003cbr\\/\u003e\\n(KeepOnlyLastCommit) would at this point remove the prior one.\u003c\\/p\u003e\\n\\n\u003cp\u003eRealize that the \\\"commit on close\\\" mode (autoCommit=false) for\u003cbr\\/\u003e\\nIndexWriter (that I\'m doing as part of this issue) actually keeps 2\u003cbr\\/\u003e\\nSegmentInfos alive at any given time: first is the segments_N file in\u003cbr\\/\u003e\\nthe index, and second is the \\\"in memory\\\" SegmentInfos that haven\'t yet\u003cbr\\/\u003e\\nbeen committed to a segments_N file.  It\'s only on close when the\u003cbr\\/\u003e\\ncommit takes place that the deleter then deletes the previous\u003cbr\\/\u003e\\nsegments_N commit.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; (I would prefer the DeletionPolicy to be a pluggable \u003cb\u003einterface\u003c\\/b\u003e and\u003cbr\\/\u003e\\n&gt; the IndexFileDeleter to be an internal \u003cb\u003eclass\u003c\\/b\u003e, so that at least we\u003cbr\\/\u003e\\n&gt; do not expose now something that would stand in our way in the\u003cbr\\/\u003e\\n&gt; future. But again, since I do not fully understand your solution\u003cbr\\/\u003e\\n&gt; maybe please bear with me if this is not making sense.)\u003c\\/p\u003e\\n\\n\u003cp\u003eGood point: I agree an interface here is cleaner.  I will use an\u003cbr\\/\u003e\\ninterface (not subclass) and make IndexFileDeleter entirely internal.\u003cbr\\/\u003e\\nThe deletion policy doesn\'t need to see any details of the\u003cbr\\/\u003e\\nIndexFileDeleter class.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466840_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466840_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/07 22:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-23T22:00:52+0000\'\u003e23\\/Jan\\/07 22:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; I don\'t really understand this interface and so I cannot see how you \\n&gt; intend to rewrite the IndexFileDeleter as you describe, but I agree \\n&gt; that if this can be done it is a better solution. So I am okay with \\n&gt; waiting for this approach to mature into code. \\n\\n The deletion policy is called on creation of a writer (onInit) and \\nonce per commit (onCommit) and is given a List of existing commits (= \\nSegmentInfos instances) in the index.  The policy then decides which \\ncommits should be removed and IndexFileDeleter translates that request \\n(using reference counting, because a given index file may still be \\nreference by commits that are not yet deleted) into which specific \\nfiles to remove. \\n\\n For example, onCommit you would typically see a List of length 2: the \\nprior commit and the new one.  And the default policy \\n(KeepOnlyLastCommit) would at this point remove the prior one. \\n\\n Realize that the \\\"commit on close\\\" mode (autoCommit=false) for \\nIndexWriter (that I\'m doing as part of this issue) actually keeps 2 \\nSegmentInfos alive at any given time: first is the segments_N file in \\nthe index, and second is the \\\"in memory\\\" SegmentInfos that haven\'t yet \\nbeen committed to a segments_N file.  It\'s only on close when the \\ncommit takes place that the deleter then deletes the previous \\nsegments_N commit. \\n\\n &gt; (I would prefer the DeletionPolicy to be a pluggable  interface  and \\n&gt; the IndexFileDeleter to be an internal  class , so that at least we \\n&gt; do not expose now something that would stand in our way in the \\n&gt; future. But again, since I do not fully understand your solution \\n&gt; maybe please bear with me if this is not making sense.) \\n\\n Good point: I agree an interface here is cleaner.  I will use an \\ninterface (not subclass) and make IndexFileDeleter entirely internal. \\nThe deletion policy doesn\'t need to see any details of the \\nIndexFileDeleter class.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466846\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466846&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466846\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466846_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466846_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/07 22:18\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-23T22:18:18+0000\'\u003e23\\/Jan\\/07 22:18\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\\n\u003cp\u003e&gt; I found a flaw in my plan. If the read locks are always applied,\u003cbr\\/\u003e\\n&gt; they will slow deletion of obsolete segments for everybody where\u003cbr\\/\u003e\\n&gt; delete-on-last-close currently works as intended. Right now, the\u003cbr\\/\u003e\\n&gt; files are unlinked and disappear as soon as the last reader holding\u003cbr\\/\u003e\\n&gt; them open goes away. With read locks, the unlink op wouldn\'t take\u003cbr\\/\u003e\\n&gt; place if a reader was open.\u003c\\/p\u003e\\n\\n\u003cp\u003eAhh good point.  This is why I don\'t want to risk changes to Lucene\u003cbr\\/\u003e\\ncore: most of the time Lucene\'s \\\"point in time\\\" searching works\u003cbr\\/\u003e\\nperfectly now.  It\'s just NFS (so far) that\'s problematic which is why\u003cbr\\/\u003e\\nI want to keep the solution \\\"external\\\" to Lucene by allowing custom\u003cbr\\/\u003e\\ndeletion policies.  Plus we obviously have alot of deletion policies\u003cbr\\/\u003e\\nto try on NFS.  First do no harm.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; I also spent a good bit of time yesterday further researching the\u003cbr\\/\u003e\\n&gt; subtleties of locks over NFS. Summing up: flock can work, but\u003cbr\\/\u003e\\n&gt; dot-lock files are more reliable.\u003c\\/p\u003e\\n\\n\u003cp\u003eWell, dot-locks (= \\\"create file exclusively\\\") have problems too.\u003cbr\\/\u003e\\nThere have been issues with bugs in at least certain Linux NFS\u003cbr\\/\u003e\\nclients.  And Sun\'s Javadocs on the equivalent Java method,\u003cbr\\/\u003e\\nFile.createNewFile, has a warning about not relying on this for\u003cbr\\/\u003e\\nlocking:\u003c\\/p\u003e\\n\\n\u003cp\u003e  \u003ca href=\\\"http:\\/\\/java.sun.com\\/j2se\\/1.4.2\\/docs\\/api\\/java\\/io\\/File.html#createNewFile(\\\" class=\\\"external-link\\\" rel=\\\"nofollow\\\"\u003ehttp:\\/\\/java.sun.com\\/j2se\\/1.4.2\\/docs\\/api\\/java\\/io\\/File.html#createNewFile(\u003c\\/a\u003e)\u003c\\/p\u003e\\n\\n\u003cp\u003eThis warning is why we created the NativeFSLockFactory for Directory\u003cbr\\/\u003e\\nlocking in the first place.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; So, new proposal:\u003cbr\\/\u003e\\n&gt;\u003cbr\\/\u003e\\n&gt; Add a new public method IndexReader.aquireReadLock(String hostId),\u003cbr\\/\u003e\\n&gt; which would write a dot-lock file to the index directory with\u003cbr\\/\u003e\\n&gt; hostId, a pid, and an incrementing integer spliced into the file\u003cbr\\/\u003e\\n&gt; name. The relevant segments_N file name would be written to the\u003cbr\\/\u003e\\n&gt; lockfile. Calling it would only be necessary on NFS, and an\u003cbr\\/\u003e\\n&gt; exception would occur if the attempt to create the lockfile failed.\u003cbr\\/\u003e\\n&gt;\u003cbr\\/\u003e\\n&gt; The deletions policy would work as in my earlier proposal, and the\u003cbr\\/\u003e\\n&gt; user wouldn\'t have to grok its innards. Troubleshooting stale\u003cbr\\/\u003e\\n&gt; lockfiles by snooping the index directory contents would be\u003cbr\\/\u003e\\n&gt; straightforward and intuitive.\u003cbr\\/\u003e\\n&gt;\u003cbr\\/\u003e\\n&gt; We might want aquireReadLock() to automatically zap any locks\u003cbr\\/\u003e\\n&gt; associated with hostId for which the pid couldn\'t be found, or we\u003cbr\\/\u003e\\n&gt; might want to break that out into another method.\u003c\\/p\u003e\\n\\n\u003cp\u003eOK.  You could implement this in Lucene as a custom deletion policy\u003cbr\\/\u003e\\nonce we get this commmitted (I think this is 6 proposals now for\u003cbr\\/\u003e\\n\\\"deletion policy\\\" for NFS), plus a wrapper around IndexReader.\u003c\\/p\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12466846_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466846_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/07 22:18\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-23T22:18:18+0000\'\u003e23\\/Jan\\/07 22:18\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                   \\n &gt; I found a flaw in my plan. If the read locks are always applied, \\n&gt; they will slow deletion of obsolete segments for everybody where \\n&gt; delete-on-last-close currently works as intended. Right now, the \\n&gt; files are unlinked and disappear as soon as the last reader holding \\n&gt; them open goes away. With read locks, the unlink op wouldn\'t take \\n&gt; place if a reader was open. \\n\\n Ahh good point.  This is why I don\'t want to risk changes to Lucene \\ncore: most of the time Lucene\'s \\\"point in time\\\" searching works \\nperfectly now.  It\'s just NFS (so far) that\'s problematic which is why \\nI want to keep the solution \\\"external\\\" to Lucene by allowing custom \\ndeletion policies.  Plus we obviously have alot of deletion policies \\nto try on NFS.  First do no harm. \\n\\n &gt; I also spent a good bit of time yesterday further researching the \\n&gt; subtleties of locks over NFS. Summing up: flock can work, but \\n&gt; dot-lock files are more reliable. \\n\\n Well, dot-locks (= \\\"create file exclusively\\\") have problems too. \\nThere have been issues with bugs in at least certain Linux NFS \\nclients.  And Sun\'s Javadocs on the equivalent Java method, \\nFile.createNewFile, has a warning about not relying on this for \\nlocking: \\n\\n    http:\\/\\/java.sun.com\\/j2se\\/1.4.2\\/docs\\/api\\/java\\/io\\/File.html#createNewFile( ) \\n\\n This warning is why we created the NativeFSLockFactory for Directory \\nlocking in the first place. \\n\\n &gt; So, new proposal: \\n&gt; \\n&gt; Add a new public method IndexReader.aquireReadLock(String hostId), \\n&gt; which would write a dot-lock file to the index directory with \\n&gt; hostId, a pid, and an incrementing integer spliced into the file \\n&gt; name. The relevant segments_N file name would be written to the \\n&gt; lockfile. Calling it would only be necessary on NFS, and an \\n&gt; exception would occur if the attempt to create the lockfile failed. \\n&gt; \\n&gt; The deletions policy would work as in my earlier proposal, and the \\n&gt; user wouldn\'t have to grok its innards. Troubleshooting stale \\n&gt; lockfiles by snooping the index directory contents would be \\n&gt; straightforward and intuitive. \\n&gt; \\n&gt; We might want aquireReadLock() to automatically zap any locks \\n&gt; associated with hostId for which the pid couldn\'t be found, or we \\n&gt; might want to break that out into another method. \\n\\n OK.  You could implement this in Lucene as a custom deletion policy \\nonce we get this commmitted (I think this is 6 proposals now for \\n\\\"deletion policy\\\" for NFS), plus a wrapper around IndexReader. \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466911\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466911&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466911\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12466911_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466911_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'24\\/Jan\\/07 05:55\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-24T05:55:36+0000\'\u003e24\\/Jan\\/07 05:55\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eOn Jan 23, 2007, at 2:19 PM, Michael McCandless (JIRA) wrote:\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; First do no harm.\u003c\\/p\u003e\\n\\n\u003cp\u003eIf that was really your guiding philosophy, you would never change anything.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; And Sun\'s Javadocs on the equivalent Java method, File.createNewFile, has a\u003cbr\\/\u003e\\n&gt; warning about not relying on this for locking:\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt;   \u003ca href=\\\"http:\\/\\/java.sun.com\\/j2se\\/1.4.2\\/docs\\/api\\/java\\/io\\/File.html#createNewFile(\\\" class=\\\"external-link\\\" rel=\\\"nofollow\\\"\u003ehttp:\\/\\/java.sun.com\\/j2se\\/1.4.2\\/docs\\/api\\/java\\/io\\/File.html#createNewFile(\u003c\\/a\u003e)\u003c\\/p\u003e\\n\\n\u003cp\u003eThat page recommends that you use FileLock instead, which maps to Fcntl on\u003cbr\\/\u003e\\nsome systems.  The FreeBSD manpage on Fcntl uses less delicate language than\u003cbr\\/\u003e\\nSun in pointing out the drawbacks:\u003c\\/p\u003e\\n\\n\u003cp\u003e     This interface follows the completely stupid semantics of System V and\u003cbr\\/\u003e\\n     IEEE Std 1003.1-1988 (``POSIX.1\'\') that require that all locks associated\u003cbr\\/\u003e\\n     with a file for a given process are removed when any file descriptor for\u003cbr\\/\u003e\\n     that file is closed by that process.  This semantic means that applica-\u003cbr\\/\u003e\\n     tions must be aware of any files that a subroutine library may access.\u003c\\/p\u003e\\n\\n\u003cp\u003eTrying to guarantee that kind of discipline from library code severely limits\u003cbr\\/\u003e\\nyour options.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; This warning is why we created the NativeFSLockFactory for Directory locking\u003cbr\\/\u003e\\n&gt; in the first place.\u003c\\/p\u003e\\n\\n\u003cp\u003eTake a look at this bug, which explains how that warning got added.\u003c\\/p\u003e\\n\\n\u003cp\u003e\u003ca href=\\\"http:\\/\\/bugs.sun.com\\/bugdatabase\\/view_bug.do?bug_id=4676183\\\" class=\\\"external-link\\\" rel=\\\"nofollow\\\"\u003ehttp:\\/\\/bugs.sun.com\\/bugdatabase\\/view_bug.do?bug_id=4676183\u003c\\/a\u003e\u003c\\/p\u003e\\n\\n\u003cp\u003eRead the comment below &#8211; the problem with the \\\"protocol\\\" they warn you\u003cbr\\/\u003e\\nagainst using is with deleteOnExit(), not createNewFile().  I think you\'re\u003cbr\\/\u003e\\nbetter off with dot-locks.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; OK.  You could implement this in Lucene as a custom deletion policy once we\u003cbr\\/\u003e\\n&gt; get this commmitted (I think this is 6 proposals now for \\\"deletion policy\\\"\u003cbr\\/\u003e\\n&gt; for NFS), plus a wrapper around IndexReader.\u003c\\/p\u003e\\n\\n\u003cp\u003eThis was the response I got on the KinoSearch list:\u003c\\/p\u003e\\n\\n\u003cp\u003e    We do not enable NFS writes, only reads (which is why Slashdot is able to\u003cbr\\/\u003e\\n    reliably use NFS for its heavy load \u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/smile.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e.  So I don\'t think that will work,\u003cbr\\/\u003e\\n    if I understand you correctly.\u003c\\/p\u003e\\n\\n\u003cp\u003eLack of bulletproof support for NFS ain\'t gonna hold up my next release any\u003cbr\\/\u003e\\nlonger.  What a freakin\' nightmare...\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12466911_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466911_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'24\\/Jan\\/07 05:55\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-24T05:55:36+0000\'\u003e24\\/Jan\\/07 05:55\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    On Jan 23, 2007, at 2:19 PM, Michael McCandless (JIRA) wrote: \\n\\n &gt; First do no harm. \\n\\n If that was really your guiding philosophy, you would never change anything. \\n\\n &gt; And Sun\'s Javadocs on the equivalent Java method, File.createNewFile, has a \\n&gt; warning about not relying on this for locking: \\n&gt;  \\n&gt;    http:\\/\\/java.sun.com\\/j2se\\/1.4.2\\/docs\\/api\\/java\\/io\\/File.html#createNewFile( ) \\n\\n That page recommends that you use FileLock instead, which maps to Fcntl on \\nsome systems.  The FreeBSD manpage on Fcntl uses less delicate language than \\nSun in pointing out the drawbacks: \\n\\n      This interface follows the completely stupid semantics of System V and \\n     IEEE Std 1003.1-1988 (``POSIX.1\'\') that require that all locks associated \\n     with a file for a given process are removed when any file descriptor for \\n     that file is closed by that process.  This semantic means that applica- \\n     tions must be aware of any files that a subroutine library may access. \\n\\n Trying to guarantee that kind of discipline from library code severely limits \\nyour options. \\n\\n &gt; This warning is why we created the NativeFSLockFactory for Directory locking \\n&gt; in the first place. \\n\\n Take a look at this bug, which explains how that warning got added. \\n\\n  http:\\/\\/bugs.sun.com\\/bugdatabase\\/view_bug.do?bug_id=4676183  \\n\\n Read the comment below &#8211; the problem with the \\\"protocol\\\" they warn you \\nagainst using is with deleteOnExit(), not createNewFile().  I think you\'re \\nbetter off with dot-locks. \\n\\n &gt; OK.  You could implement this in Lucene as a custom deletion policy once we \\n&gt; get this commmitted (I think this is 6 proposals now for \\\"deletion policy\\\" \\n&gt; for NFS), plus a wrapper around IndexReader. \\n\\n This was the response I got on the KinoSearch list: \\n\\n     We do not enable NFS writes, only reads (which is why Slashdot is able to \\n    reliably use NFS for its heavy load  .  So I don\'t think that will work, \\n    if I understand you correctly. \\n\\n Lack of bulletproof support for NFS ain\'t gonna hold up my next release any \\nlonger.  What a freakin\' nightmare...              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12466926\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12466926&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12466926\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12466926_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466926_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'24\\/Jan\\/07 07:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-24T07:00:39+0000\'\u003e24\\/Jan\\/07 07:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; The deletion policy is called on creation of a writer (onInit) and\u003cbr\\/\u003e\\n&gt; once per commit (onCommit) and is given a List of existing commits (=\u003cbr\\/\u003e\\n&gt; SegmentInfos instances) in the index.  The policy then decides which\u003cbr\\/\u003e\\n&gt; commits should be removed and IndexFileDeleter translates that request\u003cbr\\/\u003e\\n&gt; (using reference counting, because a given index file may still be\u003cbr\\/\u003e\\n&gt; reference by commits that are not yet deleted) into which specific\u003cbr\\/\u003e\\n&gt; files to remove.\u003cbr\\/\u003e\\n&gt; ...\u003c\\/p\u003e\\n\\n\u003cp\u003eMichael thanks for explaining this further - yes, now it makes sense to me. \u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12466926_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12466926_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'24\\/Jan\\/07 07:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-01-24T07:00:39+0000\'\u003e24\\/Jan\\/07 07:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; The deletion policy is called on creation of a writer (onInit) and \\n&gt; once per commit (onCommit) and is given a List of existing commits (= \\n&gt; SegmentInfos instances) in the index.  The policy then decides which \\n&gt; commits should be removed and IndexFileDeleter translates that request \\n&gt; (using reference counting, because a given index file may still be \\n&gt; reference by commits that are not yet deleted) into which specific \\n&gt; files to remove. \\n&gt; ... \\n\\n Michael thanks for explaining this further - yes, now it makes sense to me.               \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12477339\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12477339&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12477339\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12477339_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12477339_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'02\\/Mar\\/07 15:52\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-02T15:52:01+0000\'\u003e02\\/Mar\\/07 15:52\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eOK, I\'ve attached a patch to implement \\\"commit on close\\\" and \\\"custom\u003cbr\\/\u003e\\ndeletion policies\\\".  The design is exactly what\'s described above.\u003c\\/p\u003e\\n\\n\u003cp\u003eThere are no changes to the file format.\u003c\\/p\u003e\\n\\n\u003cp\u003eAll tests pass and I\'ve added additional tests for this new\u003cbr\\/\u003e\\nfunctionality.\u003c\\/p\u003e\\n\\n\u003cp\u003eSummary of the external changes:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eFor \\\"commit on close\\\":\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eAdded new IndexWriter constructors that take \\\"autoCommit\\\"\u003cbr\\/\u003e\\n      boolean: if it\'s false, then readers will not see any actions\u003cbr\\/\u003e\\n      done by this writer (no new segments_N is written) until\u003cbr\\/\u003e\\n      writer.close() is called.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eAdded IndexWriter.abort() which closes the writer without\u003cbr\\/\u003e\\n      committing, cleaning up any temp files it had added to the\u003cbr\\/\u003e\\n      index.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eFor \\\"custom deletion policies\\\":\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eCreated IndexDeletionPolicy interface and added constructors to\u003cbr\\/\u003e\\n      IndexReader\\/IndexWriter allowing you to specify a deletion\u003cbr\\/\u003e\\n      policy.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eCreated IndexCommitPoint interface: this is passed to the\u003cbr\\/\u003e\\n      deletion policy to represent each commit.  The policy calls the\u003cbr\\/\u003e\\n      delete method on this interface to remove a commit.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eCreated one deletion policy (KeepOnlyLastCommitDeletionPolicy)\u003cbr\\/\u003e\\n      and made that the default policy.  (The unit test for this has\u003cbr\\/\u003e\\n      other \\\"interesting\\\" policies like \\\"delete by age since this\u003cbr\\/\u003e\\n      commit was obsoleted\\\" initially discussed on java-dev.)\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eSummary of internal changes:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eCreated \\\"files()\\\" method in SegmentInfo (and changed\u003cbr\\/\u003e\\n    SegmentReader.files() to use it).\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eChanged IndexFileDeleter to use reference counting to keep track\u003cbr\\/\u003e\\n    of which files are deletable because no commit(s) (nor the\u003cbr\\/\u003e\\n    in-memory SegmentInfos) reference them.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003e    This is a nice simplification of IndexFileDeleter: previously it\u003cbr\\/\u003e\\n    had detailed knowledge about which files, extensions, etc., to\u003cbr\\/\u003e\\n    look for and delete.  Now it has far less of that because it\u003cbr\\/\u003e\\n    relies entirely on SegmentInfo.files() to compute that.\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eChanged IndexReader\\/IndexWriter to not directly delete files and\u003cbr\\/\u003e\\n    instead notify IndexFileDeleter when there has been a change to\u003cbr\\/\u003e\\n    the in-memory SegmentInfos.  The deleter then incref\\/decref\'s to\u003cbr\\/\u003e\\n    determine what files can safely be deleted.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003e    This is also a nice simplification for the same reason as above:\u003cbr\\/\u003e\\n    now the writers just make changes to SegmentInfo(s) without having\u003cbr\\/\u003e\\n    to compute\\/track the consequences to specific index files.\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eSimplified the fix for \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-702\\\" title=\\\"Disk full during addIndexes(Directory[]) can corrupt index\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-702\\\"\u003e\u003cdel\u003eLUCENE-702\u003c\\/del\u003e\u003c\\/a\u003e (addIndexes corrupts index on\u003cbr\\/\u003e\\n    disk full) to just temporarily set autoCommit=false if it\'s not\u003cbr\\/\u003e\\n    already.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eAdded get\\/setDefaultInfoStream to IndexWriter so you could see\u003cbr\\/\u003e\\n    things that happen during IndexWriter constructor.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eNo longer store\\/propogate persistent IndexFileDelter inside\u003cbr\\/\u003e\\n    IndexReader (removed protected method get\\/setDeleter).  This is a\u003cbr\\/\u003e\\n    nice simplification because the deleter is now only needed briefly\u003cbr\\/\u003e\\n    during \\\"commit()\\\".\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eReworked the toplevel javadoc for IndexWriter.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eAdded try\\/finally to remove a partially written segments_N if we\u003cbr\\/\u003e\\n    hit IOException when trying to write it.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eOther small change (small refactoring, fixes to javadocs, fixed\u003cbr\\/\u003e\\n    spelling, etc).\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12477339_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12477339_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'02\\/Mar\\/07 15:52\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-02T15:52:01+0000\'\u003e02\\/Mar\\/07 15:52\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    OK, I\'ve attached a patch to implement \\\"commit on close\\\" and \\\"custom \\ndeletion policies\\\".  The design is exactly what\'s described above. \\n\\n There are no changes to the file format. \\n\\n All tests pass and I\'ve added additional tests for this new \\nfunctionality. \\n\\n Summary of the external changes: \\n\\n \\n\\t For \\\"commit on close\\\": \\n \\n\\n\\n \\n\\t Added new IndexWriter constructors that take \\\"autoCommit\\\" \\n      boolean: if it\'s false, then readers will not see any actions \\n      done by this writer (no new segments_N is written) until \\n      writer.close() is called. \\n \\n\\n\\n \\n\\t Added IndexWriter.abort() which closes the writer without \\n      committing, cleaning up any temp files it had added to the \\n      index. \\n \\n\\n\\n \\n\\t For \\\"custom deletion policies\\\": \\n \\n\\n\\n \\n\\t Created IndexDeletionPolicy interface and added constructors to \\n      IndexReader\\/IndexWriter allowing you to specify a deletion \\n      policy. \\n \\n\\n\\n \\n\\t Created IndexCommitPoint interface: this is passed to the \\n      deletion policy to represent each commit.  The policy calls the \\n      delete method on this interface to remove a commit. \\n \\n\\n\\n \\n\\t Created one deletion policy (KeepOnlyLastCommitDeletionPolicy) \\n      and made that the default policy.  (The unit test for this has \\n      other \\\"interesting\\\" policies like \\\"delete by age since this \\n      commit was obsoleted\\\" initially discussed on java-dev.) \\n \\n\\n\\n Summary of internal changes: \\n\\n \\n\\t Created \\\"files()\\\" method in SegmentInfo (and changed \\n    SegmentReader.files() to use it). \\n \\n\\n\\n \\n\\t Changed IndexFileDeleter to use reference counting to keep track \\n    of which files are deletable because no commit(s) (nor the \\n    in-memory SegmentInfos) reference them. \\n \\n\\n\\n     This is a nice simplification of IndexFileDeleter: previously it \\n    had detailed knowledge about which files, extensions, etc., to \\n    look for and delete.  Now it has far less of that because it \\n    relies entirely on SegmentInfo.files() to compute that. \\n\\n \\n\\t Changed IndexReader\\/IndexWriter to not directly delete files and \\n    instead notify IndexFileDeleter when there has been a change to \\n    the in-memory SegmentInfos.  The deleter then incref\\/decref\'s to \\n    determine what files can safely be deleted. \\n \\n\\n\\n     This is also a nice simplification for the same reason as above: \\n    now the writers just make changes to SegmentInfo(s) without having \\n    to compute\\/track the consequences to specific index files. \\n\\n \\n\\t Simplified the fix for   LUCENE-702   (addIndexes corrupts index on \\n    disk full) to just temporarily set autoCommit=false if it\'s not \\n    already. \\n \\n\\n\\n \\n\\t Added get\\/setDefaultInfoStream to IndexWriter so you could see \\n    things that happen during IndexWriter constructor. \\n \\n\\n\\n \\n\\t No longer store\\/propogate persistent IndexFileDelter inside \\n    IndexReader (removed protected method get\\/setDeleter).  This is a \\n    nice simplification because the deleter is now only needed briefly \\n    during \\\"commit()\\\". \\n \\n\\n\\n \\n\\t Reworked the toplevel javadoc for IndexWriter. \\n \\n\\n\\n \\n\\t Added try\\/finally to remove a partially written segments_N if we \\n    hit IOException when trying to write it. \\n \\n\\n\\n \\n\\t Other small change (small refactoring, fixes to javadocs, fixed \\n    spelling, etc). \\n \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12478728\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12478728&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12478728\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12478728_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12478728_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'07\\/Mar\\/07 09:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-07T09:56:35+0000\'\u003e07\\/Mar\\/07 09:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eRebased the patch to the current trunk.  I plan to commit this probably end of this week.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12478728_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12478728_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'07\\/Mar\\/07 09:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-07T09:56:35+0000\'\u003e07\\/Mar\\/07 09:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Rebased the patch to the current trunk.  I plan to commit this probably end of this week.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12479511\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12479511&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12479511\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12479511_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12479511_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/07 06:26\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-09T06:26:45+0000\'\u003e09\\/Mar\\/07 06:26\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eMike, patching take2 on current trunk fails for IndexFileDeleter.java.\u003cbr\\/\u003e\\n  patching file src\\/java\\/org\\/apache\\/lucene\\/index\\/IndexFileDeleter.java\u003cbr\\/\u003e\\n    Hunk #1 FAILED at 18.\u003cbr\\/\u003e\\nAlso some noise in SegmentInfo.java\u003cbr\\/\u003e\\n  patching file src\\/java\\/org\\/apache\\/lucene\\/index\\/SegmentInfo.java\u003cbr\\/\u003e\\n    Hunk #7 succeeded at 291 (offset 3 lines).\u003c\\/p\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12479511_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12479511_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/07 06:26\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-09T06:26:45+0000\'\u003e09\\/Mar\\/07 06:26\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Mike, patching take2 on current trunk fails for IndexFileDeleter.java. \\n  patching file src\\/java\\/org\\/apache\\/lucene\\/index\\/IndexFileDeleter.java \\n    Hunk #1 FAILED at 18. \\nAlso some noise in SegmentInfo.java \\n  patching file src\\/java\\/org\\/apache\\/lucene\\/index\\/SegmentInfo.java \\n    Hunk #7 succeeded at 291 (offset 3 lines). \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12479547\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12479547&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12479547\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12479547_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12479547_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/07 09:44\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-09T09:44:04+0000\'\u003e09\\/Mar\\/07 09:44\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eWoops, looks like the commit for \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-825\\\" title=\\\"NullPointerException from SegmentInfos.FindSegmentsFile.run() if FSDirectory.list() returns NULL \\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-825\\\"\u003e\u003cdel\u003eLUCENE-825\u003c\\/del\u003e\u003c\\/a\u003e messed up the patch.  OK I updated and re-diff\'d and attached take3.\u003c\\/p\u003e\\n\\n\u003cp\u003eIt\'s too bad we don\'t have a patch that\'s better integrated with svn such that if even you have a more recent svn revision checked out, applying the patch would do so back against the revision it was based on, and then svn would merge the changes committed to the trunk since then.  In this case an svn update on the checkout with the diffs produced no conflicts, so if we had such a combined patch tool, it would have worked find here.  I suppose the person applying the patch could first \\\"svn update\\\" to its base revision, apply the patch, then svn up, but that\'s kind of a hassle\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12479547_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12479547_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/07 09:44\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-09T09:44:04+0000\'\u003e09\\/Mar\\/07 09:44\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Woops, looks like the commit for   LUCENE-825   messed up the patch.  OK I updated and re-diff\'d and attached take3. \\n\\n It\'s too bad we don\'t have a patch that\'s better integrated with svn such that if even you have a more recent svn revision checked out, applying the patch would do so back against the revision it was based on, and then svn would merge the changes committed to the trunk since then.  In this case an svn update on the checkout with the diffs produced no conflicts, so if we had such a combined patch tool, it would have worked find here.  I suppose the person applying the patch could first \\\"svn update\\\" to its base revision, apply the patch, then svn up, but that\'s kind of a hassle              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12481100\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12481100&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12481100\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12481100_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12481100_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Mar\\/07 10:08\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-15T10:08:50+0000\'\u003e15\\/Mar\\/07 10:08\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI was too slow in reviewing this, so while I was studying the new code it was committed... \u003c\\/p\u003e\\n\\n\u003cp\u003eAnyhow I have a few comments and a question - I think JIRA \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-710\\\" title=\\\"Implement &quot;point in time&quot; searching without relying on filesystem semantics\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-710\\\"\u003e\u003cdel\u003eLUCENE-710\u003c\\/del\u003e\u003c\\/a\u003e is still the place for this discussion even though the issue is already resolved. \u003c\\/p\u003e\\n\\n\u003cp\u003eThe attached 710.comments.diff  implements a few suggested changes.\u003c\\/p\u003e\\n\\n\u003cp\u003eI like the definition and use of IndexDeletePolicy and CommitPoint - this is very flexible and clear, and would indeed allow to implement NFS suited logic. These two concepts are central to implementing such logic, and I thought their Javadocs should be enhanced (included in the attached).\u003c\\/p\u003e\\n\\n\u003cp\u003eIndexFileDeleter - it is nice that this became non public and somewhat simpler. I added some internal documentation (not javadocs) in that file as I learned how it works. I think these would be useful for others diving into this code. I also modified some variable names for clarity (in the attached). \u003c\\/p\u003e\\n\\n\u003cp\u003eI don\'t understand yet why we allow a deletion policy to delete \u003cb\u003eall\u003c\\/b\u003e commits (including the most recent) - TestDeletionPolicy explains this as: \\\"This is useful for adding to a big index w\\/ autoCommit =false when you know readers are not using it.\\\" - so, would I risk losing the big index should uncommited additions fail? what does one earn by this? I first thought we should prevent (exception) deleting the most recent commit, but I must be missing something - could you elaborate on this?\u003c\\/p\u003e\\n\\n\u003cp\u003echeckpoints() is another - more internal - new concept in this code. At writing this I don\'t fully understand it. IndexWriter has its own checkpoint() method, but it also calls IndexFileDeleter.checkpoint(). IndexReader only calls IndexFileDeletion.checkpoint() - it does not have a checkpoint() itself.   ...mmm... For IndexReader it makes sense since it always commits only at close(), or at explicit calls to commit(). Perhaps I understand it better now... Ok, I added some documentation for this in IndexWriter, I think it would also help others. (in the attached.)\u003c\\/p\u003e\\n\\n\u003cp\u003eThis issue also introduced constants for file names - hasSingleNorms (i.e. nrm)  and SINGLE_NORMS_EXTENSION (.fN) were confusing\\/collating - so I modified .fN to PLAIN_NORMS_EXTENSION.\u003c\\/p\u003e\\n\\n\u003cp\u003eThis issue moved some files logic SegmentInfo. The -1\\/1\\/0 logic and especially with norms is confusing, and at least I have to re-read the code carefully each time again and again to be convinced that it is correct. It would be nice when we can get rid of some of the backward compatibility cases here. Anyhow I added some documentation and also replaced the -1\\/1\\/0 with constants, I think this makes it easier to understand.\u003c\\/p\u003e\\n\\n\u003cp\u003eRegards,\u003cbr\\/\u003e\\nDoron\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12481100_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12481100_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Mar\\/07 10:08\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-15T10:08:50+0000\'\u003e15\\/Mar\\/07 10:08\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I was too slow in reviewing this, so while I was studying the new code it was committed...  \\n\\n Anyhow I have a few comments and a question - I think JIRA   LUCENE-710   is still the place for this discussion even though the issue is already resolved.  \\n\\n The attached 710.comments.diff  implements a few suggested changes. \\n\\n I like the definition and use of IndexDeletePolicy and CommitPoint - this is very flexible and clear, and would indeed allow to implement NFS suited logic. These two concepts are central to implementing such logic, and I thought their Javadocs should be enhanced (included in the attached). \\n\\n IndexFileDeleter - it is nice that this became non public and somewhat simpler. I added some internal documentation (not javadocs) in that file as I learned how it works. I think these would be useful for others diving into this code. I also modified some variable names for clarity (in the attached).  \\n\\n I don\'t understand yet why we allow a deletion policy to delete  all  commits (including the most recent) - TestDeletionPolicy explains this as: \\\"This is useful for adding to a big index w\\/ autoCommit =false when you know readers are not using it.\\\" - so, would I risk losing the big index should uncommited additions fail? what does one earn by this? I first thought we should prevent (exception) deleting the most recent commit, but I must be missing something - could you elaborate on this? \\n\\n checkpoints() is another - more internal - new concept in this code. At writing this I don\'t fully understand it. IndexWriter has its own checkpoint() method, but it also calls IndexFileDeleter.checkpoint(). IndexReader only calls IndexFileDeletion.checkpoint() - it does not have a checkpoint() itself.   ...mmm... For IndexReader it makes sense since it always commits only at close(), or at explicit calls to commit(). Perhaps I understand it better now... Ok, I added some documentation for this in IndexWriter, I think it would also help others. (in the attached.) \\n\\n This issue also introduced constants for file names - hasSingleNorms (i.e. nrm)  and SINGLE_NORMS_EXTENSION (.fN) were confusing\\/collating - so I modified .fN to PLAIN_NORMS_EXTENSION. \\n\\n This issue moved some files logic SegmentInfo. The -1\\/1\\/0 logic and especially with norms is confusing, and at least I have to re-read the code carefully each time again and again to be convinced that it is correct. It would be nice when we can get rid of some of the backward compatibility cases here. Anyhow I added some documentation and also replaced the -1\\/1\\/0 with constants, I think this makes it easier to understand. \\n\\n Regards, \\nDoron              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12481122\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12481122&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12481122\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12481122_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12481122_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Mar\\/07 12:14\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-15T12:14:57+0000\'\u003e15\\/Mar\\/07 12:14\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eThanks for the review Doron!\u003c\\/p\u003e\\n\\n\u003cp\u003eYour added comments &amp; improvements to the variable names are\u003cbr\\/\u003e\\nexcellent.  I especially like the new constants (YES, NO, CHECK_DIR,\u003cbr\\/\u003e\\netc.) in SegmentInfo.  I\'ve tweaked your patch here and there, and\u003cbr\\/\u003e\\nattached a modified patch (710.review.take2.diff).  If you\'re happy\u003cbr\\/\u003e\\nwith that then go ahead and commit it?\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; IndexFileDeleter - it is nice that this became non public and somewhat\u003cbr\\/\u003e\\n&gt; simpler.\u003c\\/p\u003e\\n\\n\u003cp\u003eI especially like that this class now has very little knowledge of\u003cbr\\/\u003e\\nwhat files \\\"belong\\\" to an index, especially compared to before.  That\u003cbr\\/\u003e\\nknowledge has now been consolidated under SegmentInfo which I think is\u003cbr\\/\u003e\\nthe right place for it.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; I don\'t understand yet why we allow a deletion policy to delete\u003cbr\\/\u003e\\n&gt; \u003cb\u003eall\u003c\\/b\u003e commits (including the most recent) - TestDeletionPolicy\u003cbr\\/\u003e\\n&gt; explains this as: \\\"This is useful for adding to a big index w\\/\u003cbr\\/\u003e\\n&gt; autoCommit =false when you know readers are not using it.\\\" - so,\u003cbr\\/\u003e\\n&gt; would I risk losing the big index should uncommited additions fail?\u003cbr\\/\u003e\\n&gt; what does one earn by this? I first thought we should prevent\u003cbr\\/\u003e\\n&gt; (exception) deleting the most recent commit, but I must be missing\u003cbr\\/\u003e\\n&gt; something - could you elaborate on this?\u003c\\/p\u003e\\n\\n\u003cp\u003eThe use case I was thinking of is: say you already have a large index\u003cbr\\/\u003e\\nand then you need to add a bunch more docs to it.  If you are not\u003cbr\\/\u003e\\nallowed to delete the starting commit, then, you will consume\u003cbr\\/\u003e\\nsubstantially more disk space as you are building your index because\u003cbr\\/\u003e\\nthe large segments at the start can\'t be removed.  This would have\u003cbr\\/\u003e\\nmade the \\\"autoCommit false\\\" case unnecessarily worse than the\u003cbr\\/\u003e\\n\\\"autoCommit true\\\" case.  If for a given application the developer is\u003cbr\\/\u003e\\nconcerned about safety (losing index due to crash), then the normal\u003cbr\\/\u003e\\ndefault policy should be used.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; This issue moved some files logic SegmentInfo. The -1\\/1\\/0 logic and\u003cbr\\/\u003e\\n&gt; especially with norms is confusing, and at least I have to re-read\u003cbr\\/\u003e\\n&gt; the code carefully each time again and again to be convinced that it\u003cbr\\/\u003e\\n&gt; is correct. It would be nice when we can get rid of some of the\u003cbr\\/\u003e\\n&gt; backward compatibility cases here. Anyhow I added some documentation\u003cbr\\/\u003e\\n&gt; and also replaced the -1\\/1\\/0 with constants, I think this makes it\u003cbr\\/\u003e\\n&gt; easier to understand.\u003c\\/p\u003e\\n\\n\u003cp\u003eYes the backwards compatibility code (for pre-2.1 indices) is complex.\u003cbr\\/\u003e\\nThe good news is by the time we release this in 2.2, most indices that\u003cbr\\/\u003e\\nupgrade to 2.2 will be 2.1.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12481122_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12481122_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Mar\\/07 12:14\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-15T12:14:57+0000\'\u003e15\\/Mar\\/07 12:14\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Thanks for the review Doron! \\n\\n Your added comments &amp; improvements to the variable names are \\nexcellent.  I especially like the new constants (YES, NO, CHECK_DIR, \\netc.) in SegmentInfo.  I\'ve tweaked your patch here and there, and \\nattached a modified patch (710.review.take2.diff).  If you\'re happy \\nwith that then go ahead and commit it? \\n\\n &gt; IndexFileDeleter - it is nice that this became non public and somewhat \\n&gt; simpler. \\n\\n I especially like that this class now has very little knowledge of \\nwhat files \\\"belong\\\" to an index, especially compared to before.  That \\nknowledge has now been consolidated under SegmentInfo which I think is \\nthe right place for it. \\n\\n &gt; I don\'t understand yet why we allow a deletion policy to delete \\n&gt;  all  commits (including the most recent) - TestDeletionPolicy \\n&gt; explains this as: \\\"This is useful for adding to a big index w\\/ \\n&gt; autoCommit =false when you know readers are not using it.\\\" - so, \\n&gt; would I risk losing the big index should uncommited additions fail? \\n&gt; what does one earn by this? I first thought we should prevent \\n&gt; (exception) deleting the most recent commit, but I must be missing \\n&gt; something - could you elaborate on this? \\n\\n The use case I was thinking of is: say you already have a large index \\nand then you need to add a bunch more docs to it.  If you are not \\nallowed to delete the starting commit, then, you will consume \\nsubstantially more disk space as you are building your index because \\nthe large segments at the start can\'t be removed.  This would have \\nmade the \\\"autoCommit false\\\" case unnecessarily worse than the \\n\\\"autoCommit true\\\" case.  If for a given application the developer is \\nconcerned about safety (losing index due to crash), then the normal \\ndefault policy should be used. \\n\\n &gt; This issue moved some files logic SegmentInfo. The -1\\/1\\/0 logic and \\n&gt; especially with norms is confusing, and at least I have to re-read \\n&gt; the code carefully each time again and again to be convinced that it \\n&gt; is correct. It would be nice when we can get rid of some of the \\n&gt; backward compatibility cases here. Anyhow I added some documentation \\n&gt; and also replaced the -1\\/1\\/0 with constants, I think this makes it \\n&gt; easier to understand. \\n\\n Yes the backwards compatibility code (for pre-2.1 indices) is complex. \\nThe good news is by the time we release this in 2.2, most indices that \\nupgrade to 2.2 will be 2.1.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12481290\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12481290&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12481290\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12481290_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12481290_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Mar\\/07 19:30\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-15T19:30:03+0000\'\u003e15\\/Mar\\/07 19:30\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; If for a given application the developer is concerned \u003cbr\\/\u003e\\n&gt; about safety (losing index due to crash), then the \u003cbr\\/\u003e\\n&gt; normal default policy should be used. \u003c\\/p\u003e\\n\\n\u003cp\u003eSpooky... what if onCommit() also deletes all commits?  \u003cbr\\/\u003e\\n(Might this be a pit for users to fall in...?)\u003c\\/p\u003e\\n\\n\u003cp\u003eI added warnings about this in IndexDeletionPolicy methods.\u003c\\/p\u003e\\n\\n\u003cp\u003eJust commiited review.take2 + these comments.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12481290_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12481290_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Mar\\/07 19:30\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-15T19:30:03+0000\'\u003e15\\/Mar\\/07 19:30\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; If for a given application the developer is concerned  \\n&gt; about safety (losing index due to crash), then the  \\n&gt; normal default policy should be used.  \\n\\n Spooky... what if onCommit() also deletes all commits?   \\n(Might this be a pit for users to fall in...?) \\n\\n I added warnings about this in IndexDeletionPolicy methods. \\n\\n Just commiited review.take2 + these comments.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12481346\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-710?focusedCommentId=12481346&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12481346\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12481346_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12481346_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Mar\\/07 22:31\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-15T22:31:12+0000\'\u003e15\\/Mar\\/07 22:31\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; I added warnings about this in IndexDeletionPolicy methods.\u003c\\/p\u003e\\n\\n\u003cp\u003eI think that\'s good.  Thanks!\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12481346_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12481346_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Mar\\/07 22:31\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-15T22:31:12+0000\'\u003e15\\/Mar\\/07 22:31\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; I added warnings about this in IndexDeletionPolicy methods. \\n\\n I think that\'s good.  Thanks!              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\"";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["scope-filter-data"]="{\"createScopeActions\":[],\"scopes\":[]}";
WRM._unparsedData["sidebar-collapsed-by-default"]="true";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:can-manage"]="false";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:with-icons"]="false";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:shortcuts"]="[]";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:project-id"]="12310110";
WRM._unparsedData["sidebar-id"]="\"\u003cdiv class=\\\"aui-sidebar  projects-sidebar sidebar-pending\\\" \u003e\u003cdiv class=\\\"aui-sidebar-wrapper\\\"\u003e\u003cdiv class=\\\"aui-sidebar-body\\\"\u003e\u003cheader class=\\\"aui-page-header\\\"\u003e\u003cdiv class=\\\"aui-page-header-inner\\\"\u003e\u003cdiv class=\\\"aui-page-header-image\\\"\u003e\u003ca href=\\\"\\/jira\\/projects\\/LUCENE\\/summary\\\" title=\\\"Lucene - Core\\\" class=\\\"jira-project-avatar\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-large aui-avatar-project\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"\\/jira\\/secure\\/projectavatar?pid=12310110&amp;avatarId=10061\\\" alt=\\\"Lucene - Core\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e\u003cimg src=\\\"data:image\\/svg+xml;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI\\/Pg0KPCEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDE4LjEuMSwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgIC0tPg0KPHN2ZyB2ZXJzaW9uPSIxLjEiIGlkPSJMYXllcl8xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4PSIwcHgiIHk9IjBweCINCgkgdmlld0JveD0iMCAwIDMwMCAzMDAiIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMwMCAzMDA7IiB4bWw6c3BhY2U9InByZXNlcnZlIj4NCjxnIGlkPSJMYXllcl8yIj4NCgk8cGF0aCBzdHlsZT0iZmlsbDojRjc5MjMyOyIgZD0iTTE1MCwwQzY2LjY2NywwLDAsNjYuNjY3LDAsMTUwczY2LjY2NywxNTAsMTUwLDE1MHMxNTAtNjYuNjY3LDE1MC0xNTBTMjMzLjMzMywwLDE1MCwweg0KCQkgTTEzNi42NjcsMTc4LjMzM0wxMjUsMTkwbC00MS42NjctNDBMOTUsMTM4LjMzM2wzMC0zMEwxMzYuNjY3LDEyMGwtMzAsMzBMMTM2LjY2NywxNzguMzMzeiBNMjA1LDE2MS42NjdsLTMwLDMwTDE2My4zMzMsMTgwDQoJCWwzMC0zMGwtMzAtMzBMMTc1LDEwOC4zMzNMMjE2LjY2NywxNTBMMjA1LDE2MS42Njd6Ii8+DQo8L2c+DQo8Zz4NCgk8cG9seWdvbiBzdHlsZT0iZmlsbDojRkZGRkZGOyIgcG9pbnRzPSIxNzUsMTkxLjY2NyAyMDUsMTYxLjY2NyAyMTYuNjY3LDE1MCAxNzUsMTA4LjMzMyAxNjMuMzMzLDEyMCAxOTMuMzMzLDE1MCAxNjMuMzMzLDE4MCAJIi8+DQoJPHBvbHlnb24gc3R5bGU9ImZpbGw6I0ZGRkZGRjsiIHBvaW50cz0iMTI1LDEwOC4zMzMgOTUsMTM4LjMzMyA4My4zMzMsMTUwIDEyNSwxOTAgMTM2LjY2NywxNzguMzMzIDEwNi42NjcsMTUwIDEzNi42NjcsMTIwIAkiLz4NCjwvZz4NCjwvc3ZnPg0K\\\" alt=\\\"Icon indicating the project type\\\" class=\\\"jira-project-avatar-icon\\\" \\/\u003e\u003c\\/a\u003e\u003c\\/div\u003e\u003c!-- .aui-page-header-image --\u003e\u003cdiv class=\\\"aui-page-header-main\\\"\u003e\u003ch1\u003e\u003cdiv class=\\\"aui-group aui-group-split\\\"\u003e\u003cdiv class=\\\"aui-item project-title\\\"\u003e\u003ca href=\\\"\\/jira\\/projects\\/LUCENE\\/summary\\\" title=\\\"Lucene - Core\\\"\u003eLucene - Core\u003c\\/a\u003e\u003c\\/div\u003e\u003c\\/div\u003e\u003c\\/h1\u003e\u003c\\/div\u003e\u003c!-- .aui-page-header-main --\u003e\u003c\\/div\u003e\u003c!-- .aui-page-header-inner --\u003e\u003c\\/header\u003e\u003c!-- .aui-page-header --\u003e\u003cnav class=\\\"aui-navgroup aui-navgroup-vertical\\\"\u003e\u003cdiv class=\\\"aui-navgroup-inner sidebar-content-container\\\"\u003e\u003cdiv class=\\\"aui-sidebar-group aui-sidebar-group-tier-one\\\" data-id=\\\"sidebar-navigation-panel\\\"\u003e\u003cul class=\\\"aui-nav\\\"\u003e\u003cli class=\\\"aui-nav-selected\\\" \u003e\u003ca class=\\\"aui-nav-item \\\" href=\\\"\\/jira\\/projects\\/LUCENE\\/issues\\\" data-link-id=\\\"com.atlassian.jira.jira-projects-issue-navigator:sidebar-issue-navigator\\\" \u003e\u003cspan class=\\\"aui-icon aui-icon-large icon-sidebar-issues\\\"\u003e\u003c\\/span\u003e\u003cspan class=\\\"aui-nav-item-label\\\" title=\\\"Issues\\\"\u003eIssues\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/li\u003e\u003cli  \u003e\u003ca class=\\\"aui-nav-item \\\" href=\\\"\\/jira\\/projects\\/LUCENE?selectedItem=com.atlassian.jira.jira-projects-plugin:report-page\\\" data-link-id=\\\"com.atlassian.jira.jira-projects-plugin:report-page\\\" \u003e\u003cspan class=\\\"aui-icon aui-icon-large agile-icon-report\\\"\u003e\u003c\\/span\u003e\u003cspan class=\\\"aui-nav-item-label\\\" title=\\\"Reports\\\"\u003eReports\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/li\u003e\u003cli  \u003e\u003ca class=\\\"aui-nav-item \\\" href=\\\"\\/jira\\/projects\\/LUCENE?selectedItem=com.atlassian.jira.jira-projects-plugin:components-page\\\" data-link-id=\\\"com.atlassian.jira.jira-projects-plugin:components-page\\\" \u003e\u003cspan class=\\\"aui-icon aui-icon-large icon-sidebar-components\\\"\u003e\u003c\\/span\u003e\u003cspan class=\\\"aui-nav-item-label\\\" title=\\\"Components\\\"\u003eComponents\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/li\u003e\u003c\\/ul\u003e\u003c\\/div\u003e\u003c\\/div\u003e\u003c\\/nav\u003e\u003c\\/div\u003e\u003cdiv class=\\\"aui-sidebar-footer\\\"\u003e\u003ca class=\\\"aui-button aui-button-subtle aui-sidebar-toggle aui-sidebar-footer-tipsy\\\" data-tooltip=\\\"Expand sidebar ( [ )\\\" href=\\\"#\\\"\u003e\u003cspan class=\\\"aui-icon aui-icon-small\\\"\u003e\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/div\u003e\u003c\\/div\u003e\u003c\\/div\u003e\"";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:bigpipe-init/jira.webresources:bigpipe-init.js" data-wrm-key="jira.webresources:bigpipe-init" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <form id="jira_request_timing_info" class="dont-default-focus"> 
   <fieldset class="parameters hidden"> 
    <input type="hidden" title="jira.request.start.millis" value="1516201992758"> 
    <input type="hidden" title="jira.request.server.time" value="592"> 
    <input type="hidden" title="jira.request.id" value="913x7655684x11"> 
    <input type="hidden" title="jira.session.expiry.time" value="-"> 
    <input type="hidden" title="jira.session.expiry.in.mins" value="-"> 
    <input id="jiraConcurrentRequests" type="hidden" name="jira.request.concurrent.requests" value="13"> 
    <input type="hidden" title="db.reads.time.in.ms" value="41"> 
    <input type="hidden" title="db.conns.time.in.ms" value="49"> 
   </fieldset> 
  </form> 
  <!--
	                 REQUEST ID : 913x7655684x11
	          REQUEST TIMESTAMP : [17/Jan/2018:15:13:12 +0000]
	               REQUEST TIME : 0.5920
	                 ASESSIONID : -
	        CONCURRENT REQUESTS : 13

	                      db.reads : OpSnapshot{name='db.reads', invocationCount=24, elapsedTotal=41876400, elapsedMin=521978, elapsedMax=15001762, resultSetSize=0, cpuTotal=0, cpuMin=0, cpuMax=0}
	                      db.conns : OpSnapshot{name='db.conns', invocationCount=28, elapsedTotal=49080982, elapsedMin=552527, elapsedMax=15050578, resultSetSize=0, cpuTotal=0, cpuMin=0, cpuMax=0}
-->   
 </body>
</html>