<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=Edge"> 
  <meta name="application-name" content="JIRA" data-name="jira" data-version="7.6.3">
  <meta name="ajs-viewissue-use-history-api" content="false"> 
  <meta name="ajs-jira-base-url" content="https://issues.apache.org/jira"> 
  <meta name="ajs-serverRenderedViewIssue" content="true"> 
  <meta name="ajs-dev-mode" content="false"> 
  <meta name="ajs-context-path" content="/jira"> 
  <meta name="ajs-version-number" content="7.6.3"> 
  <meta name="ajs-build-number" content="76005"> 
  <meta name="ajs-is-beta" content="false"> 
  <meta name="ajs-is-rc" content="false"> 
  <meta name="ajs-is-snapshot" content="false"> 
  <meta name="ajs-is-milestone" content="false"> 
  <meta name="ajs-remote-user" content=""> 
  <meta name="ajs-remote-user-fullname" content=""> 
  <meta name="ajs-user-locale" content="en_UK"> 
  <meta name="ajs-user-locale-group-separator" content=","> 
  <meta name="ajs-app-title" content="ASF JIRA"> 
  <meta name="ajs-keyboard-shortcuts-enabled" content="true"> 
  <meta name="ajs-keyboard-accesskey-modifier" content="Ctrl+Alt"> 
  <meta name="ajs-enabled-dark-features" content="[&quot;com.atlassian.jira.agile.darkfeature.editable.detailsview&quot;,&quot;nps.survey.inline.dialog&quot;,&quot;com.atlassian.jira.agile.darkfeature.edit.closed.sprint.enabled&quot;,&quot;jira.plugin.devstatus.phasetwo&quot;,&quot;jira.frother.reporter.field&quot;,&quot;atlassian.rest.xsrf.legacy.enabled&quot;,&quot;jira.issue.status.lozenge&quot;,&quot;com.atlassian.jira.config.BIG_PIPE&quot;,&quot;com.atlassian.jira.projects.issuenavigator&quot;,&quot;com.atlassian.jira.config.PDL&quot;,&quot;jira.plugin.devstatus.phasetwo.enabled&quot;,&quot;atlassian.aui.raphael.disabled&quot;,&quot;app-switcher.new&quot;,&quot;frother.assignee.field&quot;,&quot;com.atlassian.jira.projects.ProjectCentricNavigation.Switch&quot;,&quot;sd.internal.base.off.thread.on.completion.events.enabled&quot;,&quot;jira.onboarding.cyoa&quot;,&quot;com.atlassian.jira.agile.darkfeature.kanplan.enabled&quot;,&quot;sd.slavalue.record.updated.date.enabled&quot;,&quot;com.atlassian.jira.config.ProjectConfig.MENU&quot;,&quot;com.atlassian.jira.projects.sidebar.DEFER_RESOURCES&quot;,&quot;com.atlassian.jira.agile.darkfeature.kanplan.epics.and.versions.enabled&quot;,&quot;com.atlassian.jira.agile.darkfeature.sprint.goal.enabled&quot;,&quot;jira.zdu.admin-updates-ui&quot;,&quot;jira.zdu.jmx-monitoring&quot;,&quot;sd.sla.improved.rendering.enabled&quot;,&quot;sd.canned.responses.enabled&quot;,&quot;sd.new.settings.sidebar.location.disabled&quot;,&quot;jira.zdu.cluster-upgrade-state&quot;,&quot;com.atlassian.jira.agile.darkfeature.splitissue&quot;,&quot;com.atlassian.jira.config.CoreFeatures.LICENSE_ROLES_ENABLED&quot;,&quot;com.atlassian.feedback.feedback-button-move-to-header-enable&quot;,&quot;jira.export.csv.enabled&quot;]"> 
  <meta name="ajs-in-admin-mode" content="false"> 
  <meta name="ajs-is-sysadmin" content="false"> 
  <meta name="ajs-is-admin" content="false"> 
  <meta name="ajs-outgoing-mail-enabled" content="true"> 
  <meta name="ajs-date-relativize" content="true"> 
  <meta name="ajs-date-time" content="HH:mm"> 
  <meta name="ajs-date-day" content="EEEE HH:mm"> 
  <meta name="ajs-date-dmy" content="dd/MMM/yy"> 
  <meta name="ajs-date-complete" content="dd/MMM/yy HH:mm"> 
  <script type="text/javascript">var AJS=AJS||{};AJS.debug=true;</script> 
  <meta id="atlassian-token" name="atlassian-token" content="A5KQ-2QAV-T4JA-FDED|2c6ac050185b276066cd92544b63132f33456536|lout"> 
  <link rel="shortcut icon" href="/jira/s/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/_/favicon.ico"> 
  <!--[if IE]><![endif]--> 
  <script type="text/javascript">
    (function() {
        var contextPath = '/jira';
        var eventBuffer = [];

        function printDeprecatedMsg() {
            if (console && console.warn) {
                console.warn('DEPRECATED JS - contextPath global variable has been deprecated since 7.4.0. Use `wrm/context-path` module instead.');
            }
        }

        function sendEvent(analytics, postfix) {
            analytics.send({
                name: 'js.globals.contextPath.' + postfix
            });
        }

        function sendDeprecatedEvent(postfix) {
            try {
                var analytics = require('jira/analytics');
                if (eventBuffer.length) {
                    eventBuffer.forEach(function(value) {
                        sendEvent(analytics, value);
                    });
                    eventBuffer = [];
                }

                if (postfix) {
                    sendEvent(analytics, postfix);
                }
            } catch(ex) {
                eventBuffer.push(postfix);
                setTimeout(sendDeprecatedEvent, 1000);
            }
        }

        Object.defineProperty(window, 'contextPath', {
            get: function() {
                printDeprecatedMsg();
                sendDeprecatedEvent('get');
                return contextPath;
            },
            set: function(value) {
                printDeprecatedMsg();
                sendDeprecatedEvent('set');
                contextPath = value;
            }
        });
    })();

</script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.plugins.atlassian-plugins-webresource-plugin:context-path.context-path"]="\"/jira\"";
WRM._unparsedData["jira.webresources:feature-flags.feature-flag-data"]="{\"enabled-feature-keys\":[\"com.atlassian.jira.agile.darkfeature.editable.detailsview\",\"nps.survey.inline.dialog\",\"com.atlassian.jira.agile.darkfeature.edit.closed.sprint.enabled\",\"jira.plugin.devstatus.phasetwo\",\"jira.frother.reporter.field\",\"atlassian.rest.xsrf.legacy.enabled\",\"jira.issue.status.lozenge\",\"com.atlassian.jira.config.BIG_PIPE\",\"com.atlassian.jira.projects.issuenavigator\",\"com.atlassian.jira.config.PDL\",\"jira.plugin.devstatus.phasetwo.enabled\",\"atlassian.aui.raphael.disabled\",\"app-switcher.new\",\"frother.assignee.field\",\"com.atlassian.jira.projects.ProjectCentricNavigation.Switch\",\"sd.internal.base.off.thread.on.completion.events.enabled\",\"jira.onboarding.cyoa\",\"com.atlassian.jira.agile.darkfeature.kanplan.enabled\",\"sd.slavalue.record.updated.date.enabled\",\"com.atlassian.jira.config.ProjectConfig.MENU\",\"com.atlassian.jira.projects.sidebar.DEFER_RESOURCES\",\"com.atlassian.jira.agile.darkfeature.kanplan.epics.and.versions.enabled\",\"com.atlassian.jira.agile.darkfeature.sprint.goal.enabled\",\"jira.zdu.admin-updates-ui\",\"jira.zdu.jmx-monitoring\",\"sd.sla.improved.rendering.enabled\",\"sd.canned.responses.enabled\",\"sd.new.settings.sidebar.location.disabled\",\"jira.zdu.cluster-upgrade-state\",\"com.atlassian.jira.agile.darkfeature.splitissue\",\"com.atlassian.jira.config.CoreFeatures.LICENSE_ROLES_ENABLED\",\"com.atlassian.feedback.feedback-button-move-to-header-enable\",\"jira.export.csv.enabled\"],\"feature-flag-states\":{\"sd.customer.profile.multi.languages\":true,\"sd.customer.portal.transitions\":true,\"sd.customer.portal.transitions.config\":true,\"sd.custom.email.stripping.rules\":false,\"sd.sla.lucene.issue.id.callback.performance\":true,\"sd.new.settings.sidebar.location\":true,\"sd.workload.report.paginator\":true,\"sd.experimental.portal.search.algorithm.default.1\":false,\"sd.customer.portal.help.center.agent.announcement\":true,\"sd.sla.improved.rendering\":false,\"sd.experimental.portal.search.algorithm.default.2\":false,\"sd.customer.feedback.validate.reporter.on.token\":true,\"sd.custom.email.notifications.utf8.csat.star\":true,\"sd.who.create.customers.by.email.setting\":true,\"com.atlassian.jira.issuetable.move.links.hidden\":true,\"jira.renderer.consider.variable.format\":true,\"sd.stats.event.tracking\":true,\"sd.password.helper.dialog\":true,\"sd.canned.responses\":false,\"sd.portal.help.center.customer.signup.secondary.email\":true,\"sd.custom.email.notifications.manage.language\":true,\"sd.use.search.by.permissions\":true,\"sd.slavalue.record.updated.date\":false,\"sd.report.custom.date.range\":false,\"sd.kb.article.helpfulness.report\":false,\"com.atlassian.jira.agile.darkfeature.sprint.goal\":false,\"sd.custom.email.notifications.styling\":true,\"sd.workinghours.new.page.bulldog.1\":false,\"sd.customer.portal.two.step.login\":false,\"sd.automation.psmq.async.executor\":true,\"sd.customer.org.list.page.lazy.search\":true,\"sd.approval.requested.when.handler\":true,\"sd.request.type.field.rest.api.filtering.bugfix\":true,\"sd.automation.then.action.auto.answer.approval\":true,\"com.atlassian.jira.agile.darkfeature.kanplan.epics.and.versions\":false,\"sla.will.only.be.paused.if.they.are.already.started\":true,\"sd.kb.comment.share.stats.collection\":true,\"com.atlassian.jira.upgrade.startup.fix.index\":true,\"sd.customer.orgs.group.participants\":true,\"sd.portal.help.center.customer.signup\":true,\"sd.sla.agent.jql.security.restricted\":true,\"sd.test.feature.flag.x\":true,\"sd.test.feature.flag.y\":false,\"sd.cluster.safe.mail.channel.shutdown\":true,\"sd.email.channel.folders\":false,\"sd.email.analytics.open\":false,\"sd.kb.project.creation.create.link.space\":true,\"sd.workinghours.new.page\":false,\"sd.confluence.anonymous.permission.fix\":true,\"com.atlassian.jira.issuetable.draggable\":true,\"sd.customer.portal.project.agent.announcement\":true,\"sd.automation.audit.log\":true,\"jira.jql.suggestrecentfields\":false,\"sd.canned.responses.check.index.startup\":false,\"sd.new.project.templates\":true,\"sd.custom.email.notifications.custom.rules.simple.ui\":false,\"sd.custom.email.notifications.cut.over\":true,\"sd.dismiss.all.misconfiguration.warnings.setting\":true,\"com.atlassian.jira.agile.darkfeature.optimistic.transitions\":true,\"sd.sla.configurations.export\":true,\"sd.canned.responses.variable.substitution\":true,\"com.atlassian.jira.agile.darkfeature.kanplan\":false,\"sd.internal.base.off.thread.on.completion.events\":false,\"sd.customer.portal.prioties.per.project.fix\":true,\"jira.instrumentation.laas\":false,\"sd.kb.self.service.report\":false,\"sla.improved.request.handling\":true,\"sd.no.schedule.async.upgrade.tasks\":true,\"sd.kb.primary.nav\":true,\"com.atlassian.jira.agile.darkfeature.edit.closed.sprint\":false,\"sd.kb.issueview.panel.phase2\":true,\"sd.email.outsider.comments\":true,\"jira.create.linked.issue\":true,\"sd.kb.issueview.panel\":true,\"jira.sal.host.connect.accessor.existing.transaction.will.create.transactions\":true,\"sd.approvals.light.weight\":false,\"sd.automation.then.webhook\":true,\"sd.respect.inline.edit.issue.off\":true,\"jira.jql.smartautoselectfirst\":false,\"sd.global.portal.search.atlassian.only.tracking\":false,\"sd.automation.if.condition.comment.primary.action\":true,\"jira.priorities.per.project\":true,\"sd.inline.noformat.renderer\":true,\"sd.customer.request.type.create.edit.screens\":true}}";
WRM._unparsedData["jira.webresources:default-comment-security-level.DefaultCommentSecurityLevelHelpLink"]="{\"extraClasses\":\"default-comment-level-help\",\"title\":\"Commenting on an Issue\",\"url\":\"https://docs.atlassian.com/jira/jcore-docs-076/Editing+and+collaborating+on+issues#Editingandcollaboratingonissues-restrictacomment\",\"isLocal\":false}";
WRM._unparsedData["jira.webresources:dateFormatProvider.allFormats"]="{\"dateFormats\":{\"meridiem\":[\"AM\",\"PM\"],\"eras\":[\"BC\",\"AD\"],\"months\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"monthsShort\":[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"weekdaysShort\":[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],\"weekdays\":[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},\"lookAndFeelFormats\":{\"relativize\":\"true\",\"time\":\"HH:mm\",\"day\":\"EEEE HH:mm\",\"dmy\":\"dd/MMM/yy\",\"complete\":\"dd/MMM/yy HH:mm\"}}";
WRM._unparsedData["com.atlassian.jira.jira-issue-nav-components:issueviewer.features"]="{\"rteEnabled\":true}";
WRM._unparsedData["com.atlassian.jira.plugins.jira-dnd-attachment-plugin:dnd-issue-drop-zone.thumbnail-mime-types"]="\"image/png,image/vnd.wap.wbmp,image/x-png,image/jpeg,image/bmp,image/gif\"";
WRM._unparsedData["com.atlassian.jira.plugins.jira-dnd-attachment-plugin:dnd-issue-drop-zone.upload-limit"]="\"62914560\"";
WRM._unparsedData["com.atlassian.plugins.helptips.jira-help-tips:help-tip-manager.JiraHelpTipData"]="{\"anonymous\":true}";
WRM._unparsedData["com.atlassian.jira.jira-view-issue-plugin:controller-subtasks.controller.subtasks.parameters"]="{\"url\":\"/rest/api/2/issue/{issueId}/subtask/move\"}";
WRM._unparsedData["com.atlassian.analytics.analytics-client:policy-update-init.policy-update-data-provider"]="false";
WRM._unparsedData["com.atlassian.analytics.analytics-client:programmatic-analytics-init.programmatic-analytics-data-provider"]="false";
WRM._unparsedData["com.atlassian.servicedesk.servicedesk-canned-responses-plugin:canned-responses-data-provider.data"]="{\"substitutionVariables\":{\"issue.summary\":\"Issue summary\",\"issue.description\":\"Issue description\",\"issue.key\":\"Issue key\",\"issue.reporter.name\":\"Issue reporter\",\"issue.resolution\":\"Issue resolution\",\"request.url\":\"Request URL\",\"request.status\":\"Request status\"}}";
WRM._unparsedData["jira.webresources:avatar-picker.data"]="{}";
WRM._unparsedData["com.atlassian.feedback.jira-feedback-plugin:button-resources-init.data"]="{\"jira.feedback.plugin.issue.collector.core\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-UK&collectorId=abbf546d\",\"jira.feedback.plugin.issue.collector.default\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-UK&collectorId=abbf546d\",\"jira.feedback.plugin.issue.collector.service.desk\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector.js?locale=en-UK&collectorId=a698db21\",\"jira.feedback.plugin.issue.collector.software\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-UK&collectorId=abbf546d\",\"isHeaderFeedbackButtonEnabled\":true}";
WRM._unparsedData["com.atlassian.jira.jira-header-plugin:dismissedFlags.flags"]="{\"dismissed\":[]}";
WRM._unparsedData["com.atlassian.jira.jira-header-plugin:newsletter-signup-tip-init.newsletterSignup"]="{\"signupDescription\":\"Get updates, inspiration and best practices from the team behind JIRA.\",\"formUrl\":\"https://www.atlassian.com/apis/exact-target/{0}/subscribe?mailingListId=1401671\",\"signupTitle\":\"Sign up!\",\"signupId\":\"newsletter-signup-tip\",\"showNewsletterTip\":false}";
WRM._unparsedData["com.atlassian.jira.project-templates-plugin:project-templates-plugin-resources.ptAnalyticsData"]="{\"instanceCreatedDate\":\"2011-01-31\"}";
WRM._unparsedData["com.atlassian.servicedesk.core-ui:util-help-links.help-links"]="{\"help\":{\"email.settings\":\"https://docs.atlassian.com/jira/jsd-docs-039/Receiving+requests+by+email\",\"managing.queues\":\"https://docs.atlassian.com/jira/jsd-docs-039/Setting+up+queues+for+your+team\",\"email.setup\":\"https://docs.atlassian.com/jira/jsd-docs-039/Receiving+requests+by+email\",\"request.settings.help.bubble\":\"https://docs.atlassian.com/jira/jsd-docs-039/Managing+access+to+your+service+desk\",\"email.settings.suitablerequest\":\"https://docs.atlassian.com/jira/jsd-docs-039/Receiving+requests+by+email#Receivingrequestsbyemail-suitablerequest\",\"sla.import.help\":\"https://docs.atlassian.com/jira/jsd-docs-039/Importing+SLAs\",\"documentation.home\":\"https://docs.atlassian.com/jira/jsd-docs-039/JIRA+Service+Desk+Documentation\",\"default\":\"https://docs.atlassian.com/jira/jsd-docs-039/\",\"create.space.help\":\"https://docs.atlassian.com/jira/jsd-docs-039/Serving+customers+with+a+knowledge+base#serving-customers-with-a-knowledge-base-createpermission\",\"email.settings.troubleshooting\":\"https://docs.atlassian.com/jira/jsd-docs-039/Troubleshooting+issues+with+the+email+channel\",\"admin.notifications.config\":\"https://docs.atlassian.com/jira/jsd-docs-039/Managing+service+desk+notifications\",\"troubleshoot.requesttype\":\"https://docs.atlassian.com/jira/jsd-docs-039/Troubleshooting+issues+with+request+types\",\"approvals.configuration\":\"https://docs.atlassian.com/jira/jsd-docs-039/Configuring+JIRA+Service+Desk+approvals\",\"setting.up.reports\":\"https://docs.atlassian.com/jira/jsd-docs-039/Setting+up+service+desk+reports\",\"public.signup\":\"https://docs.atlassian.com/jira/jsd-docs-039/Configuring+public+signup\",\"knowledge.base\":\"https://docs.atlassian.com/jira/jsd-docs-039/Serving+customers+with+a+knowledge+base\",\"resolve.permission.scheme.errors\":\"https://docs.atlassian.com/jira/jsd-docs-039/Resolving+permission+scheme+errors\",\"getting.started\":\"https://docs.atlassian.com/jira/jsd-docs-039/Getting+started+with+JIRA+Service+Desk\",\"getting.started.agent\":\"https://docs.atlassian.com/jira/jsd-docs-039/Getting+started+for+service+desk+agents\",\"invite.customers\":\"https://docs.atlassian.com/jira/jsd-docs-039/Managing+access+to+your+service+desk\"},\"kb\":{\"default\":\"https://confluence.atlassian.com/display/SDKB/\",\"troubleshooting.user.management.issues\":\"https://confluence.atlassian.com/display/SDKB/Troubleshooting+issues+with+service+desk+user+management\",\"legacytransition\":\"https://confluence.atlassian.com/display/SDKB/Replacing+legacy+automatic+transitions+with+automation+rules\",\"umtroubleshoot\":\"https://confluence.atlassian.com/display/SDKB/Troubleshooting+issues+with+service+desk+user+management\"}}";
WRM._unparsedData["com.atlassian.servicedesk.core-ui:util-base-url.base-url"]="\"https://issues.apache.org/jira\"";
WRM._unparsedData["com.atlassian.jira.plugins.jira-wiki-editor:wiki-editor-resources.help-data"]="{\"showHelp\":true,\"editorDocumentationUrl\":[\"https://docs.atlassian.com/jira/jcore-docs-076/Visual+editing\"],\"editorDocumentationTitle\":[\"Show me documentation for the visual editor\"]}";
WRM._unparsedData["com.atlassian.jira.plugins.jira-wiki-editor:wiki-editor-resources.thumbnails-allowed"]="false";
WRM._unparsedData["jira.webresources:user-message-flags.adminLockout"]="{}";
WRM._unparsedData["jira.request.correlation-id"]="\"4c8bafc81fd91a\"";
WRM._unparsedData["project-id"]="12310110";
WRM._unparsedData["project-key"]="\"LUCENE\"";
WRM._unparsedData["project-name"]="\"Lucene - Core\"";
WRM._unparsedData["project-type"]="\"software\"";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:generic-filters"]="[{\"id\":\"allissues\",\"jql\":\"project = \\\"{0}\\\" ORDER BY {1}\",\"defaultOrderby\":\"created DESC\",\"label\":\"All issues\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[]},{\"id\":\"allopenissues\",\"jql\":\"project = \\\"{0}\\\" AND resolution = Unresolved ORDER BY {1}\",\"defaultOrderby\":\"priority DESC, updated DESC\",\"label\":\"Open issues\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"resolution\"]},{\"id\":\"doneissues\",\"jql\":\"project = \\\"{0}\\\" AND statusCategory = Done ORDER BY {1}\",\"defaultOrderby\":\"updated DESC\",\"label\":\"Done issues\",\"requiresUser\":false,\"supportsInlineIssueCreate\":false,\"fields\":[\"status\"]},{\"id\":\"recentlyviewed\",\"jql\":\"project = \\\"{0}\\\" AND issuekey in issueHistory() ORDER BY {1}\",\"defaultOrderby\":\"lastViewed DESC\",\"label\":\"Viewed recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"issuekey\"]},{\"id\":\"addedrecently\",\"jql\":\"project = \\\"{0}\\\" AND created \u003e= -1w ORDER BY {1}\",\"defaultOrderby\":\"created DESC\",\"label\":\"Created recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"created\"]},{\"id\":\"resolvedrecently\",\"jql\":\"project = \\\"{0}\\\" AND resolutiondate \u003e= -1w ORDER BY {1}\",\"defaultOrderby\":\"updated DESC\",\"label\":\"Resolved recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":false,\"fields\":[\"resolutiondate\"]},{\"id\":\"updatedrecently\",\"jql\":\"project = \\\"{0}\\\" AND updated \u003e= -1w ORDER BY {1}\",\"defaultOrderby\":\"updated DESC\",\"label\":\"Updated recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"updated\"]}]";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:default-filter-priority"]="[\"allopenissues\",\"allissues\"]";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:can-manage-filters"]="false";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:project-filters"]="[]";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:can-create-issues"]="false";
WRM._unparsedData["projectId"]="12310110";
WRM._unparsedData["projectKey"]="\"LUCENE\"";
WRM._unparsedData["projectType"]="\"software\"";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:server-rendered"]="true";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <link type="text/css" rel="stylesheet" href="/jira/s/a8a4711bc3f2eb261d8c8fd9fbcbba8b-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1fca1750044f2777c977e8d8cc023344/_/download/contextbatch/css/_super/batch.css" data-wrm-key="_super" data-wrm-batch-type="context" media="all"> 
  <link type="text/css" rel="stylesheet" href="/jira/s/1a6b21131945f6f49ff48336b49ca3fe-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/37a6e594cbbfd462a8a54d5aa11475c1/_/download/contextbatch/css/project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super/batch.css?agile_global_admin_condition=true&amp;hc-enabled=true&amp;is-server-instance=true&amp;jag=true&amp;jira.create.linked.issue=true&amp;nps-acknowledged=true&amp;richediton=true&amp;sd_operational=true" data-wrm-key="project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super" data-wrm-batch-type="context" media="all"> 
  <link type="text/css" rel="stylesheet" href="/jira/s/611672383f6cab00ab202241ba6f9d68-T/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/7.6.3/_/download/batch/com.atlassian.feedback.jira-feedback-plugin:button-resources-init/com.atlassian.feedback.jira-feedback-plugin:button-resources-init.css" data-wrm-key="com.atlassian.feedback.jira-feedback-plugin:button-resources-init" data-wrm-batch-type="resource" media="all"> 
  <script type="text/javascript" src="/jira/s/d8484c9183f546511a8e336a8779bcd9-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1fca1750044f2777c977e8d8cc023344/_/download/contextbatch/js/_super/batch.js?locale=en-UK" data-wrm-key="_super" data-wrm-batch-type="context" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d3b35d835f8f46fc3b53bb4db7f85158-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/37a6e594cbbfd462a8a54d5aa11475c1/_/download/contextbatch/js/project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super/batch.js?agile_global_admin_condition=true&amp;hc-enabled=true&amp;is-server-instance=true&amp;jag=true&amp;jira.create.linked.issue=true&amp;locale=en-UK&amp;nps-acknowledged=true&amp;richediton=true&amp;sd_operational=true" data-wrm-key="project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super" data-wrm-batch-type="context" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/71d42e74136d842a3ef4d5d136484843-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/871d45c9f322a22cb3aa9b7948a69803/_/download/contextbatch/js/atl.global,-_super/batch.js?locale=en-UK" data-wrm-key="atl.global,-_super" data-wrm-batch-type="context" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:calendar-en/jira.webresources:calendar-en.js" data-wrm-key="jira.webresources:calendar-en" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:calendar-localisation-moment/jira.webresources:calendar-localisation-moment.js" data-wrm-key="jira.webresources:calendar-localisation-moment" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/7.6.3/_/download/batch/com.atlassian.feedback.jira-feedback-plugin:button-resources/com.atlassian.feedback.jira-feedback-plugin:button-resources.js" data-wrm-key="com.atlassian.feedback.jira-feedback-plugin:button-resources" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <link type="text/css" rel="stylesheet" href="/jira/s/95a4826c265852f4904f1e0e7300df68-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/e0de73613a1027de08f3da6a45e1d1a2/_/download/contextbatch/css/jira.global.look-and-feel,-_super/batch.css" data-wrm-key="jira.global.look-and-feel,-_super" data-wrm-batch-type="context" media="all"> 
  <script type="text/javascript" src="/jira/rest/api/1.0/shortcuts/76005/944bb39eced1b35cfc7194aa02eb5a5a/shortcuts.js?context=issuenavigation&amp;context=issueaction"></script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.jira.jira-issue-nav-components:inline-edit-enabled"]="true";
WRM._unparsedData["should-display-chaperone"]="false";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <link type="text/css" rel="stylesheet" href="/jira/s/15712b600e9aecf72ffd9fd3704a0c78-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/6b22a15c7b83f87a47b1757076f43542/_/download/contextbatch/css/com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue/batch.css?jira.create.linked.issue=true&amp;richediton=true&amp;sd_operational=true" data-wrm-key="com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue" data-wrm-batch-type="context" media="all"> 
  <script type="text/javascript" src="/jira/s/5a8f0f8b8aa8f96a4f0f7e9e248d62f3-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/6b22a15c7b83f87a47b1757076f43542/_/download/contextbatch/js/com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue/batch.js?jira.create.linked.issue=true&amp;locale=en-UK&amp;richediton=true&amp;sd_operational=true" data-wrm-key="com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue" data-wrm-batch-type="context" data-initially-rendered></script> 
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="ajs-can-search-users" content="false"> 
  <meta name="ajs-can-edit-watchers" content="false"> 
  <meta name="ajs-default-avatar-url" content="https://issues.apache.org/jira/secure/useravatar?size=xsmall&amp;avatarId=10453"> 
  <meta name="ajs-issue-project-type" content="software"> 
  <meta name="ajs-issue-key" content="LUCENE-1990"> 
  <meta name="ajs-server-view-issue-is-editable" content="false"> 
  <title>[LUCENE-1990] Add unsigned packed int impls in oal.util - ASF JIRA</title> 
  <link rel="search" type="application/opensearchdescription+xml" href="/jira/osd.jsp" title="[LUCENE-1990] Add unsigned packed int impls in oal.util - ASF JIRA"> 
 </head> 
 <body id="jira" class="aui-layout aui-theme-default " data-version="7.6.3"> 
  <div id="page"> 
   <header id="header" role="banner"> 
    <script>
require(["jquery", "jira/license-banner"], function ($, licenseBanner) {
    $(function () {
        licenseBanner.showLicenseBanner("");
        licenseBanner.showLicenseFlag("");
    });
});
</script> 
    <nav class="aui-header aui-dropdown2-trigger-group" role="navigation">
     <div class="aui-header-inner">
      <div class="aui-header-before">
       <a class=" aui-dropdown2-trigger app-switcher-trigger" aria-controls="app-switcher" aria-haspopup="true" role="button" tabindex="0" data-aui-trigger href="#app-switcher"><span class="aui-icon aui-icon-small aui-iconfont-appswitcher">Linked Applications</span></a>
       <div id="app-switcher" class="aui-dropdown2 aui-style-default" role="menu" aria-hidden="true" data-is-switcher="true" data-environment="{&quot;isUserAdmin&quot;:false,&quot;isAppSuggestionAvailable&quot;:false,&quot;isSiteAdminUser&quot;:false}">
        <div role="application">
         <div class="app-switcher-loading">
          Loading…
         </div>
        </div>
       </div>
      </div>
      <div class="aui-header-primary">
       <h1 id="logo" class="aui-header-logo aui-header-logo-custom"><a href="https://issues.apache.org/jira/secure/MyJiraHome.jspa"><img src="/jira/s/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/_/jira-logo-scaled.png" alt="ASF JIRA"></a></h1>
       <ul class="aui-nav">
        <li><a href="/jira/secure/Dashboard.jspa" class=" aui-nav-link aui-dropdown2-trigger aui-dropdown2-ajax" id="home_link" aria-haspopup="true" aria-controls="home_link-content" title="View and manage your dashboards" accesskey="d">Dashboards</a>
         <div class="aui-dropdown2 aui-style-default" id="home_link-content" data-aui-dropdown2-ajax-key="home_link"></div></li>
        <li><a href="/jira/browse/LUCENE" class=" aui-nav-link aui-dropdown2-trigger aui-dropdown2-ajax" id="browse_link" aria-haspopup="true" aria-controls="browse_link-content" title="View recent projects and browse a list of projects" accesskey="p">Projects</a>
         <div class="aui-dropdown2 aui-style-default" id="browse_link-content" data-aui-dropdown2-ajax-key="browse_link"></div></li>
        <li><a href="/jira/issues/" class=" aui-nav-link aui-dropdown2-trigger aui-dropdown2-ajax" id="find_link" aria-haspopup="true" aria-controls="find_link-content" title="Search for issues and view recent issues" accesskey="i">Issues</a>
         <div class="aui-dropdown2 aui-style-default" id="find_link-content" data-aui-dropdown2-ajax-key="find_link"></div></li> 
       </ul>
      </div>
      <div class="aui-header-secondary">
       <ul class="aui-nav">
        <li id="quicksearch-menu"> 
         <form action="/jira/secure/QuickSearch.jspa" method="get" id="quicksearch" class="aui-quicksearch dont-default-focus ajs-dirty-warning-exempt"> 
          <input id="quickSearchInput" class="search" type="text" title="Search" placeholder="Search" name="searchString" accessKey="q"> 
          <input type="submit" class="hidden" value="Search"> 
         </form> </li> 
        <li><a class="jira-feedback-plugin" role="button" aria-haspopup="true" id="jira-header-feedback-link" href="#"><span class="aui-icon aui-icon-small jira-feedback-plugin-icon">Give feedback to Atlassian</span></a></li> 
        <li id="system-help-menu"> <a class="aui-nav-link aui-dropdown2-trigger" id="help_menu" aria-haspopup="true" aria-owns="system-help-menu-content" href="https://docs.atlassian.com/jira/jcore-docs-076/" target="$textUtils.htmlEncode($rootHelpMenuItem.params.target)" title="Help"><span class="aui-icon aui-icon-small aui-iconfont-help">Help</span></a> 
         <div id="system-help-menu-content" class="aui-dropdown2 aui-style-default"> 
          <div class="aui-dropdown2-section"> 
           <ul id="jira-help" class="aui-list-truncate"> 
            <li> <a id="view_core_help" class="aui-nav-link " title="Go to the online documentation for JIRA Core" href="https://docs.atlassian.com/jira/jcore-docs-076/" target="_blank">JIRA Core help</a> </li> 
            <li> <a id="keyshortscuthelp" class="aui-nav-link " title="Get more information about JIRA's Keyboard Shortcuts" href="/jira/secure/ViewKeyboardShortcuts!default.jspa" target="_blank">Keyboard Shortcuts</a> </li> 
            <li> <a id="view_about" class="aui-nav-link " title="Get more information about JIRA" href="/jira/secure/AboutPage.jspa">About JIRA</a> </li> 
            <li> <a id="view_credits" class="aui-nav-link " title="See who did what" href="/jira/secure/JiraCreditsPage!default.jspa" target="_blank">JIRA Credits</a> </li> 
           </ul> 
          </div> 
         </div> </li> 
        <li id="user-options"> <a class="aui-nav-link login-link" href="/jira/login.jsp?os_destination=%2Fbrowse%2FLUCENE-1990">Log In</a> 
         <div id="user-options-content" class="aui-dropdown2 aui-style-default"> 
          <div class="aui-dropdown2-section"> 
          </div> 
         </div> </li> 
       </ul>
      </div>
     </div>
     <!-- .aui-header-inner-->
    </nav>
    <!-- .aui-header --> 
   </header> 
   <section id="content" role="main"> 
    <big-pipe data-id="sidebar-id" unresolved></big-pipe>
    <div class="aui-sidebar  sidebar-placeholder">
     <div class="aui-sidebar-wrapper">
      <div class="aui-sidebar-body"></div>
      <div class="aui-sidebar-footer">
       <a class="aui-button aui-button-subtle aui-sidebar-toggle aui-sidebar-footer-tipsy" data-tooltip="Expand sidebar ( [ )" href="#"><span class="aui-icon aui-icon-small"></span></a>
      </div>
     </div>
    </div>
    <script id="projects-sidebar-init">
    require(['jira/projects/sidebar/expansion-manager'], function(expansionManager) {
        var scriptTag = document.getElementById('projects-sidebar-init');
        var sidebar = AJS.sidebar('.aui-sidebar');
        expansionManager(sidebar);
        scriptTag.parentElement.removeChild(scriptTag);
    });
    </script>
    <div class="aui-page-panel">
     <div class="aui-page-panel-inner">
      <div class="issue-navigator">
       <div class="content">
        <div class="issue-view">
         <div class="navigation-tools">
          <div class="pager-container"></div>
         </div>
         <div class="issue-container">
          <div id="issue-content" class="issue-edit-form">
           <header id="stalker" class="issue-header js-stalker">
            <div class="issue-header-content">
             <header class="aui-page-header">
              <div class="aui-page-header-inner">
               <div class="aui-page-header-image">
                <span id="12310110" class="aui-avatar aui-avatar-large aui-avatar-project"><span class="aui-avatar-inner"><img id="project-avatar" alt="Uploaded image for project: 'Lucene - Core'" src="https://issues.apache.org/jira/secure/projectavatar?pid=12310110&amp;avatarId=10061"></span></span>
               </div>
               <!-- .aui-page-header-image -->
               <div class="aui-page-header-main">
                <ol class="aui-nav aui-nav-breadcrumbs">
                 <li><a id="project-name-val" href="/jira/browse/LUCENE">Lucene - Core</a></li>
                 <li><a class="issue-link" data-issue-key="LUCENE-1990" href="/jira/browse/LUCENE-1990" id="key-val" rel="12438385">LUCENE-1990</a></li>
                </ol>
                <h1 id="summary-val">Add unsigned packed int impls in oal.util</h1>
               </div>
               <!-- .aui-page-header-main -->
               <div class="aui-page-header-actions">
                <div id="issue-header-pager"></div>
               </div>
               <!-- .aui-page-header-actions -->
              </div>
              <!-- .aui-page-header-inner -->
             </header>
             <!-- .aui-page-header -->
             <div class="command-bar">
              <div class="ops-cont">
               <div class="ops-menus aui-toolbar">
                <div class="toolbar-split toolbar-split-left">
                 <ul id="opsbar-ops-login-lnk_container" class="toolbar-group pluggable-ops">
                  <li class="toolbar-item"><a id="ops-login-lnk" title="Log In" class="toolbar-trigger" href="/jira/login.jsp?os_destination=%2Fbrowse%2FLUCENE-1990"><span class="trigger-label">Log In</span></a></li>
                 </ul>
                 <ul id="opsbar-opsbar-operations" class="toolbar-group pluggable-ops"></ul>
                 <ul id="opsbar-opsbar-transitions" class="toolbar-group pluggable-ops"></ul>
                 <ul id="opsbar-opsbar-admin" class="toolbar-group pluggable-ops"></ul>
                </div>
                <div class="toolbar-split toolbar-split-right">
                 <ul id="opsbar-jira.issue.tools" class="toolbar-group pluggable-ops">
                  <li class="toolbar-item">
                   <div>
                    <a href="#" id="viewissue-export" aria-owns="viewissue-export_drop" aria-haspopup="true" title="Export this issue in another format" class="toolbar-trigger aui-button aui-style-default aui-dropdown2-trigger"><span class="icon icon-default aui-icon aui-icon-small aui-iconfont-export"></span> <span class="dropdown-text">Export</span></a>
                    <div id="viewissue-export_drop" class="aui-style-default aui-dropdown2">
                     <ul>
                      <li class="aui-list-item"><a href="/jira/si/jira.issueviews:issue-xml/LUCENE-1990/LUCENE-1990.xml" id="jira.issueviews:issue-xml"><span class="trigger-label">XML</span></a></li>
                      <li class="aui-list-item"><a href="/jira/si/jira.issueviews:issue-word/LUCENE-1990/LUCENE-1990.doc" id="jira.issueviews:issue-word"><span class="trigger-label">Word</span></a></li>
                      <li class="aui-list-item"><a href="/jira/si/jira.issueviews:issue-html/LUCENE-1990/LUCENE-1990.html" id="jira.issueviews:issue-html"><span class="trigger-label">Printable</span></a></li>
                      <li class="aui-list-item"><a href="/jira/si/com.atlassian.jira.plugins.jira-importers-plugin:issue-json/LUCENE-1990/LUCENE-1990.json" id="com.atlassian.jira.plugins.jira-importers-plugin:issue-json"><span class="trigger-label">JSON</span></a></li>
                     </ul>
                    </div>
                   </div></li>
                 </ul>
                </div>
               </div>
              </div>
             </div>
            </div>
           </header>
           <div class="issue-body-content">
            <div class="aui-group issue-body">
             <div class="aui-item issue-main-column">
              <div id="details-module" class="module toggle-wrap">
               <div id="details-module_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Details</h2>
               </div>
               <div class="mod-content"> 
                <ul id="issuedetails" class="property-list two-cols"> 
                 <li class="item"> 
                  <div class="wrap"> 
                   <strong class="name">Type:</strong> 
                   <span id="type-val" class="value"> <img alt="" height="16" src="/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype" title="Improvement - An improvement or enhancement to an existing feature or task." width="16"> Improvement </span> 
                  </div> </li> 
                 <li class="item item-right"> 
                  <div class="wrap"> 
                   <strong class="name">Status:</strong> 
                   <span id="status-val" class="value"> <span class=" jira-issue-status-lozenge aui-lozenge jira-issue-status-lozenge-green jira-issue-status-lozenge-done jira-issue-status-lozenge-max-width-medium" data-tooltip="<span class=&quot;jira-issue-status-tooltip-title&quot;>Closed</span><br><span class=&quot;jira-issue-status-tooltip-desc&quot;>The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.</span>">Closed</span> </span> 
                  </div> </li> 
                 <li class="item new"> 
                  <div class="wrap"> 
                   <strong class="name">Priority:</strong> 
                   <span id="priority-val" class="value"> <img alt="" height="16" src="/jira/images/icons/priorities/minor.svg" title="Minor - Minor loss of function, or other problem where easy workaround is present." width="16"> Minor </span> 
                  </div> </li> 
                 <li class="item item-right"> 
                  <div class="wrap"> 
                   <strong class="name">Resolution:</strong> 
                   <span id="resolution-val" class="value resolved"> Fixed </span> 
                  </div> </li> 
                 <li class="item"> 
                  <div class="wrap"> 
                   <strong class="name">Affects Version/s:</strong> 
                   <span id="versions-val" class="value"> <span class="shorten" id="versions-field"> <span title="4.0-ALPHA Alpha release of the 4.x series">4.0-ALPHA</span> </span> </span> 
                  </div> </li> 
                 <li class="item item-right"> 
                  <div class="wrap"> 
                   <strong class="name">Fix Version/s:</strong> 
                   <span id="fixfor-val" class="value"> <span class="shorten" id="fixVersions-field"> <a href="/jira/issues/?jql=project+%3D+LUCENE+AND+fixVersion+%3D+3.5" title="3.5 Major release after 3.4">3.5</a>, <a href="/jira/issues/?jql=project+%3D+LUCENE+AND+fixVersion+%3D+4.0-ALPHA" title="4.0-ALPHA Alpha release of the 4.x series">4.0-ALPHA</a> </span> </span> 
                  </div> </li> 
                 <li class="item"> 
                  <div class="wrap"> 
                   <strong class="name">Component/s:</strong> 
                   <span id="components-val" class="value"> <span class="shorten" id="components-field"> <a href="/jira/issues/?jql=project+%3D+LUCENE+AND+component+%3D+%22core%2Findex%22" title="core/index issues with indexing code">core/index</a> </span> </span> 
                  </div> </li> 
                 <li class="item full-width"> 
                  <div class="wrap" id="wrap-labels"> 
                   <strong class="name">Labels:</strong> 
                   <div class="labels-wrap value"> 
                    <span class="labels" id="labels-12438385-value">None</span> 
                   </div> 
                  </div> </li> 
                </ul> 
                <div id="customfieldmodule"> 
                 <div class="aui-tabs horizontal-tabs" id="customfield-tabs"> 
                  <div id="customfield-panel-1" class="tabs-pane active-pane"> 
                   <ul class="property-list"> 
                    <li id="rowForcustomfield_12310120" class="item"> 
                     <div class="wrap"> 
                      <strong title="Lucene Fields" class="name">Lucene Fields:</strong> 
                      <div id="customfield_12310120-val" class="value type-multicheckboxes" data-fieldtype="multicheckboxes" data-fieldtypecompletekey="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes"> 
                       <div class="shorten" id="customfield_12310120-field"> 
                        <span>New</span> 
                       </div> 
                      </div> 
                     </div> </li> 
                   </ul> 
                  </div> 
                 </div>
                </div> 
               </div>
              </div>
              <div id="descriptionmodule" class="module toggle-wrap">
               <div id="descriptionmodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Description</h2>
               </div>
               <div class="mod-content">
                <div id="description-val" class="field-ignore-highlight"> 
                 <div class="user-content-block"> 
                  <p>There are various places in Lucene that could take advantage of an<br> efficient packed unsigned int/long impl. EG the terms dict index in<br> the standard codec in <a href="https://issues.apache.org/jira/browse/LUCENE-1458" title="Further steps towards flexible indexing" class="issue-link" data-issue-key="LUCENE-1458"><del>LUCENE-1458</del></a> could subsantially reduce it's RAM<br> usage. FieldCache.StringIndex could as well. And I think "load into<br> RAM" codecs like the one in TestExternalCodecs could use this too.</p> 
                  <p>I'm picturing something very basic like:</p> 
                  <div class="code panel" style="border-width: 1px;">
                   <div class="codeContent panelContent"> 
                    <pre class="code-java"><span class="code-keyword">interface</span> PackedUnsignedLongs  {
  <span class="code-object">long</span> get(<span class="code-object">long</span> index);
  void set(<span class="code-object">long</span> index, <span class="code-object">long</span> value);
}
</pre> 
                   </div>
                  </div> 
                  <p>Plus maybe an iterator for getting and maybe also for setting. If it<br> helps, most of the usages of this inside Lucene will be "write once"<br> so eg the set could make that an assumption/requirement.</p> 
                  <p>And a factory somewhere:</p> 
                  <div class="code panel" style="border-width: 1px;">
                   <div class="codeContent panelContent"> 
                    <pre class="code-java">  PackedUnsignedLongs create(<span class="code-object">int</span> count, <span class="code-object">long</span> maxValue);
</pre> 
                   </div>
                  </div> 
                  <p>I think we should simply autogen the code (we can start from the<br> autogen code in <a href="https://issues.apache.org/jira/browse/LUCENE-1410" title="PFOR implementation" class="issue-link" data-issue-key="LUCENE-1410"><del>LUCENE-1410</del></a>), or, if there is an good existing impl<br> that has a compatible license that'd be great.</p> 
                  <p>I don't have time near-term to do this... so if anyone has the itch,<br> please jump!</p> 
                 </div> 
                </div> 
               </div>
              </div>
              <div id="dnd-metadata" class="module toggle-wrap">
               <div id="dnd-metadata_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Attachments</h2>
               </div>
               <div class="mod-content">
                <div id="dnd-metadata-webpanel" data-can-attach="false" data-project-type="software" data-upload-limit="62914560" data-thumbnails-allowed="false"></div>
               </div>
              </div>
              <div id="attachmentmodule" class="module toggle-wrap">
               <div id="attachmentmodule_heading" class="mod-header">
                <ul class="ops">
                 <li class="drop">
                  <div class="aui-dd-parent">
                   <a href="#" class="icon drop-menu js-default-dropdown" title="Options"><span>Options</span></a>
                   <div class="aui-dropdown-content aui-list">
                    <ul id="attachment-sorting-options" class="aui-list-section aui-first">
                     <li class="aui-list-item"><a id="attachment-sort-key-name" href="/jira/browse/LUCENE-1990?attachmentSortBy=fileName#attachmentmodule" class="aui-list-checked aui-checked aui-list-item-link" title="viewissue.subtasks.tab.show.all.name"><span>Sort By Name</span></a></li>
                     <li class="aui-list-item"><a id="attachment-sort-key-date" href="/jira/browse/LUCENE-1990?attachmentSortBy=dateTime#attachmentmodule" class="aui-list-checked aui-list-item-link" title="Sort By Date"><span>Sort By Date</span></a></li>
                    </ul>
                    <ul id="attachment-sorting-order-options" class="aui-list-section aui-last">
                     <li class="aui-list-item"><a id="attachment-sort-direction-asc" href="/jira/browse/LUCENE-1990?attachmentOrder=asc#attachmentmodule" class="aui-list-checked aui-checked aui-list-item-link" title="Ascending"><span>Ascending</span></a></li>
                     <li class="aui-list-item"><a id="attachment-sort-direction-desc" href="/jira/browse/LUCENE-1990?attachmentOrder=desc#attachmentmodule" class="aui-list-checked aui-list-item-link" title="Descending"><span>Descending</span></a></li>
                    </ul>
                   </div>
                  </div></li>
                </ul>
                <h2 class="toggle-title">Attachments</h2>
               </div>
               <div class="mod-content">
                <ol id="file_attachments" class="item-attachments" data-sort-key="fileName" data-sort-order="asc">
                 <li class="attachment-content js-file-attachment" data-attachment-id="12437268" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12437268/generated_performance-te20100226.txt" draggable="true" data-downloadurl="text/plain:generated_performance-te20100226.txt:https://issues.apache.org/jira/secure/attachment/12437268/generated_performance-te20100226.txt"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12437268/generated_performance-te20100226.txt" title="Latest  26/Feb/10 22:55 - Toke Eskildsen" draggable="true" data-downloadurl="text/plain:generated_performance-te20100226.txt:https://issues.apache.org/jira/secure/attachment/12437268/generated_performance-te20100226.txt">generated_performance-te20100226.txt</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-02-26T22:55:25.321Z">26/Feb/10 22:55</time>
                   </dd>
                   <dd class="attachment-size">
                    23 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12429343" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12429343/LUCENE-1990_PerformanceMeasurements20100104.zip" draggable="true" data-downloadurl="application/zip:LUCENE-1990_PerformanceMeasurements20100104.zip:https://issues.apache.org/jira/secure/attachment/12429343/LUCENE-1990_PerformanceMeasurements20100104.zip"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-zip" title="Zip Archive"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12429343/LUCENE-1990_PerformanceMeasurements20100104.zip" title="Latest  04/Jan/10 14:25 - Toke Eskildsen" draggable="true" data-downloadurl="application/zip:LUCENE-1990_PerformanceMeasurements20100104.zip:https://issues.apache.org/jira/secure/attachment/12429343/LUCENE-1990_PerformanceMeasurements20100104.zip">LUCENE-1990_PerformanceMeasurements20100104.zip</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-01-04T14:25:02.889Z">04/Jan/10 14:25</time>
                   </dd>
                   <dd class="attachment-size">
                    18 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12440546" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12440546/LUCENE-1990.patch" draggable="true" data-downloadurl="text/plain:LUCENE-1990.patch:https://issues.apache.org/jira/secure/attachment/12440546/LUCENE-1990.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12440546/LUCENE-1990.patch" title="Latest  01/Apr/10 22:06 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-1990.patch:https://issues.apache.org/jira/secure/attachment/12440546/LUCENE-1990.patch">LUCENE-1990.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-04-01T22:06:17.297Z">01/Apr/10 22:06</time>
                   </dd>
                   <dd class="attachment-size">
                    4 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment earlier-version" data-attachment-id="12438331" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12438331/LUCENE-1990.patch" draggable="true" data-downloadurl="text/plain:LUCENE-1990.patch:https://issues.apache.org/jira/secure/attachment/12438331/LUCENE-1990.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12438331/LUCENE-1990.patch" title=" 09/Mar/10 22:14 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-1990.patch:https://issues.apache.org/jira/secure/attachment/12438331/LUCENE-1990.patch">LUCENE-1990.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-03-09T22:14:17.571Z">09/Mar/10 22:14</time>
                   </dd>
                   <dd class="attachment-size">
                    73 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment earlier-version" data-attachment-id="12430125" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12430125/LUCENE-1990.patch" draggable="true" data-downloadurl="text/plain:LUCENE-1990.patch:https://issues.apache.org/jira/secure/attachment/12430125/LUCENE-1990.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12430125/LUCENE-1990.patch" title=" 13/Jan/10 12:22 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-1990.patch:https://issues.apache.org/jira/secure/attachment/12430125/LUCENE-1990.patch">LUCENE-1990.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-01-13T12:22:15.377Z">13/Jan/10 12:22</time>
                   </dd>
                   <dd class="attachment-size">
                    251 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12431107" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12431107/LUCENE-1990-te20100122.patch" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100122.patch:https://issues.apache.org/jira/secure/attachment/12431107/LUCENE-1990-te20100122.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-devtools-file" title="File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12431107/LUCENE-1990-te20100122.patch" title="Latest  22/Jan/10 12:27 - Toke Eskildsen" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100122.patch:https://issues.apache.org/jira/secure/attachment/12431107/LUCENE-1990-te20100122.patch">LUCENE-1990-te20100122.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-01-22T12:27:10.713Z">22/Jan/10 12:27</time>
                   </dd>
                   <dd class="attachment-size">
                    281 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12435453" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12435453/LUCENE-1990-te20100210.patch" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100210.patch:https://issues.apache.org/jira/secure/attachment/12435453/LUCENE-1990-te20100210.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-devtools-file" title="File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12435453/LUCENE-1990-te20100210.patch" title="Latest  10/Feb/10 14:49 - Toke Eskildsen" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100210.patch:https://issues.apache.org/jira/secure/attachment/12435453/LUCENE-1990-te20100210.patch">LUCENE-1990-te20100210.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-02-10T14:49:44.280Z">10/Feb/10 14:49</time>
                   </dd>
                   <dd class="attachment-size">
                    71 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12435654" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12435654/LUCENE-1990-te20100212.patch" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100212.patch:https://issues.apache.org/jira/secure/attachment/12435654/LUCENE-1990-te20100212.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-devtools-file" title="File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12435654/LUCENE-1990-te20100212.patch" title="Latest  12/Feb/10 02:57 - Toke Eskildsen" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100212.patch:https://issues.apache.org/jira/secure/attachment/12435654/LUCENE-1990-te20100212.patch">LUCENE-1990-te20100212.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-02-12T02:57:19.868Z">12/Feb/10 02:57</time>
                   </dd>
                   <dd class="attachment-size">
                    99 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12436719" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12436719/LUCENE-1990-te20100223.patch" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100223.patch:https://issues.apache.org/jira/secure/attachment/12436719/LUCENE-1990-te20100223.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-devtools-file" title="File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12436719/LUCENE-1990-te20100223.patch" title="Latest  23/Feb/10 15:33 - Toke Eskildsen" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100223.patch:https://issues.apache.org/jira/secure/attachment/12436719/LUCENE-1990-te20100223.patch">LUCENE-1990-te20100223.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-02-23T15:33:30.551Z">23/Feb/10 15:33</time>
                   </dd>
                   <dd class="attachment-size">
                    103 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12437187" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12437187/LUCENE-1990-te20100226.patch" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100226.patch:https://issues.apache.org/jira/secure/attachment/12437187/LUCENE-1990-te20100226.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-devtools-file" title="File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12437187/LUCENE-1990-te20100226.patch" title="Latest  26/Feb/10 14:03 - Toke Eskildsen" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100226.patch:https://issues.apache.org/jira/secure/attachment/12437187/LUCENE-1990-te20100226.patch">LUCENE-1990-te20100226.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-02-26T14:03:54.716Z">26/Feb/10 14:03</time>
                   </dd>
                   <dd class="attachment-size">
                    130 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12437199" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12437199/LUCENE-1990-te20100226b.patch" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100226b.patch:https://issues.apache.org/jira/secure/attachment/12437199/LUCENE-1990-te20100226b.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-devtools-file" title="File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12437199/LUCENE-1990-te20100226b.patch" title="Latest  26/Feb/10 15:49 - Toke Eskildsen" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100226b.patch:https://issues.apache.org/jira/secure/attachment/12437199/LUCENE-1990-te20100226b.patch">LUCENE-1990-te20100226b.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-02-26T15:49:46.731Z">26/Feb/10 15:49</time>
                   </dd>
                   <dd class="attachment-size">
                    134 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12437267" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12437267/LUCENE-1990-te20100226c.patch" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100226c.patch:https://issues.apache.org/jira/secure/attachment/12437267/LUCENE-1990-te20100226c.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-devtools-file" title="File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12437267/LUCENE-1990-te20100226c.patch" title="Latest  26/Feb/10 22:55 - Toke Eskildsen" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100226c.patch:https://issues.apache.org/jira/secure/attachment/12437267/LUCENE-1990-te20100226c.patch">LUCENE-1990-te20100226c.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-02-26T22:55:25.296Z">26/Feb/10 22:55</time>
                   </dd>
                   <dd class="attachment-size">
                    356 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12437485" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12437485/LUCENE-1990-te20100301.patch" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100301.patch:https://issues.apache.org/jira/secure/attachment/12437485/LUCENE-1990-te20100301.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-devtools-file" title="File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12437485/LUCENE-1990-te20100301.patch" title="Latest  01/Mar/10 14:11 - Toke Eskildsen" draggable="true" data-downloadurl="text/x-patch:LUCENE-1990-te20100301.patch:https://issues.apache.org/jira/secure/attachment/12437485/LUCENE-1990-te20100301.patch">LUCENE-1990-te20100301.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-03-01T14:11:43.470Z">01/Mar/10 14:11</time>
                   </dd>
                   <dd class="attachment-size">
                    364 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12437338" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12437338/perf-mkm-20100227.txt" draggable="true" data-downloadurl="text/plain:perf-mkm-20100227.txt:https://issues.apache.org/jira/secure/attachment/12437338/perf-mkm-20100227.txt"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12437338/perf-mkm-20100227.txt" title="Latest  27/Feb/10 11:13 - Michael McCandless" draggable="true" data-downloadurl="text/plain:perf-mkm-20100227.txt:https://issues.apache.org/jira/secure/attachment/12437338/perf-mkm-20100227.txt">perf-mkm-20100227.txt</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-02-27T11:13:42.498Z">27/Feb/10 11:13</time>
                   </dd>
                   <dd class="attachment-size">
                    7 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12437484" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12437484/performance-20100301.txt" draggable="true" data-downloadurl="text/plain:performance-20100301.txt:https://issues.apache.org/jira/secure/attachment/12437484/performance-20100301.txt"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12437484/performance-20100301.txt" title="Latest  01/Mar/10 14:11 - Toke Eskildsen" draggable="true" data-downloadurl="text/plain:performance-20100301.txt:https://issues.apache.org/jira/secure/attachment/12437484/performance-20100301.txt">performance-20100301.txt</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-03-01T14:11:43.392Z">01/Mar/10 14:11</time>
                   </dd>
                   <dd class="attachment-size">
                    45 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12437200" data-issue-id="12438385" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12437200/performance-te20100226.txt" draggable="true" data-downloadurl="text/plain:performance-te20100226.txt:https://issues.apache.org/jira/secure/attachment/12437200/performance-te20100226.txt"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12437200/performance-te20100226.txt" title="Latest  26/Feb/10 15:49 - Toke Eskildsen" draggable="true" data-downloadurl="text/plain:performance-te20100226.txt:https://issues.apache.org/jira/secure/attachment/12437200/performance-te20100226.txt">performance-te20100226.txt</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2010-02-26T15:49:46.754Z">26/Feb/10 15:49</time>
                   </dd>
                   <dd class="attachment-size">
                    33 kB
                   </dd>
                   <dd class="attachment-author">
                    Toke Eskildsen
                   </dd>
                  </dl></li>
                </ol>
               </div>
              </div>
              <div id="linkingmodule" class="module toggle-wrap">
               <div id="linkingmodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Issue Links</h2>
               </div>
               <div class="mod-content"> 
                <div class="links-container" data-default-link-icon="/jira/images/icons/generic_link_16.png"> 
                 <dl class="links-list "> 
                  <dt title="blocks">
                   blocks
                  </dt> 
                  <dd id="internal-12444498_10032"> 
                   <div class="link-content"> 
                    <p> <img src="/jira/secure/viewavatar?size=xsmall&amp;avatarId=21141&amp;avatarType=issuetype" width="16" height="16" title="New Feature - A new feature of the product, which has yet to be developed." alt="New Feature - A new feature of the product, which has yet to be developed."> <span title="LUCENE-2186: First cut at column-stride fields (index values storage)"> <a href="/jira/browse/LUCENE-2186" data-issue-key="LUCENE-2186" class="issue-link link-title resolution">LUCENE-2186</a> <span class="link-summary">First cut at column-stride fields (index values storage)</span> </span> </p> 
                    <ul class="link-snapshot"> 
                     <li class="priority"> <img src="/jira/images/icons/priorities/major.svg" width="16" height="16" title="Major - Major loss of function." alt="Major - Major loss of function."> </li> 
                     <li class="status"> <span class=" jira-issue-status-lozenge aui-lozenge jira-issue-status-lozenge-green jira-issue-status-lozenge-done aui-lozenge-subtle jira-issue-status-lozenge-max-width-short" data-tooltip="<span class=&quot;jira-issue-status-tooltip-title&quot;>Closed</span><br><span class=&quot;jira-issue-status-tooltip-desc&quot;>The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.</span>">Closed</span> </li> 
                    </ul> 
                   </div> 
                  </dd> 
                  <dd id="internal-12442974_10032"> 
                   <div class="link-content"> 
                    <p> <img src="/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype" width="16" height="16" title="Improvement - An improvement or enhancement to an existing feature or task." alt="Improvement - An improvement or enhancement to an existing feature or task."> <span title="LUCENE-2141: Make String and StringIndex in field cache more RAM efficient"> <a href="/jira/browse/LUCENE-2141" data-issue-key="LUCENE-2141" class="issue-link link-title resolution">LUCENE-2141</a> <span class="link-summary">Make String and StringIndex in field cache more RAM efficient</span> </span> </p> 
                    <ul class="link-snapshot"> 
                     <li class="priority"> <img src="/jira/images/icons/priorities/major.svg" width="16" height="16" title="Major - Major loss of function." alt="Major - Major loss of function."> </li> 
                     <li class="status"> <span class=" jira-issue-status-lozenge aui-lozenge jira-issue-status-lozenge-green jira-issue-status-lozenge-done aui-lozenge-subtle jira-issue-status-lozenge-max-width-short" data-tooltip="<span class=&quot;jira-issue-status-tooltip-title&quot;>Resolved</span><br><span class=&quot;jira-issue-status-tooltip-desc&quot;>A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.</span>">Resolved</span> </li> 
                    </ul> 
                   </div> 
                  </dd> 
                 </dl> 
                 <dl class="links-list "> 
                  <dt title="is related to">
                   is related to
                  </dt> 
                  <dd id="internal-12473234_10030"> 
                   <div class="link-content"> 
                    <p> <img src="/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype" width="16" height="16" title="Bug - A problem which impairs or prevents the functions of the product." alt="Bug - A problem which impairs or prevents the functions of the product."> <span title="LUCENE-2633: PackedInts does not support structures above 256MB"> <a href="/jira/browse/LUCENE-2633" data-issue-key="LUCENE-2633" class="issue-link link-title resolution">LUCENE-2633</a> <span class="link-summary">PackedInts does not support structures above 256MB</span> </span> </p> 
                    <ul class="link-snapshot"> 
                     <li class="priority"> <img src="/jira/images/icons/priorities/major.svg" width="16" height="16" title="Major - Major loss of function." alt="Major - Major loss of function."> </li> 
                     <li class="status"> <span class=" jira-issue-status-lozenge aui-lozenge jira-issue-status-lozenge-green jira-issue-status-lozenge-done aui-lozenge-subtle jira-issue-status-lozenge-max-width-short" data-tooltip="<span class=&quot;jira-issue-status-tooltip-title&quot;>Closed</span><br><span class=&quot;jira-issue-status-tooltip-desc&quot;>The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.</span>">Closed</span> </li> 
                    </ul> 
                   </div> 
                  </dd> 
                 </dl> 
                </div> 
               </div>
              </div>
              <div id="activitymodule" class="module toggle-wrap">
               <div id="activitymodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Activity</h2>
               </div>
               <div class="mod-content"> 
                <big-pipe data-id="activity-panel-pipe-id" style="height: 70px"> 
                 <div></div> 
                </big-pipe> 
               </div>
              </div>
             </div>
             <div id="viewissuesidebar" class="aui-item issue-side-column">
              <div id="peoplemodule" class="module toggle-wrap">
               <div id="peoplemodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">People</h2>
               </div>
               <div class="mod-content"> 
                <ul class="item-details" id="peopledetails"> 
                 <li class="people-details"> 
                  <dl> 
                   <dt>
                    Assignee:
                   </dt> 
                   <dd> 
                    <span id="assignee-val" class="view-issue-field"> <span class="aui-avatar aui-avatar-small"><span class="aui-avatar-inner"><img src="https://issues.apache.org/jira/secure/useravatar?size=small&amp;avatarId=10453"></span></span> Unassigned </span> 
                   </dd> 
                  </dl> 
                  <dl> 
                   <dt>
                    Reporter:
                   </dt> 
                   <dd> 
                    <span id="reporter-val" class="view-issue-field"> <span class="user-hover" id="issue_summary_reporter_mikemccand" rel="mikemccand" data-user="{&quot;avatarUrl&quot;:&quot;https://issues.apache.org/jira/secure/useravatar?size=xsmall&amp;avatarId=10452&quot;,&quot;displayName&quot;:&quot;Michael McCandless&quot;,&quot;emailAddress&quot;:&quot;lucene@mikemccandless.com&quot;,&quot;username&quot;:&quot;mikemccand&quot;}"> <span class="aui-avatar aui-avatar-small"><span class="aui-avatar-inner"><img src="https://issues.apache.org/jira/secure/useravatar?size=small&amp;avatarId=10452" alt="mikemccand"></span></span> Michael McCandless </span> </span> 
                   </dd> 
                  </dl> </li> 
                </ul> 
                <ul class="item-details"> 
                 <li> 
                  <dl> 
                   <dt>
                    Votes:
                   </dt> 
                   <dd> 
                    <span id="vote-data" class="aui-badge vote-state-off">0</span> 
                    <span id="vote-label" title="You have to be logged in to vote for an issue.">Vote for this issue</span> 
                   </dd> 
                  </dl> 
                  <dl> 
                   <dt>
                    Watchers:
                   </dt> 
                   <dd> 
                    <span id="watcher-data" class="aui-badge watch-state-off">3</span> 
                    <span id="watch-label" title="You have to be logged in to watch an issue.">Start watching this issue</span> 
                   </dd> 
                  </dl> </li> 
                </ul> 
               </div>
              </div>
              <div id="datesmodule" class="module toggle-wrap">
               <div id="datesmodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Dates</h2>
               </div>
               <div class="mod-content"> 
                <ul class="item-details"> 
                 <li> 
                  <dl class="dates"> 
                   <dt>
                    Created:
                   </dt> 
                   <dd class="date user-tz" title="18/Oct/09 12:53"> 
                    <span data-name="Created" id="created-val" data-fieldtype="datetime"> <time class="livestamp" datetime="2009-10-18T12:53:22+0000">18/Oct/09 12:53</time> </span> 
                   </dd> 
                  </dl> 
                  <dl class="dates"> 
                   <dt>
                    Updated:
                   </dt> 
                   <dd class="date user-tz" title="27/Nov/11 12:29"> 
                    <span data-name="Updated" id="updated-val" data-fieldtype="datetime"> <time class="livestamp" datetime="2011-11-27T12:29:33+0000">27/Nov/11 12:29</time> </span> 
                   </dd> 
                  </dl> 
                  <dl class="dates"> 
                   <dt>
                    Resolved:
                   </dt> 
                   <dd class="date user-tz" title="06/Apr/10 20:58"> 
                    <span data-name="Resolved" id="resolutiondate-val" data-fieldtype="datetime"> <time class="livestamp" datetime="2010-04-06T20:58:39+0000">06/Apr/10 20:58</time> </span> 
                   </dd> 
                  </dl> </li> 
                </ul> 
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
     <!-- .aui-page-panel-inner -->
    </div>
    <!-- .aui-page-panel -->
    <div class="issue-navigator-init"></div> 
   </section> 
   <footer id="footer" role="contentinfo"> 
    <section class="footer-body"> 
     <ul class="atlassian-footer"> 
      <li> Atlassian JIRA <a class="seo-link" rel="nofollow" href="https://www.atlassian.com/software/jira">Project Management Software</a> <span id="footer-build-information">(v7.6.3#76005-<span title="8a4e38d34af948780dbf52044e7aafb13a7cae58" data-commit-id="8a4e38d34af948780dbf52044e7aafb13a7cae58}">sha1:8a4e38d</span>)</span> </li> 
      <li> <a id="about-link" rel="nofollow" href="/jira/secure/AboutPage.jspa/secure/AboutPage.jspa">About JIRA</a> </li> 
      <li> <a id="footer-report-problem-link" rel="nofollow" href="/jira/secure/CreateIssue!default.jspa">Report a problem</a> </li> 
     </ul> 
     <ul class="atlassian-footer"> 
      <li class="licensemessage"> Powered by a free Atlassian <a rel="nofollow" href="http://www.atlassian.com/software/jira">JIRA</a> open source license for n/a, Apache Software Foundation. Try JIRA - <a rel="nofollow" href="http://www.atlassian.com/software/jira">bug tracking software</a> for <i>your</i> team. </li> 
     </ul> 
     <div id="footer-logo">
      <a rel="nofollow" href="http://www.atlassian.com/">Atlassian</a>
     </div> 
    </section> 
    <fieldset class="hidden parameters"> 
     <input type="hidden" title="loggedInUser" value=""> 
     <input type="hidden" title="ajaxTimeout" value="The call to the JIRA server did not complete within the timeout period.  We are unsure of the result of this operation."> 
     <input type="hidden" title="JiraVersion" value="7.6.3"> 
     <input type="hidden" title="ajaxUnauthorised" value="You are not authorised to perform this operation. Please log in."> 
     <input type="hidden" title="baseURL" value="https://issues.apache.org/jira"> 
     <input type="hidden" title="ajaxCommsError" value="The JIRA server could not be contacted. This may be a temporary glitch or the server may be down. "> 
     <input type="hidden" title="ajaxServerError" value="The JIRA server was contacted but has returned an error response. We are unsure of the result of this operation."> 
     <input type="hidden" title="ajaxErrorCloseDialog" value="Close this dialog and press refresh in your browser"> 
     <input type="hidden" title="ajaxErrorDialogHeading" value="Communications Breakdown"> 
     <input type="hidden" title="dirtyMessage" value="You have entered new data on this page. If you navigate away from this page without first saving your data, the changes will be lost."> 
     <input type="hidden" title="dirtyDialogMessage" value="You have entered new data in this dialog. If you navigate away from this dialog without first saving your data, the changes will be lost. Click cancel to return to the dialog."> 
     <input type="hidden" title="keyType" value="Type"> 
     <input type="hidden" title="keyThen" value="then"> 
     <input type="hidden" title="dblClickToExpand" value="Double click to expand"> 
     <input type="hidden" title="actions" value="Actions"> 
     <input type="hidden" title="removeItem" value="Remove"> 
     <input type="hidden" title="workflow" value="Workflow"> 
     <input type="hidden" title="labelNew" value="New Label"> 
     <input type="hidden" title="issueActionsHint" value="Begin typing for available operations or press down to see all"> 
     <input type="hidden" title="closelink" value="Close"> 
     <input type="hidden" title="dotOperations" value="Operations"> 
     <input type="hidden" title="dotLoading" value="Loading..."> 
     <input type="hidden" title="frotherSuggestions" value="Suggestions"> 
     <input type="hidden" title="frotherNomatches" value="No Matches"> 
     <input type="hidden" title="multiselectVersionsError" value="{0} is not a valid version."> 
     <input type="hidden" title="multiselectComponentsError" value="{0} is not a valid component."> 
     <input type="hidden" title="multiselectGenericError" value="The value {0} is invalid."> 
    </fieldset> 
   </footer> 
  </div> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:bigpipe-js/jira.webresources:bigpipe-js.js" data-wrm-key="jira.webresources:bigpipe-js" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["activity-panel-pipe-id"]="\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    \u003cdiv class=\\\"tabwrap tabs2\\\"\u003e\\n\\n        \u003cul id=\\\"issue-tabs\\\" class=\\\"tabs horizontal\\\"\u003e\\n                                \\n            \u003cli  data-id=\\\"all-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel\\\" data-label=\\\"All\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-1990?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"all-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-1990?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel\\\"\u003e\u003cstrong\u003eAll\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  class=\\\"active\\\" id=\\\"comment-tabpanel\\\"  data-id=\\\"comment-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel\\\" data-label=\\\"Comments\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-1990?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel\\\"\u003e\\n                            \u003cstrong tabindex=\\\"0\\\"\u003eComments\u003c\\/strong\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"worklog-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:worklog-tabpanel\\\" data-label=\\\"Work Log\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-1990?page=com.atlassian.jira.plugin.system.issuetabpanels:worklog-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"worklog-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-1990?page=com.atlassian.jira.plugin.system.issuetabpanels:worklog-tabpanel\\\"\u003e\u003cstrong\u003eWork Log\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"changehistory-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel\\\" data-label=\\\"History\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-1990?page=com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"changehistory-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-1990?page=com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel\\\"\u003e\u003cstrong\u003eHistory\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"activity-stream-issue-tab\\\" data-key=\\\"com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab\\\" data-label=\\\"Activity\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-1990?page=com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"activity-stream-issue-tab\\\" href=\\\"\\/jira\\/browse\\/LUCENE-1990?page=com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab\\\"\u003e\u003cstrong\u003eActivity\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"transitions-summary-tabpanel\\\" data-key=\\\"com.googlecode.jira-suite-utilities:transitions-summary-tabpanel\\\" data-label=\\\"Transitions\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-1990?page=com.googlecode.jira-suite-utilities:transitions-summary-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"transitions-summary-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-1990?page=com.googlecode.jira-suite-utilities:transitions-summary-tabpanel\\\"\u003e\u003cstrong\u003eTransitions\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                \u003c\\/ul\u003e\\n\\n                    \u003cdiv class=\\\"sortwrap\\\"\u003e\\n                                    \u003ca class=\\\"issue-activity-sort-link ajax-activity-content\\\" rel=\\\"nofollow\\\" data-tab-sort data-order=\\\"desc\\\" href=\\\"\\/jira\\/browse\\/LUCENE-1990?actionOrder=desc\\\" title=\\\"Ascending order - Click to sort in descending order\\\"\u003e\\n                        \u003cspan class=\\\"aui-icon aui-icon-small aui-iconfont-up\\\"\u003eAscending order - Click to sort in descending order\u003c\\/span\u003e\\n                    \u003c\\/a\u003e\\n                            \u003c\\/div\u003e\\n            \u003c\\/div\u003e\\n    \u003cdiv class=\\\"issuePanelWrapper\\\"\u003e\\n        \u003cdiv class=\\\"issuePanelProgress\\\"\u003e\u003c\\/div\u003e\\n        \u003cdiv class=\\\"issuePanelContainer\\\" id=\\\"issue_actions_container\\\"\u003e\\n                                    \\n\\n\\n\u003cdiv id=\\\"comment-12775420\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12775420&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12775420\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n                                            \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"funtick\\\" id=\\\"commentauthor_12775420_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=funtick\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"funtick\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Fuad Efendi\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12775420_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'10\\/Nov\\/09 14:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2009-11-10T14:00:42+0000\'\u003e10\\/Nov\\/09 14:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e   - \u003cspan class=\\\"redText subText\\\" title=\\\"Fuad Efendi - 10\\/Nov\\/09 16:11\\\"\u003eedited\u003c\\/span\u003e \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\\n\u003cp\u003eSpecifically for FieldCache, let\'s see... suppose Field may have 8 different values, and number of documents is high.\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003eValue0  0  1  0  0  0  0  0   0  1  0  0  0  0  0 ...  \\nValue1  1  0  1  0  0  0  0   0  0  0  0  0  0  0 ...  \\nValue2  0  0  0  1  1  0  0   0  0  0  0  0  0  0 ...  \\nValue3  0  0  0  0  0  0  0   0  0  0  0  1  0  0 ...  \\nValue4  0  0  0  0  0  0  1   0  0  0  0  0  0  0 ...  \\nValue5  0  0  0  0  0  1  0   0  0  0  1  0  1  0 ...  \\nValue6  0  0  0  0  0  0  0   1  0  1  0  0  0  0 ...  \\nValue7  0  0  0  0  0  0  0   0  0  0  0  0  0  1 ...  \\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003erepresented as Matrix (or as a Vector); for instance, first row means that Document1 and Document8 have Value0.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eAnd now, if we go \\\"horizontally\\\" we will end up with 8 arrays of int[]. What if we go \\\"vertically\\\"? Field could be encoded as 3-bit (8 different values).\u003c\\/p\u003e\\n\\n\u003cp\u003eCONSTRAINT: specifically for FieldCache, each Column must have the only \\\"1\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003eAnd we can end with array of 3-bit values storing position in a column! Size of array is IndexReader.maxDoc().\u003c\\/p\u003e\\n\\n\\n\u003cp\u003ehope I am reinventing bycycle \u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/smile.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e\u003c\\/p\u003e\\n\\n\u003cp\u003eP.S.\u003cbr\\/\u003e\\nOf course each solution has pros and cons, I am trying to focus on FieldCache specific use cases.\u003c\\/p\u003e\\n\\n\u003cp\u003e1. For a given document ID, find a value for a field\u003cbr\\/\u003e\\n2. For a given query results, sort it by a field values\u003cbr\\/\u003e\\n3. For a given query results, count \\\"facet\\\" for each field value\u003c\\/p\u003e\\n\\n\u003cp\u003eI don\'t think such naive compression is slower than abstract int[] arrays... and we need to change public API of field cache too: if method returns int[] we are not saving any RAM.\u003c\\/p\u003e\\n\\n\u003cp\u003eBetter is to compare with SOLR use cases and to make API closer to real requirements; SOLR operates with some bitsets instead of arrays...\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n                                            \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"funtick\\\" id=\\\"commentauthor_12775420_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=funtick\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"funtick\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Fuad Efendi\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12775420_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'10\\/Nov\\/09 14:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2009-11-10T14:00:42+0000\'\u003e10\\/Nov\\/09 14:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e   - \u003cspan class=\\\"redText subText\\\" title=\\\"Fuad Efendi - 10\\/Nov\\/09 16:11\\\"\u003eedited\u003c\\/span\u003e                  \\n Specifically for FieldCache, let\'s see... suppose Field may have 8 different values, and number of documents is high. \\n\\n  \\n Value0  0  1  0  0  0  0  0   0  1  0  0  0  0  0 ...  \\nValue1  1  0  1  0  0  0  0   0  0  0  0  0  0  0 ...  \\nValue2  0  0  0  1  1  0  0   0  0  0  0  0  0  0 ...  \\nValue3  0  0  0  0  0  0  0   0  0  0  0  1  0  0 ...  \\nValue4  0  0  0  0  0  0  1   0  0  0  0  0  0  0 ...  \\nValue5  0  0  0  0  0  1  0   0  0  0  1  0  1  0 ...  \\nValue6  0  0  0  0  0  0  0   1  0  1  0  0  0  0 ...  \\nValue7  0  0  0  0  0  0  0   0  0  0  0  0  0  1 ...  \\n \\n  \\n\\n \\n\\t represented as Matrix (or as a Vector); for instance, first row means that Document1 and Document8 have Value0. \\n \\n\\n\\n And now, if we go \\\"horizontally\\\" we will end up with 8 arrays of int[]. What if we go \\\"vertically\\\"? Field could be encoded as 3-bit (8 different values). \\n\\n CONSTRAINT: specifically for FieldCache, each Column must have the only \\\"1\\\". \\n\\n And we can end with array of 3-bit values storing position in a column! Size of array is IndexReader.maxDoc(). \\n\\n\\n hope I am reinventing bycycle   \\n\\n P.S. \\nOf course each solution has pros and cons, I am trying to focus on FieldCache specific use cases. \\n\\n 1. For a given document ID, find a value for a field \\n2. For a given query results, sort it by a field values \\n3. For a given query results, count \\\"facet\\\" for each field value \\n\\n I don\'t think such naive compression is slower than abstract int[] arrays... and we need to change public API of field cache too: if method returns int[] we are not saving any RAM. \\n\\n Better is to compare with SOLR use cases and to make API closer to real requirements; SOLR operates with some bitsets instead of arrays...              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12776703\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12776703&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12776703\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"earwin\\\" id=\\\"commentauthor_12776703_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=earwin\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"earwin\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Earwin Burrfoot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12776703_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'11\\/Nov\\/09 22:46\'\u003e\u003ctime class=\'livestamp\' datetime=\'2009-11-11T22:46:05+0000\'\u003e11\\/Nov\\/09 22:46\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003ehope I am reinventing bycycle\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\u003cp\u003eI believe some databases do that.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"earwin\\\" id=\\\"commentauthor_12776703_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=earwin\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"earwin\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Earwin Burrfoot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12776703_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'11\\/Nov\\/09 22:46\'\u003e\u003ctime class=\'livestamp\' datetime=\'2009-11-11T22:46:05+0000\'\u003e11\\/Nov\\/09 22:46\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     hope I am reinventing bycycle  \\n I believe some databases do that.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12777054\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12777054&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12777054\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"funtick\\\" id=\\\"commentauthor_12777054_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=funtick\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"funtick\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Fuad Efendi\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12777054_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'12\\/Nov\\/09 17:02\'\u003e\u003ctime class=\'livestamp\' datetime=\'2009-11-12T17:02:09+0000\'\u003e12\\/Nov\\/09 17:02\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eSuttiwat sent me a link:\u003cbr\\/\u003e\\n\u003ca href=\\\"http:\\/\\/blog.juma.me.uk\\/2008\\/10\\/14\\/32-bit-or-64-bit-jvm-how-about-a-hybrid\\/\\\" class=\\\"external-link\\\" rel=\\\"nofollow\\\"\u003ehttp:\\/\\/blog.juma.me.uk\\/2008\\/10\\/14\\/32-bit-or-64-bit-jvm-how-about-a-hybrid\\/\u003c\\/a\u003e\u003c\\/p\u003e\\n\\n\u003cp\u003eThis is vendor-specific, and possibly may cause unexpected problems, but we can try in some specific cases:\u003cbr\\/\u003e\\n\\\"Compressed Oops have been included (but disabled by default) in the performance release JDK6u6p (requires you to fill a survey), so I decided to try it in an internal application and compare it with 64-bit mode and 32-bit mode.\\\"\u003c\\/p\u003e\\n\\n\u003cp\u003e-XX:+UseCompressedOops\u003c\\/p\u003e\\n\\n\u003cp\u003eThere are other vendors around too such as Oracle JRockit which is much faster server-side... \u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"funtick\\\" id=\\\"commentauthor_12777054_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=funtick\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"funtick\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Fuad Efendi\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12777054_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'12\\/Nov\\/09 17:02\'\u003e\u003ctime class=\'livestamp\' datetime=\'2009-11-12T17:02:09+0000\'\u003e12\\/Nov\\/09 17:02\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Suttiwat sent me a link: \\n http:\\/\\/blog.juma.me.uk\\/2008\\/10\\/14\\/32-bit-or-64-bit-jvm-how-about-a-hybrid\\/  \\n\\n This is vendor-specific, and possibly may cause unexpected problems, but we can try in some specific cases: \\n\\\"Compressed Oops have been included (but disabled by default) in the performance release JDK6u6p (requires you to fill a survey), so I decided to try it in an internal application and compare it with 64-bit mode and 32-bit mode.\\\" \\n\\n -XX:+UseCompressedOops \\n\\n There are other vendors around too such as Oracle JRockit which is much faster server-side...               \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12795228\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12795228&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12795228\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12795228_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12795228_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Dec\\/09 03:39\'\u003e\u003ctime class=\'livestamp\' datetime=\'2009-12-30T03:39:12+0000\'\u003e30\\/Dec\\/09 03:39\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI have very recently done some experiments with random-access packed positive integer arrays (we could also call them unsigned). The basic approach is to put the bits after each other in an int- or long-array, then extract the value by shifting and masking. Unfortunately I have not been able to determine a single winning strategy for space\\/speed trade-offs.\u003c\\/p\u003e\\n\\n\u003cp\u003eI\'ve tried four simple implementations:\u003c\\/p\u003e\\n\\n\u003cp\u003e1. Pack the bits right after each other.\u003cbr\\/\u003e\\n2. Pack the bits right after each other but allow only 1, 2, 4, 8, 16 or 32 as value-bits.\u003cbr\\/\u003e\\n3. Wrap an int[] or long[] and store the values directly (for comparison with 1 &amp; 2).\u003cbr\\/\u003e\\n4. Use int[] directly without any wrapping.\u003c\\/p\u003e\\n\\n\u003cp\u003e(Code can be found at \u003ca href=\\\"http:\\/\\/summa.svn.sourceforge.net\\/viewvc\\/summa\\/trunk\\/Common\\/src\\/dk\\/statsbiblioteket\\/summa\\/common\\/util\\/bits\\/\\\" class=\\\"external-link\\\" rel=\\\"nofollow\\\"\u003ehttp:\\/\\/summa.svn.sourceforge.net\\/viewvc\\/summa\\/trunk\\/Common\\/src\\/dk\\/statsbiblioteket\\/summa\\/common\\/util\\/bits\\/\u003c\\/a\u003e where #1 is BitsArrayPacked, #2 is BitsArrayAligned and #3 is BitsArrayInt)\u003c\\/p\u003e\\n\\n\u003cp\u003eThe obvious benefit from #2 is that the bits for values are always contained in a single block (int or long), which reduces the amount of operations for set and get considerably. Unfortunately this means that as soon as a value greater than 65535 needs to be stored, the internal representation will require 32 bits\\/value. This means no space-benefit compared to #3 while the speed penalty remains. A hybrid approach might be considered where the implementation is determined by the number of bits needed to store a value.\u003c\\/p\u003e\\n\\n\u003cp\u003eI\'ve done some performance tests of the implementations on an aging 1.8GHz single-core laptop (Dell 820). The code can be found at \u003ca href=\\\"http:\\/\\/summa.svn.sourceforge.net\\/viewvc\\/summa\\/trunk\\/Common\\/test\\/dk\\/statsbiblioteket\\/summa\\/common\\/util\\/bits\\/BitsArrayPerformanceTest.java?revision=2038&amp;view=markup\\\" class=\\\"external-link\\\" rel=\\\"nofollow\\\"\u003ehttp:\\/\\/summa.svn.sourceforge.net\\/viewvc\\/summa\\/trunk\\/Common\\/test\\/dk\\/statsbiblioteket\\/summa\\/common\\/util\\/bits\\/BitsArrayPerformanceTest.java?revision=2038&amp;view=markup\u003c\\/a\u003e\u003c\\/p\u003e\\n\\n\u003cp\u003eIn the tables below, the measurements for Packed, Aligned, Int, Constant and int[] are the total time in milliseconds to perform actionCount actions (either read or write). Random numbers (using the same seed) were used for index as well as value and the overhead of constructing the random numbers were subtracted from the measurements. \\\"Constant\\\" is a dummy where no values are stored and the same value is always returned on a get. It is used to measure method-call overhead.\u003c\\/p\u003e\\n\\n\u003cp\u003eFor arrays of 10M values, 6-33 million values can be read or written per second. If this is within acceptable limits, I\'d be happy to try and make a contribution to Lucene based on the code. However, I probably won\'t find the time before February or March 2010.\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003eactionCount arrayLength  actionType    valueMax  Packed(#1) Aligned(#2)     Int(#3)    Constant   \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e[](#4)\\n   10000000     1000000       write           1         583         416         984         254         635\\n   10000000     1000000       write          15         594         499        1172         286         843\\n   10000000     1000000       write         255         604         478        1057         213         656\\n   10000000     1000000       write         256         734         765        1062         109         729\\n   10000000     1000000       write       65535        1036         802        1124         417         734\\n   10000000     1000000       write       65536        1015        1130        1072         172         781\\n   10000000     1000000       write     2097151        1020        1187        1052         223         614\\n   10000000     1000000       write  2147483646        1136        1073         839          73         719\\n   10000000     1000000        read           1         286         203         786         104           0\\n   10000000     1000000        read          15         291         182         859          78           0\\n   10000000     1000000        read         255         672         494         989          67           0\\n   10000000     1000000        read         256         568         729        1104          93           0\\n   10000000     1000000        read       65535         833         755        1088          99           0\\n   10000000     1000000        read       65536         947         974        1062         104           0\\n   10000000     1000000        read     2097151         999         963        1062          88           0\\n   10000000     1000000        read  2147483646        1349         869        1260          84           0\\n\\n   10000000    10000000       write           1         833         568        1458         239        1229\\n   10000000    10000000       write          15        1427        1255        1432         276        1615\\n   10000000    10000000       write         255        1599        1578        1448         250        1244\\n   10000000    10000000       write         256        1656        1520        1317         109        1109\\n   10000000    10000000       write       65535        1734        1630        1385         245        1307\\n   10000000    10000000       write       65536        1718        1640        1395         182        1208\\n   10000000    10000000       write     2097151        1807        1781        1447         250        1291\\n   10000000    10000000       write  2147483646        1718        1599        1281          73        1099\\n   10000000    10000000        read           1         562         296        1301         109           0\\n   10000000    10000000        read          15        1187        1198        1322          83           0\\n   10000000    10000000        read         255        1421        1432        1526          99           0\\n   10000000    10000000        read         256        1521        1583        1588         104           0\\n   10000000    10000000        read       65535        1578        1427        1374          31           0\\n   10000000    10000000        read       65536        1634        1499        1489         113           0\\n   10000000    10000000        read     2097151        1625        1374        1468         224           0\\n   10000000    10000000        read  2147483646        1609        1349        1499          83           0\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12795228_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12795228_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Dec\\/09 03:39\'\u003e\u003ctime class=\'livestamp\' datetime=\'2009-12-30T03:39:12+0000\'\u003e30\\/Dec\\/09 03:39\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I have very recently done some experiments with random-access packed positive integer arrays (we could also call them unsigned). The basic approach is to put the bits after each other in an int- or long-array, then extract the value by shifting and masking. Unfortunately I have not been able to determine a single winning strategy for space\\/speed trade-offs. \\n\\n I\'ve tried four simple implementations: \\n\\n 1. Pack the bits right after each other. \\n2. Pack the bits right after each other but allow only 1, 2, 4, 8, 16 or 32 as value-bits. \\n3. Wrap an int[] or long[] and store the values directly (for comparison with 1 &amp; 2). \\n4. Use int[] directly without any wrapping. \\n\\n (Code can be found at  http:\\/\\/summa.svn.sourceforge.net\\/viewvc\\/summa\\/trunk\\/Common\\/src\\/dk\\/statsbiblioteket\\/summa\\/common\\/util\\/bits\\/  where #1 is BitsArrayPacked, #2 is BitsArrayAligned and #3 is BitsArrayInt) \\n\\n The obvious benefit from #2 is that the bits for values are always contained in a single block (int or long), which reduces the amount of operations for set and get considerably. Unfortunately this means that as soon as a value greater than 65535 needs to be stored, the internal representation will require 32 bits\\/value. This means no space-benefit compared to #3 while the speed penalty remains. A hybrid approach might be considered where the implementation is determined by the number of bits needed to store a value. \\n\\n I\'ve done some performance tests of the implementations on an aging 1.8GHz single-core laptop (Dell 820). The code can be found at  http:\\/\\/summa.svn.sourceforge.net\\/viewvc\\/summa\\/trunk\\/Common\\/test\\/dk\\/statsbiblioteket\\/summa\\/common\\/util\\/bits\\/BitsArrayPerformanceTest.java?revision=2038&amp;view=markup  \\n\\n In the tables below, the measurements for Packed, Aligned, Int, Constant and int[] are the total time in milliseconds to perform actionCount actions (either read or write). Random numbers (using the same seed) were used for index as well as value and the overhead of constructing the random numbers were subtracted from the measurements. \\\"Constant\\\" is a dummy where no values are stored and the same value is always returned on a get. It is used to measure method-call overhead. \\n\\n For arrays of 10M values, 6-33 million values can be read or written per second. If this is within acceptable limits, I\'d be happy to try and make a contribution to Lucene based on the code. However, I probably won\'t find the time before February or March 2010. \\n\\n  \\n actionCount arrayLength  actionType    valueMax  Packed(#1) Aligned(#2)     Int(#3)    Constant    int [](#4)\\n   10000000     1000000       write           1         583         416         984         254         635\\n   10000000     1000000       write          15         594         499        1172         286         843\\n   10000000     1000000       write         255         604         478        1057         213         656\\n   10000000     1000000       write         256         734         765        1062         109         729\\n   10000000     1000000       write       65535        1036         802        1124         417         734\\n   10000000     1000000       write       65536        1015        1130        1072         172         781\\n   10000000     1000000       write     2097151        1020        1187        1052         223         614\\n   10000000     1000000       write  2147483646        1136        1073         839          73         719\\n   10000000     1000000        read           1         286         203         786         104           0\\n   10000000     1000000        read          15         291         182         859          78           0\\n   10000000     1000000        read         255         672         494         989          67           0\\n   10000000     1000000        read         256         568         729        1104          93           0\\n   10000000     1000000        read       65535         833         755        1088          99           0\\n   10000000     1000000        read       65536         947         974        1062         104           0\\n   10000000     1000000        read     2097151         999         963        1062          88           0\\n   10000000     1000000        read  2147483646        1349         869        1260          84           0\\n\\n   10000000    10000000       write           1         833         568        1458         239        1229\\n   10000000    10000000       write          15        1427        1255        1432         276        1615\\n   10000000    10000000       write         255        1599        1578        1448         250        1244\\n   10000000    10000000       write         256        1656        1520        1317         109        1109\\n   10000000    10000000       write       65535        1734        1630        1385         245        1307\\n   10000000    10000000       write       65536        1718        1640        1395         182        1208\\n   10000000    10000000       write     2097151        1807        1781        1447         250        1291\\n   10000000    10000000       write  2147483646        1718        1599        1281          73        1099\\n   10000000    10000000        read           1         562         296        1301         109           0\\n   10000000    10000000        read          15        1187        1198        1322          83           0\\n   10000000    10000000        read         255        1421        1432        1526          99           0\\n   10000000    10000000        read         256        1521        1583        1588         104           0\\n   10000000    10000000        read       65535        1578        1427        1374          31           0\\n   10000000    10000000        read       65536        1634        1499        1489         113           0\\n   10000000    10000000        read     2097151        1625        1374        1468         224           0\\n   10000000    10000000        read  2147483646        1609        1349        1499          83           0\\n \\n               \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12795747\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12795747&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12795747\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12795747_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12795747_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Jan\\/10 12:01\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-01T12:01:23+0000\'\u003e01\\/Jan\\/10 12:01\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eThese are great results &#8211; thanks Toke!\u003c\\/p\u003e\\n\\n\u003cp\u003eWhat\'s the difference between the two \\\"sections\\\" of your results?  The bottom section seems to have slower times overall than the top one.\u003c\\/p\u003e\\n\\n\u003cp\u003eIt\'s curious that \\\"aligned\\\" isn\'t always a win.\u003c\\/p\u003e\\n\\n\u003cp\u003eFor the packed case, did you generate specialized code for each of the cases?  I wonder how much \\/ if that\'d really help in practice.\u003c\\/p\u003e\\n\\n\u003cp\u003eFor the standard codec\'s terms dict, my guess is we\'d just go with packed ints.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12795747_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12795747_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Jan\\/10 12:01\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-01T12:01:23+0000\'\u003e01\\/Jan\\/10 12:01\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    These are great results &#8211; thanks Toke! \\n\\n What\'s the difference between the two \\\"sections\\\" of your results?  The bottom section seems to have slower times overall than the top one. \\n\\n It\'s curious that \\\"aligned\\\" isn\'t always a win. \\n\\n For the packed case, did you generate specialized code for each of the cases?  I wonder how much \\/ if that\'d really help in practice. \\n\\n For the standard codec\'s terms dict, my guess is we\'d just go with packed ints.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12795861\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12795861&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12795861\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12795861_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12795861_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'02\\/Jan\\/10 15:03\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-02T15:03:10+0000\'\u003e02\\/Jan\\/10 15:03\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eThe first section if for 1M values in the structure, the second is for 10M. As the CPU on the test-machine (Intel T2400) has only 2MB of level 2 cache, the increased processing time for the seemingly same amount of work is an effect of more cache-misses.\u003c\\/p\u003e\\n\\n\u003cp\u003eCaching also accounts for why the packed version is sometimes better than the aligned. For values representable as 9 or 17 bits, the aligned version needs 16 and 32 bits respectively. In the case with 10M values, the packed version uses 1.1MB and 2.1MB for 9 and 17 bits respectively, while the aligned uses 2MB and 4MB respectively. The simpler logic of the aligned version does not compensate enough for the higher amount of trips around main memory.\u003c\\/p\u003e\\n\\n\u003cp\u003eI did not generate any specialized code for the aligned case: No matter the number of bits\\/value, the amount of shifts, masks and ors is always the same. If the number of bits\\/value is known beforehand, specialized cases should be used (I made a factory that selects between packed, aligned and direct (#3), depending on the number of bits\\/value). The reason for not doing so in the first place is that I wanted to let the structure auto-adjust the bits\\/value when a new value was added. Having different implementations encapsulated in the same class means another level of indirection or conditionals, both of which I wanted to avoid for performance reasons. That being said, I haven\'t tested how much of a penalty this would be.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe standard use case seems to be some sort of update-round, after which no updates are performed. Having a cleanupAndOptimize-call that potentially creates a new and optimized structure, would fit well into this and would avoid the indirection \\/ conditional penalty.\u003c\\/p\u003e\\n\\n\u003cp\u003eA whole other matter is long vs. ints. I\'ve tried using longs instead of ints as the backing array and the penalty on my 32bit processor was very high (I need to make some tests on this). If it must be possible to set and get longs, it\'s hard to avoid using long[] as the internal structure, but if ints are accepted as the only valid values, selecting long[] as backing array for 64 bit machines and int[] for 32 bit, might be the solution.\u003c\\/p\u003e\\n\\n\u003cp\u003eAll this calls for a factory-approach to hide the fairly complex task of choosing the right implementation.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12795861_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12795861_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'02\\/Jan\\/10 15:03\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-02T15:03:10+0000\'\u003e02\\/Jan\\/10 15:03\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    The first section if for 1M values in the structure, the second is for 10M. As the CPU on the test-machine (Intel T2400) has only 2MB of level 2 cache, the increased processing time for the seemingly same amount of work is an effect of more cache-misses. \\n\\n Caching also accounts for why the packed version is sometimes better than the aligned. For values representable as 9 or 17 bits, the aligned version needs 16 and 32 bits respectively. In the case with 10M values, the packed version uses 1.1MB and 2.1MB for 9 and 17 bits respectively, while the aligned uses 2MB and 4MB respectively. The simpler logic of the aligned version does not compensate enough for the higher amount of trips around main memory. \\n\\n I did not generate any specialized code for the aligned case: No matter the number of bits\\/value, the amount of shifts, masks and ors is always the same. If the number of bits\\/value is known beforehand, specialized cases should be used (I made a factory that selects between packed, aligned and direct (#3), depending on the number of bits\\/value). The reason for not doing so in the first place is that I wanted to let the structure auto-adjust the bits\\/value when a new value was added. Having different implementations encapsulated in the same class means another level of indirection or conditionals, both of which I wanted to avoid for performance reasons. That being said, I haven\'t tested how much of a penalty this would be. \\n\\n The standard use case seems to be some sort of update-round, after which no updates are performed. Having a cleanupAndOptimize-call that potentially creates a new and optimized structure, would fit well into this and would avoid the indirection \\/ conditional penalty. \\n\\n A whole other matter is long vs. ints. I\'ve tried using longs instead of ints as the backing array and the penalty on my 32bit processor was very high (I need to make some tests on this). If it must be possible to set and get longs, it\'s hard to avoid using long[] as the internal structure, but if ints are accepted as the only valid values, selecting long[] as backing array for 64 bit machines and int[] for 32 bit, might be the solution. \\n\\n All this calls for a factory-approach to hide the fairly complex task of choosing the right implementation.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12796186\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12796186&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12796186\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12796186_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12796186_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'04\\/Jan\\/10 14:21\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-04T14:21:47+0000\'\u003e04\\/Jan\\/10 14:21\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI made some small tweaks to improve performance and added long[]-backed versions of Packed (optimal space) and Aligned (no values span underlying blocks), the ran the performance tests on 5 different computers. It seems very clear that level 2 cache (and presumably RAM-speed, but I do not know how to determine that without root-access on a Linux box) plays a bigger role for access speed than mere CPU speed. One 3GHz with 1MB of level 2 cache was about half as fast than a 1.8GHz laptop with 2MB of level 2 cache.\u003c\\/p\u003e\\n\\n\u003cp\u003eThere is a whole lot of measurements and it is getting hard to digest. I\'ve attached logs from the 5 computers, should anyone want to have a look. Some observations are:\u003c\\/p\u003e\\n\\n\u003cp\u003e1. The penalty of using long[] instead of int[] on my 32 bit laptop depends on the number of values in the array. For less than a million values, it is severe: The long[]-version if 30-60% slower, depending on whether packed or aligned values are used. Above that, it was 10% slower for Aligned, 25% slower for Packed.\u003cbr\\/\u003e\\nOn the other hand, 64 bit machines dos not seem to care that much whether int[] or long[] is used: There was 10% win for arrays below 1M for one machine, 50% for arrays below 100K for another (8% for 1M, 6% for 10M) for another and a small loss of below 1% for all lenghts above 10K for a third.\u003c\\/p\u003e\\n\\n\u003cp\u003e2. There\'s a fast drop-off in speed when the array reaches a certain size that is correlated to level 2 cache size. After that, the speed does not decrease much when the array grows. This also affects direct writes to an int[] and has the interesting implication that a packed array out-performs the direct access approach for writes in a number of cases. For reads, there\'s no contest: Direct access to int[] is blazingly fast.\u003c\\/p\u003e\\n\\n\u003cp\u003e3. The access-speed of the different implementations converges when the number of values in the array rises (think 10M+ values): The slow round-trip to main memory dwarfs the logic used for value-extraction. \u003c\\/p\u003e\\n\\n\u003cp\u003eObservation #3 supports Mike McCandless choice of going for the packed approach and #1 suggests using int[] as the internal structure for now. Using int[] as internal structure makes if unfeasible to accept longs as input (or rather: longs with more than 32 significant bits). I don\'t know if this is acceptable?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12796186_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12796186_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'04\\/Jan\\/10 14:21\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-04T14:21:47+0000\'\u003e04\\/Jan\\/10 14:21\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I made some small tweaks to improve performance and added long[]-backed versions of Packed (optimal space) and Aligned (no values span underlying blocks), the ran the performance tests on 5 different computers. It seems very clear that level 2 cache (and presumably RAM-speed, but I do not know how to determine that without root-access on a Linux box) plays a bigger role for access speed than mere CPU speed. One 3GHz with 1MB of level 2 cache was about half as fast than a 1.8GHz laptop with 2MB of level 2 cache. \\n\\n There is a whole lot of measurements and it is getting hard to digest. I\'ve attached logs from the 5 computers, should anyone want to have a look. Some observations are: \\n\\n 1. The penalty of using long[] instead of int[] on my 32 bit laptop depends on the number of values in the array. For less than a million values, it is severe: The long[]-version if 30-60% slower, depending on whether packed or aligned values are used. Above that, it was 10% slower for Aligned, 25% slower for Packed. \\nOn the other hand, 64 bit machines dos not seem to care that much whether int[] or long[] is used: There was 10% win for arrays below 1M for one machine, 50% for arrays below 100K for another (8% for 1M, 6% for 10M) for another and a small loss of below 1% for all lenghts above 10K for a third. \\n\\n 2. There\'s a fast drop-off in speed when the array reaches a certain size that is correlated to level 2 cache size. After that, the speed does not decrease much when the array grows. This also affects direct writes to an int[] and has the interesting implication that a packed array out-performs the direct access approach for writes in a number of cases. For reads, there\'s no contest: Direct access to int[] is blazingly fast. \\n\\n 3. The access-speed of the different implementations converges when the number of values in the array rises (think 10M+ values): The slow round-trip to main memory dwarfs the logic used for value-extraction.  \\n\\n Observation #3 supports Mike McCandless choice of going for the packed approach and #1 suggests using int[] as the internal structure for now. Using int[] as internal structure makes if unfeasible to accept longs as input (or rather: longs with more than 32 significant bits). I don\'t know if this is acceptable?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12799701\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12799701&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12799701\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12799701_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12799701_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'13\\/Jan\\/10 12:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-13T12:00:22+0000\'\u003e13\\/Jan\\/10 12:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003eThe first section if for 1M values in the structure, the second is for 10M. As the CPU on the test-machine (Intel T2400) has only 2MB of level 2 cache, the increased processing time for the seemingly same amount of work is an effect of more cache-misses.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eGot it.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eCaching also accounts for why the packed version is sometimes better than the aligned. For values representable as 9 or 17 bits, the aligned version needs 16 and 32 bits respectively. In the case with 10M values, the packed version uses 1.1MB and 2.1MB for 9 and 17 bits respectively, while the aligned uses 2MB and 4MB respectively. The simpler logic of the aligned version does not compensate enough for the higher amount of trips around main memory.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eOK, though, I think we should somehow exclude these CPU cache effects\u003cbr\\/\u003e\\nfrom the test.  In a real production situation, lots of other things\u003cbr\\/\u003e\\nare competing for that cache, so I think the mostly-cache-miss case is\u003cbr\\/\u003e\\nmost realistic here.\u003c\\/p\u003e\\n\\n\u003cp\u003eActually a good way to do that is to test it in a wider context, eg\u003cbr\\/\u003e\\nonce I can get \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-2186\\\" title=\\\"First cut at column-stride fields (index values storage)\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-2186\\\"\u003e\u003cdel\u003eLUCENE-2186\u003c\\/del\u003e\u003c\\/a\u003e \\\"integrated\\\", we can test sorting by int\u003cbr\\/\u003e\\nfield with these different ways of encoding.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eI did not generate any specialized code for the aligned case: No matter the number of bits\\/value, the amount of shifts, masks and ors is always the same. If the number of bits\\/value is known beforehand, specialized cases should be used (I made a factory that selects between packed, aligned and direct (#3), depending on the number of bits\\/value).\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eOK I have a start at this under \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-2186\\\" title=\\\"First cut at column-stride fields (index values storage)\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-2186\\\"\u003e\u003cdel\u003eLUCENE-2186\u003c\\/del\u003e\u003c\\/a\u003e.  I\'ll try to clean up &amp;\u003cbr\\/\u003e\\npost here...\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eThe reason for not doing so in the first place is that I wanted to let the structure auto-adjust the bits\\/value when a new value was added. Having different implementations encapsulated in the same class means another level of indirection or conditionals, both of which I wanted to avoid for performance reasons. That being said, I haven\'t tested how much of a penalty this would be.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe standard use case seems to be some sort of update-round, after which no updates are performed. Having a cleanupAndOptimize-call that potentially creates a new and optimized structure, would fit well into this and would avoid the indirection \\/ conditional penalty.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI think the writing API can be a write-once API, where I declare the\u003cbr\\/\u003e\\nmaxValue I will write.  This fits with the indexing chain, where we\u003cbr\\/\u003e\\nbuffer values in RAM and then flush to the segmetn files.\u003c\\/p\u003e\\n\\n\u003cp\u003eThis way we don\'t need the complexity of having to resize the bits\u003cbr\\/\u003e\\ninternally when a new max value is seen.\u003c\\/p\u003e\\n\\n\u003cp\u003eSo, the factory would take number of values we will write, the max\u003cbr\\/\u003e\\nvalue, and I guess an enum for Packed\\/Aligned\\/DedicatedArray, and\u003cbr\\/\u003e\\nreturn a simple writer that just exposes an \\\"add(long value)\\\" method?\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eA whole other matter is long vs. ints. I\'ve tried using longs instead of ints as the backing array and the penalty on my 32bit processor was very high (I need to make some tests on this). If it must be possible to set and get longs, it\'s hard to avoid using long[] as the internal structure, but if ints are accepted as the only valid values, selecting long[] as backing array for 64 bit machines and int[] for 32 bit, might be the solution.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eHmm... I guess we could still support values requiring more than 32\u003cbr\\/\u003e\\nbits, encoded into int[], but it\'s more hairy as the value could span\u003cbr\\/\u003e\\n2 or 3 ints.\u003c\\/p\u003e\\n\\n\u003cp\u003eProbably we should specialize\\/default the factory selection based on\u003cbr\\/\u003e\\nwhether the JVM is 32\\/64 bit?  And, whether the bit size is &lt;= 32.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eAll this calls for a factory-approach to hide the fairly complex task of choosing the right implementation.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eYes.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eI made some small tweaks to improve performance and added long[]-backed versions of Packed (optimal space) and Aligned (no values span underlying blocks), the ran the performance tests on 5 different computers. It seems very clear that level 2 cache (and presumably RAM-speed, but I do not know how to determine that without root-access on a Linux box) plays a bigger role for access speed than mere CPU speed. One 3GHz with 1MB of level 2 cache was about half as fast than a 1.8GHz laptop with 2MB of level 2 cache.\u003cbr\\/\u003e\\nThere is a whole lot of measurements and it is getting hard to digest. I\'ve attached logs from the 5 computers, should anyone want to have a look. Some observations are:\u003c\\/p\u003e\\n\\n\u003cp\u003e1. The penalty of using long[] instead of int[] on my 32 bit laptop depends on the number of values in the array. For less than a million values, it is severe: The long[]-version if 30-60% slower, depending on whether packed or aligned values are used. Above that, it was 10% slower for Aligned, 25% slower for Packed.\u003cbr\\/\u003e\\nOn the other hand, 64 bit machines dos not seem to care that much whether int[] or long[] is used: There was 10% win for arrays below 1M for one machine, 50% for arrays below 100K for another (8% for 1M, 6% for 10M) for another and a small loss of below 1% for all lenghts above 10K for a third.\u003c\\/p\u003e\\n\\n\u003cp\u003e2. There\'s a fast drop-off in speed when the array reaches a certain size that is correlated to level 2 cache size. After that, the speed does not decrease much when the array grows. This also affects direct writes to an int[] and has the interesting implication that a packed array out-performs the direct access approach for writes in a number of cases. For reads, there\'s no contest: Direct access to int[] is blazingly fast.\u003c\\/p\u003e\\n\\n\u003cp\u003e3. The access-speed of the different implementations converges when the number of values in the array rises (think 10M+ values): The slow round-trip to main memory dwarfs the logic used for value-extraction.\u003c\\/p\u003e\\n\\n\u003cp\u003eObservation #3 supports Mike McCandless choice of going for the packed approach and #1 suggests using int[] as the internal structure for now. Using int[] as internal structure makes if unfeasible to accept longs as input (or rather: longs with more than 32 significant bits). I don\'t know if this is acceptable?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI think we should agree on an API that \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-2186\\\" title=\\\"First cut at column-stride fields (index values storage)\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-2186\\\"\u003e\u003cdel\u003eLUCENE-2186\u003c\\/del\u003e\u003c\\/a\u003e can use to\u003cbr\\/\u003e\\nwrite\\/read packed ints, then get our two patches talking.  I\'ll pull\u003cbr\\/\u003e\\nout the barebones packed ints I\'m currently using, and post\u003cbr\\/\u003e\\nhere... then let\'s merge\\/iterate to a common API, so I can cutover to\u003cbr\\/\u003e\\nthe patch from here in \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-2186\\\" title=\\\"First cut at column-stride fields (index values storage)\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-2186\\\"\u003e\u003cdel\u003eLUCENE-2186\u003c\\/del\u003e\u003c\\/a\u003e?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12799701_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12799701_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'13\\/Jan\\/10 12:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-13T12:00:22+0000\'\u003e13\\/Jan\\/10 12:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     The first section if for 1M values in the structure, the second is for 10M. As the CPU on the test-machine (Intel T2400) has only 2MB of level 2 cache, the increased processing time for the seemingly same amount of work is an effect of more cache-misses.  \\n\\n Got it. \\n\\n  Caching also accounts for why the packed version is sometimes better than the aligned. For values representable as 9 or 17 bits, the aligned version needs 16 and 32 bits respectively. In the case with 10M values, the packed version uses 1.1MB and 2.1MB for 9 and 17 bits respectively, while the aligned uses 2MB and 4MB respectively. The simpler logic of the aligned version does not compensate enough for the higher amount of trips around main memory.  \\n\\n OK, though, I think we should somehow exclude these CPU cache effects \\nfrom the test.  In a real production situation, lots of other things \\nare competing for that cache, so I think the mostly-cache-miss case is \\nmost realistic here. \\n\\n Actually a good way to do that is to test it in a wider context, eg \\nonce I can get   LUCENE-2186   \\\"integrated\\\", we can test sorting by int \\nfield with these different ways of encoding. \\n\\n \\n I did not generate any specialized code for the aligned case: No matter the number of bits\\/value, the amount of shifts, masks and ors is always the same. If the number of bits\\/value is known beforehand, specialized cases should be used (I made a factory that selects between packed, aligned and direct (#3), depending on the number of bits\\/value).  \\n\\n OK I have a start at this under   LUCENE-2186  .  I\'ll try to clean up &amp; \\npost here... \\n\\n \\n The reason for not doing so in the first place is that I wanted to let the structure auto-adjust the bits\\/value when a new value was added. Having different implementations encapsulated in the same class means another level of indirection or conditionals, both of which I wanted to avoid for performance reasons. That being said, I haven\'t tested how much of a penalty this would be. \\n\\n The standard use case seems to be some sort of update-round, after which no updates are performed. Having a cleanupAndOptimize-call that potentially creates a new and optimized structure, would fit well into this and would avoid the indirection \\/ conditional penalty.  \\n\\n I think the writing API can be a write-once API, where I declare the \\nmaxValue I will write.  This fits with the indexing chain, where we \\nbuffer values in RAM and then flush to the segmetn files. \\n\\n This way we don\'t need the complexity of having to resize the bits \\ninternally when a new max value is seen. \\n\\n So, the factory would take number of values we will write, the max \\nvalue, and I guess an enum for Packed\\/Aligned\\/DedicatedArray, and \\nreturn a simple writer that just exposes an \\\"add(long value)\\\" method? \\n\\n  A whole other matter is long vs. ints. I\'ve tried using longs instead of ints as the backing array and the penalty on my 32bit processor was very high (I need to make some tests on this). If it must be possible to set and get longs, it\'s hard to avoid using long[] as the internal structure, but if ints are accepted as the only valid values, selecting long[] as backing array for 64 bit machines and int[] for 32 bit, might be the solution.  \\n\\n Hmm... I guess we could still support values requiring more than 32 \\nbits, encoded into int[], but it\'s more hairy as the value could span \\n2 or 3 ints. \\n\\n Probably we should specialize\\/default the factory selection based on \\nwhether the JVM is 32\\/64 bit?  And, whether the bit size is &lt;= 32. \\n\\n  All this calls for a factory-approach to hide the fairly complex task of choosing the right implementation.  \\n\\n Yes. \\n\\n \\n I made some small tweaks to improve performance and added long[]-backed versions of Packed (optimal space) and Aligned (no values span underlying blocks), the ran the performance tests on 5 different computers. It seems very clear that level 2 cache (and presumably RAM-speed, but I do not know how to determine that without root-access on a Linux box) plays a bigger role for access speed than mere CPU speed. One 3GHz with 1MB of level 2 cache was about half as fast than a 1.8GHz laptop with 2MB of level 2 cache. \\nThere is a whole lot of measurements and it is getting hard to digest. I\'ve attached logs from the 5 computers, should anyone want to have a look. Some observations are: \\n\\n 1. The penalty of using long[] instead of int[] on my 32 bit laptop depends on the number of values in the array. For less than a million values, it is severe: The long[]-version if 30-60% slower, depending on whether packed or aligned values are used. Above that, it was 10% slower for Aligned, 25% slower for Packed. \\nOn the other hand, 64 bit machines dos not seem to care that much whether int[] or long[] is used: There was 10% win for arrays below 1M for one machine, 50% for arrays below 100K for another (8% for 1M, 6% for 10M) for another and a small loss of below 1% for all lenghts above 10K for a third. \\n\\n 2. There\'s a fast drop-off in speed when the array reaches a certain size that is correlated to level 2 cache size. After that, the speed does not decrease much when the array grows. This also affects direct writes to an int[] and has the interesting implication that a packed array out-performs the direct access approach for writes in a number of cases. For reads, there\'s no contest: Direct access to int[] is blazingly fast. \\n\\n 3. The access-speed of the different implementations converges when the number of values in the array rises (think 10M+ values): The slow round-trip to main memory dwarfs the logic used for value-extraction. \\n\\n Observation #3 supports Mike McCandless choice of going for the packed approach and #1 suggests using int[] as the internal structure for now. Using int[] as internal structure makes if unfeasible to accept longs as input (or rather: longs with more than 32 significant bits). I don\'t know if this is acceptable?  \\n\\n I think we should agree on an API that   LUCENE-2186   can use to \\nwrite\\/read packed ints, then get our two patches talking.  I\'ll pull \\nout the barebones packed ints I\'m currently using, and post \\nhere... then let\'s merge\\/iterate to a common API, so I can cutover to \\nthe patch from here in   LUCENE-2186  ?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12799707\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12799707&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12799707\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12799707_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12799707_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'13\\/Jan\\/10 12:09\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-13T12:09:36+0000\'\u003e13\\/Jan\\/10 12:09\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eHow about something like this API, for writing packed ints:\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e\u003cspan class=\\\"code-keyword\\\"\u003eabstract\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003eclass \u003c\\/span\u003eWriter {\\n  \u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003eabstract\u003c\\/span\u003e void add(\u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e v) \u003cspan class=\\\"code-keyword\\\"\u003ethrows\u003c\\/span\u003e IOException;\\n  \u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003eabstract\u003c\\/span\u003e void finish() \u003cspan class=\\\"code-keyword\\\"\u003ethrows\u003c\\/span\u003e IOException;\\n}\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003ethen a factory:\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e\u003cspan class=\\\"code-keyword\\\"\u003eenum\u003c\\/span\u003e Mode {Packed, Aligned, FixedArray};\\n\\n\u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003estatic\u003c\\/span\u003e Writer getWriter(IndexOutput out, \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e valueCount, \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e maxValue, Mode mode);\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003e(we can iterate on the names... always the hardest part).\u003c\\/p\u003e\\n\\n\u003cp\u003ePacked means full bit packing (most space efficient, but slowest\u003cbr\\/\u003e\\ndecode time), Aligned might waste some bits (eg for nbits=4, that\'s\u003cbr\\/\u003e\\nnaturally aligned, but for nbits=7, we\'d waste 1 bit per long,\u003cbr\\/\u003e\\nFixedArray (which\'d use byte[], short[], int[], long[]) would\u003cbr\\/\u003e\\npotentially waste the most bits but have the fastest decode.\u003c\\/p\u003e\\n\\n\u003cp\u003eIf nbits happens to be 8, 16, 32, 64, the factory should just always\u003cbr\\/\u003e\\nFixedArray I think?  And of course powers of two will automatically be\u003cbr\\/\u003e\\nAligned (with the per-nbits specialized code).\u003c\\/p\u003e\\n\\n\u003cp\u003eWew can also default impls to underlying int[] vs long[] backing store\u003cbr\\/\u003e\\ndepending on 54\\/32 bit jre, and, nbits.  If jre is 32 bit but nbits is\u003cbr\\/\u003e\\n&gt; 32 bit I think we just use long[] backing.\u003c\\/p\u003e\\n\\n\u003cp\u003eFor reading, a similar API:\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e\u003cspan class=\\\"code-keyword\\\"\u003eabstract\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003eclass \u003c\\/span\u003eReader {\\n  \u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003eabstract\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e get(index);\\n}\\n\\n\u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003estatic\u003c\\/span\u003e Reader getReader(IndexInput in);\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12799707_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12799707_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'13\\/Jan\\/10 12:09\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-13T12:09:36+0000\'\u003e13\\/Jan\\/10 12:09\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    How about something like this API, for writing packed ints: \\n\\n  \\n  abstract   class  Writer {\\n   public   abstract  void add( long  v)  throws  IOException;\\n   public   abstract  void finish()  throws  IOException;\\n}\\n \\n  \\n\\n then a factory: \\n\\n  \\n  enum  Mode {Packed, Aligned, FixedArray};\\n\\n public   static  Writer getWriter(IndexOutput out,  int  valueCount,  long  maxValue, Mode mode);\\n \\n  \\n\\n (we can iterate on the names... always the hardest part). \\n\\n Packed means full bit packing (most space efficient, but slowest \\ndecode time), Aligned might waste some bits (eg for nbits=4, that\'s \\nnaturally aligned, but for nbits=7, we\'d waste 1 bit per long, \\nFixedArray (which\'d use byte[], short[], int[], long[]) would \\npotentially waste the most bits but have the fastest decode. \\n\\n If nbits happens to be 8, 16, 32, 64, the factory should just always \\nFixedArray I think?  And of course powers of two will automatically be \\nAligned (with the per-nbits specialized code). \\n\\n Wew can also default impls to underlying int[] vs long[] backing store \\ndepending on 54\\/32 bit jre, and, nbits.  If jre is 32 bit but nbits is \\n&gt; 32 bit I think we just use long[] backing. \\n\\n For reading, a similar API: \\n\\n  \\n  abstract   class  Reader {\\n   public   abstract   long  get(index);\\n}\\n\\n public   static  Reader getReader(IndexInput in);\\n \\n               \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12799712\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12799712&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12799712\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12799712_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12799712_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'13\\/Jan\\/10 12:22\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-13T12:22:15+0000\'\u003e13\\/Jan\\/10 12:22\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eAttached patch with my current roughed up approach for packed ints\u003cbr\\/\u003e\\n(from \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-2186\\\" title=\\\"First cut at column-stride fields (index values storage)\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-2186\\\"\u003e\u003cdel\u003eLUCENE-2186\u003c\\/del\u003e\u003c\\/a\u003e).\u003c\\/p\u003e\\n\\n\u003cp\u003eLet\'s try to standardize the API, then merge the two approaches, then\u003cbr\\/\u003e\\nI\'ll cutover with \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-2186\\\" title=\\\"First cut at column-stride fields (index values storage)\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-2186\\\"\u003e\u003cdel\u003eLUCENE-2186\u003c\\/del\u003e\u003c\\/a\u003e.\u003c\\/p\u003e\\n\\n\u003cp\u003eIt includes gen.py, which autogens dedicated decoders for each of the\u003cbr\\/\u003e\\nnbits cases, excluding 8, 16, 32, 64 bits, since these are done with\u003cbr\\/\u003e\\ndedicated array reader impls.\u003c\\/p\u003e\\n\\n\u003cp\u003eIt uses a single writer (I don\'t think we need specialized writers),\u003cbr\\/\u003e\\nbut the writer encodes in the same byte order as\u003cbr\\/\u003e\\nIndexOutput.writeLong, so that the byte order matches the dedicated\u003cbr\\/\u003e\\narray reader impls.\u003c\\/p\u003e\\n\\n\u003cp\u003eIt only encodes into long[] &#8211; we should create cases for int[]\u003cbr\\/\u003e\\n(selected by the factory depending on 32 vs 64 bit jre).\u003c\\/p\u003e\\n\\n\u003cp\u003eWe should also explore just reading in a full byte[] and using\u003cbr\\/\u003e\\nInt\\/Short\\/Long buffer to decode.  This API should also allow for a\u003cbr\\/\u003e\\nfuture mmap impl as well.\u003c\\/p\u003e\\n\\n\u003cp\u003eProbably we should name all of these UnsignedPackedInts, since they\u003cbr\\/\u003e\\nrequire values &gt;= 0.  (Hmm, though, the 64 bit case is tricky &#8211; I\u003cbr\\/\u003e\\nguess we make an exception for that case).\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12799712_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12799712_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'13\\/Jan\\/10 12:22\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-13T12:22:15+0000\'\u003e13\\/Jan\\/10 12:22\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Attached patch with my current roughed up approach for packed ints \\n(from   LUCENE-2186  ). \\n\\n Let\'s try to standardize the API, then merge the two approaches, then \\nI\'ll cutover with   LUCENE-2186  . \\n\\n It includes gen.py, which autogens dedicated decoders for each of the \\nnbits cases, excluding 8, 16, 32, 64 bits, since these are done with \\ndedicated array reader impls. \\n\\n It uses a single writer (I don\'t think we need specialized writers), \\nbut the writer encodes in the same byte order as \\nIndexOutput.writeLong, so that the byte order matches the dedicated \\narray reader impls. \\n\\n It only encodes into long[] &#8211; we should create cases for int[] \\n(selected by the factory depending on 32 vs 64 bit jre). \\n\\n We should also explore just reading in a full byte[] and using \\nInt\\/Short\\/Long buffer to decode.  This API should also allow for a \\nfuture mmap impl as well. \\n\\n Probably we should name all of these UnsignedPackedInts, since they \\nrequire values &gt;= 0.  (Hmm, though, the 64 bit case is tricky &#8211; I \\nguess we make an exception for that case).              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12802542\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12802542&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12802542\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12802542_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802542_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/10 23:46\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-19T23:46:20+0000\'\u003e19\\/Jan\\/10 23:46\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eIntroducing yet another level of indirection and making a byte\\/short\\/int\\/long-prvider detached from the implementation of the packed values it tempting. I\'m fairly afraid of the overhead of the extra method-calls, but I\'ll try it and see what happens.\u003c\\/p\u003e\\n\\n\u003cp\u003eI\'ve read your (Michael McCandless) code an I can see that the tiny interfaces for Reader and Writer works well for your scenario. However, as the Reader must have (fast) random access, wouldn\'t it make sense to make it possible to update values? That way the same code can be used to hold ords for sorting and similar structures.\u003c\\/p\u003e\\n\\n\u003cp\u003eInstead of Reader, we could use\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e\u003cspan class=\\\"code-keyword\\\"\u003eabstract\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003eclass \u003c\\/span\u003eMutator {\\n  \u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003eabstract\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e get(\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e index);\\n  \u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003eabstract\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e set(\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e index, \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e value);\\n}\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003e...should the index also be a long? No need to be bound by Java\'s 31-bit limit on array-length, although I might very well be over-engineering here.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe whole 32bit vs. 64bit as backing array does present a bit of a problem with persistence. We\'ll be in a situation where the index will be optimized for the architecture used for building, not the one used for searching. Leaving the option of a future mmap open means that it is not possible to do a conversion when retrieving the bits, so I have no solution for this (other than doing memory-only).\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12802542_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802542_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'19\\/Jan\\/10 23:46\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-19T23:46:20+0000\'\u003e19\\/Jan\\/10 23:46\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Introducing yet another level of indirection and making a byte\\/short\\/int\\/long-prvider detached from the implementation of the packed values it tempting. I\'m fairly afraid of the overhead of the extra method-calls, but I\'ll try it and see what happens. \\n\\n I\'ve read your (Michael McCandless) code an I can see that the tiny interfaces for Reader and Writer works well for your scenario. However, as the Reader must have (fast) random access, wouldn\'t it make sense to make it possible to update values? That way the same code can be used to hold ords for sorting and similar structures. \\n\\n Instead of Reader, we could use \\n\\n  \\n  abstract   class  Mutator {\\n   public   abstract   long  get( int  index);\\n   public   abstract   long  set( int  index,  long  value);\\n}\\n \\n  \\n\\n ...should the index also be a long? No need to be bound by Java\'s 31-bit limit on array-length, although I might very well be over-engineering here. \\n\\n The whole 32bit vs. 64bit as backing array does present a bit of a problem with persistence. We\'ll be in a situation where the index will be optimized for the architecture used for building, not the one used for searching. Leaving the option of a future mmap open means that it is not possible to do a conversion when retrieving the bits, so I have no solution for this (other than doing memory-only).              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12802780\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12802780&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12802780\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12802780_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802780_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 10:16\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T10:16:40+0000\'\u003e20\\/Jan\\/10 10:16\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003eIntroducing yet another level of indirection and making a byte\\/short\\/int\\/long-prvider detached from the implementation of the packed values it tempting.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eYou mean the layer that stores the minValue, so that the full range is\u003cbr\\/\u003e\\nsupported?  I actually think we should absorb that into packed ints,\u003cbr\\/\u003e\\nso it\'s only one method call per lookup, and specialize the \\\"positive\u003cbr\\/\u003e\\nonly\\\" cases to avoid the extra add per lookup.\u003c\\/p\u003e\\n\\n\u003cp\u003eWith that fix, it\'s still a method call per lookup, but I don\'t see\u003cbr\\/\u003e\\nhow we can get away from that, unless we allow for exposure of the raw\u003cbr\\/\u003e\\narray for the no-packing cases (which we could consider...).\u003c\\/p\u003e\\n\\n\u003cp\u003eRemember we use packed ints in places where we can accept some loss of\u003cbr\\/\u003e\\nCPU perf. for improvements in RAM usage (see the comment I just added\u003cbr\\/\u003e\\nto \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-2186\\\" title=\\\"First cut at column-stride fields (index values storage)\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-2186\\\"\u003e\u003cdel\u003eLUCENE-2186\u003c\\/del\u003e\u003c\\/a\u003e).\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eHowever, as the Reader must have (fast) random access, wouldn\'t it make sense to make it possible to update values?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eYeah, we do eventually want CSF to be updateable, but I don\'t think we\u003cbr\\/\u003e\\nneed this for phase 1?  Likewise, I think all we need now for Lucene\u003cbr\\/\u003e\\nis a \\\"WriteOnceWriter\\\", not a \\\"RandomAccessWriter\\\".  Ie, you open a\u003cbr\\/\u003e\\nwriter, you add (sequentially) all values, you close.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003e...should the index also be a long?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI would stick with int now (we are doing this for Lucene, whose docIDs\u003cbr\\/\u003e\\nare still ints...).  Design for today.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eThe whole 32bit vs. 64bit as backing array does present a bit of a problem with persistence. We\'ll be in a situation where the index will be optimized for the architecture used for building, not the one used for searching. Leaving the option of a future mmap open means that it is not possible to do a conversion when retrieving the bits, so I have no solution for this (other than doing memory-only).\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI\'m confused &#8211; a future mmap impl shouldn\'t put pressure on the file\u003cbr\\/\u003e\\nformat used by packed ints today?  Ie, a future mmap impl can use a\u003cbr\\/\u003e\\ntotally different format than the designed-to-be-slurped-into-RAM\u003cbr\\/\u003e\\nformat for packed ints, today?\u003c\\/p\u003e\\n\\n\u003cp\u003eAlso, what do you mean by optimized for building not searching?\u003c\\/p\u003e\\n\\n\u003cp\u003eNote that on 32 bit machines, if there is actually a gain, we can make\u003cbr\\/\u003e\\na backing store with ints yet still allow for storage of nbits&gt;32?  It\u003cbr\\/\u003e\\n\\\"just\\\" means a value may be split across 2 or 3 values?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12802780_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802780_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 10:16\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T10:16:40+0000\'\u003e20\\/Jan\\/10 10:16\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     Introducing yet another level of indirection and making a byte\\/short\\/int\\/long-prvider detached from the implementation of the packed values it tempting.  \\n\\n You mean the layer that stores the minValue, so that the full range is \\nsupported?  I actually think we should absorb that into packed ints, \\nso it\'s only one method call per lookup, and specialize the \\\"positive \\nonly\\\" cases to avoid the extra add per lookup. \\n\\n With that fix, it\'s still a method call per lookup, but I don\'t see \\nhow we can get away from that, unless we allow for exposure of the raw \\narray for the no-packing cases (which we could consider...). \\n\\n Remember we use packed ints in places where we can accept some loss of \\nCPU perf. for improvements in RAM usage (see the comment I just added \\nto   LUCENE-2186  ). \\n\\n  However, as the Reader must have (fast) random access, wouldn\'t it make sense to make it possible to update values?  \\n\\n Yeah, we do eventually want CSF to be updateable, but I don\'t think we \\nneed this for phase 1?  Likewise, I think all we need now for Lucene \\nis a \\\"WriteOnceWriter\\\", not a \\\"RandomAccessWriter\\\".  Ie, you open a \\nwriter, you add (sequentially) all values, you close. \\n\\n  ...should the index also be a long?  \\n\\n I would stick with int now (we are doing this for Lucene, whose docIDs \\nare still ints...).  Design for today. \\n\\n  The whole 32bit vs. 64bit as backing array does present a bit of a problem with persistence. We\'ll be in a situation where the index will be optimized for the architecture used for building, not the one used for searching. Leaving the option of a future mmap open means that it is not possible to do a conversion when retrieving the bits, so I have no solution for this (other than doing memory-only).  \\n\\n I\'m confused &#8211; a future mmap impl shouldn\'t put pressure on the file \\nformat used by packed ints today?  Ie, a future mmap impl can use a \\ntotally different format than the designed-to-be-slurped-into-RAM \\nformat for packed ints, today? \\n\\n Also, what do you mean by optimized for building not searching? \\n\\n Note that on 32 bit machines, if there is actually a gain, we can make \\na backing store with ints yet still allow for storage of nbits&gt;32?  It \\n\\\"just\\\" means a value may be split across 2 or 3 values?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12802829\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12802829&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12802829\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12802829_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802829_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 13:29\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T13:29:51+0000\'\u003e20\\/Jan\\/10 13:29\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI\'ve made a remark at \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-1410\\\" title=\\\"PFOR implementation\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-1410\\\"\u003e\u003cdel\u003eLUCENE-1410\u003c\\/del\u003e\u003c\\/a\u003e (a first attempt at a PFOR implementation) about the header structure for encoding this.\u003cbr\\/\u003e\\nOne thing that is not covered here is how to deal with input arrays with intermediate length that are shorter than 32 and longer than 3 or 4. Shorter ones can easily be encoded as vByte.\u003cbr\\/\u003e\\nSimple9 might be a solution, but it has only 28 data bits and 9 different encoding cases so it appears to be somewhat small.\u003cbr\\/\u003e\\nThere is first attempt at Simple9 at \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-2189\\\" title=\\\"Simple9 (de)compression\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-2189\\\"\u003e\u003cdel\u003eLUCENE-2189\u003c\\/del\u003e\u003c\\/a\u003e.\u003c\\/p\u003e\\n\\n\u003cp\u003eSince the discussion here is on alignment (int\\/long) I\'m wondering how (and whether) to go from the current byte aligned structures to int aligned. Using aligned ints would save the shifting done at IndexInput.getInt() that reads 4 bytes and shifts them into place to create an int from them.\u003cbr\\/\u003e\\nSimple9 can be int aligned and I\'d like to add bigger variations of that, but peferably only ones that add a multiple of 4 bytes.\u003c\\/p\u003e\\n\\n\u003cp\u003eSo would make sense to add functionality to IndexInput and IndexOutput to allow int aligned access?\u003cbr\\/\u003e\\nAre java\'s data streams and\\/or nio buffers smart enough to avoid the byte shifting for ints in such cases?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12802829_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802829_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 13:29\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T13:29:51+0000\'\u003e20\\/Jan\\/10 13:29\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I\'ve made a remark at   LUCENE-1410   (a first attempt at a PFOR implementation) about the header structure for encoding this. \\nOne thing that is not covered here is how to deal with input arrays with intermediate length that are shorter than 32 and longer than 3 or 4. Shorter ones can easily be encoded as vByte. \\nSimple9 might be a solution, but it has only 28 data bits and 9 different encoding cases so it appears to be somewhat small. \\nThere is first attempt at Simple9 at   LUCENE-2189  . \\n\\n Since the discussion here is on alignment (int\\/long) I\'m wondering how (and whether) to go from the current byte aligned structures to int aligned. Using aligned ints would save the shifting done at IndexInput.getInt() that reads 4 bytes and shifts them into place to create an int from them. \\nSimple9 can be int aligned and I\'d like to add bigger variations of that, but peferably only ones that add a multiple of 4 bytes. \\n\\n So would make sense to add functionality to IndexInput and IndexOutput to allow int aligned access? \\nAre java\'s data streams and\\/or nio buffers smart enough to avoid the byte shifting for ints in such cases?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12802854\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12802854&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12802854\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"yseeley@gmail.com\\\" id=\\\"commentauthor_12802854_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=yseeley%40gmail.com\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"yseeley@gmail.com\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Yonik Seeley\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802854_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 14:53\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T14:53:43+0000\'\u003e20\\/Jan\\/10 14:53\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003eUsing aligned ints would save the shifting done at IndexInput.getInt() that reads 4 bytes and shifts them into place to create an int from them.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eHow\'s that?  Is there some JVM intrinsic?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"yseeley@gmail.com\\\" id=\\\"commentauthor_12802854_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=yseeley%40gmail.com\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"yseeley@gmail.com\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Yonik Seeley\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802854_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 14:53\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T14:53:43+0000\'\u003e20\\/Jan\\/10 14:53\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     Using aligned ints would save the shifting done at IndexInput.getInt() that reads 4 bytes and shifts them into place to create an int from them.  \\n\\n How\'s that?  Is there some JVM intrinsic?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12802875\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12802875&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12802875\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12802875_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802875_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 15:54\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T15:54:26+0000\'\u003e20\\/Jan\\/10 15:54\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eFor the record: on the flex branch I just saw IntIndexInput and IntIndexOutput.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12802875_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802875_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 15:54\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T15:54:26+0000\'\u003e20\\/Jan\\/10 15:54\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    For the record: on the flex branch I just saw IntIndexInput and IntIndexOutput.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12802877\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12802877&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12802877\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12802877_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802877_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 16:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T16:00:07+0000\'\u003e20\\/Jan\\/10 16:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\\n\u003cdiv class=\'table-wrap\'\u003e\\n\u003ctable class=\'confluenceTable\'\u003e\u003ctbody\u003e\\n\u003ctr\u003e\\n\u003ctd class=\'confluenceTd\'\u003e Using aligned ints would save the shifting done at IndexInput.getInt() that reads 4 bytes and shifts them into place to create an int from them.\u003c\\/td\u003e\\n\u003c\\/tr\u003e\\n\u003c\\/tbody\u003e\u003c\\/table\u003e\\n\u003c\\/div\u003e\\n\\n\\n\u003cp\u003eHow\'s that? Is there some JVM intrinsic?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eIn the aligned case, and with the right byte order, getInt() on a java data stream might be reduced to processor instructions operating on 4 bytes at a time.\u003c\\/p\u003e\\n\\n\u003cp\u003eIs that what you mean by JVM intrinsic?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12802877_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802877_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 16:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T16:00:07+0000\'\u003e20\\/Jan\\/10 16:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    \\n \\n  \\n \\n  Using aligned ints would save the shifting done at IndexInput.getInt() that reads 4 bytes and shifts them into place to create an int from them. \\n \\n  \\n \\n\\n\\n How\'s that? Is there some JVM intrinsic?  \\n\\n In the aligned case, and with the right byte order, getInt() on a java data stream might be reduced to processor instructions operating on 4 bytes at a time. \\n\\n Is that what you mean by JVM intrinsic?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12802885\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12802885&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12802885\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"yseeley@gmail.com\\\" id=\\\"commentauthor_12802885_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=yseeley%40gmail.com\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"yseeley@gmail.com\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Yonik Seeley\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802885_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 16:25\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T16:25:46+0000\'\u003e20\\/Jan\\/10 16:25\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003eIn the aligned case, and with the right byte order, getInt() on a java data stream might be reduced to processor instructions operating on 4 bytes at a time. Is that what you mean by JVM intrinsic?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eYes.  But are you aware of that having been implemented in any JVMs?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"yseeley@gmail.com\\\" id=\\\"commentauthor_12802885_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=yseeley%40gmail.com\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"yseeley@gmail.com\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Yonik Seeley\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802885_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 16:25\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T16:25:46+0000\'\u003e20\\/Jan\\/10 16:25\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     In the aligned case, and with the right byte order, getInt() on a java data stream might be reduced to processor instructions operating on 4 bytes at a time. Is that what you mean by JVM intrinsic?  \\n\\n Yes.  But are you aware of that having been implemented in any JVMs?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12802888\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12802888&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12802888\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12802888_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802888_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 16:43\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T16:43:27+0000\'\u003e20\\/Jan\\/10 16:43\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\\n\u003cp\u003eToke:\u003cbr\\/\u003e\\nIntroducing yet another level of indirection and making a byte\\/short\\/int\\/long-prvider detached from the implementation of the packed values it tempting.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eYou mean the layer that stores the minValue, so that the full range is\u003cbr\\/\u003e\\nsupported? I actually think we should absorb that into packed ints,\u003cbr\\/\u003e\\nso it\'s only one method call per lookup, and specialize the \\\"positive\u003cbr\\/\u003e\\nonly\\\" cases to avoid the extra add per lookup.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eNo, I mean the backing array of ints or longs. For memory, the obvious choice is int[] or long[], but designing for flexibility calls for an API, which coincidentally is identical to Reader. So, a 4-bit Aligned could be backed by a DirectInt (which will contain an int[]) or a Persistent (doing mmap or some other persistent-oriented lookup).\u003c\\/p\u003e\\n\\n\u003cp\u003e...I should show this in code instead. I\'ll try and find the time.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eYeah, we do eventually want CSF to be updateable, but I don\'t think we\u003cbr\\/\u003e\\nneed this for phase 1?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eNot in the specific scenario, no.\u003c\\/p\u003e\\n\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eToke:\u003cbr\\/\u003e\\nThe whole 32bit vs. 64bit as backing array does present a bit of a problem with persistence. We\'ll be in a situation where the index will be optimized for the architecture used for building, not the one used for searching. Leaving the option of a future mmap open means that it is not possible to do a conversion when retrieving the bits, so I have no solution for this (other than doing memory-only).\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eI\'m confused - a future mmap impl shouldn\'t put pressure on the file\u003cbr\\/\u003e\\nformat used by packed ints today? Ie, a future mmap impl can use a\u003cbr\\/\u003e\\ntotally different format than the designed-to-be-slurped-into-RAM\u003cbr\\/\u003e\\nformat for packed ints, today?\u003c\\/p\u003e\\n\\n\u003cp\u003eAlso, what do you mean by optimized for building not searching?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eWhen we\'re using Aligned, the choice of using int or long for the backing array dictates how the persistent bitstream will be. If the index builder is a 64 bit machine and 7 bits\\/value is used, the result will be longs, each containing 9 values.\u003c\\/p\u003e\\n\\n\u003cp\u003eWhen the structure is read into memory by the searcher, the backing array will again be long. But if the searcher happens to be a 32 bit machine, the performance will be less than if ints were used for the backing array.\u003c\\/p\u003e\\n\\n\u003cp\u003eOne way to handle this is to do a conversion, when loading into memory. If the searcher is 64 bit, it will always convert into longs. If the searcher is 32 bit, it will convert into int, if the bits\\/value is &lt;= 32. The conversion is cheap, so this is no problem in itself.\u003c\\/p\u003e\\n\\n\u003cp\u003eHowever, if we\'re planning for the future (or for flexibility, depending on point of view), we would very much like the persistent format to be directly usable, so that we don\'t need to load the whole structure into memory. This rules out conversion and sets us back to step 1: The index will be optimized for either 32bit or 64 bit searchers.\u003c\\/p\u003e\\n\\n\u003cp\u003eOh well, we could always just ignore it and say that Aligned is 64 bit based. As it is more memory-efficient than Aligned on 32 bit machines, maybe the slightly smaller number of backing longs will compensate for the overhead of retrieving longs on a 64 bit machine.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eNote that on 32 bit machines, if there is actually a gain, we can make\u003cbr\\/\u003e\\na backing store with ints yet still allow for storage of nbits&gt;32? It\u003cbr\\/\u003e\\n\\\"just\\\" means a value may be split across 2 or 3 values?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eMy guess is that the number of values vs. the available level 2 cache will play a big role here: For a relatively small number of values, the added logic will be costly. For a larger number of values, the cache-misses will dwarf that.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12802888_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802888_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 16:43\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T16:43:27+0000\'\u003e20\\/Jan\\/10 16:43\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    \\n Toke: \\nIntroducing yet another level of indirection and making a byte\\/short\\/int\\/long-prvider detached from the implementation of the packed values it tempting.  \\n\\n \\n You mean the layer that stores the minValue, so that the full range is \\nsupported? I actually think we should absorb that into packed ints, \\nso it\'s only one method call per lookup, and specialize the \\\"positive \\nonly\\\" cases to avoid the extra add per lookup.  \\n\\n No, I mean the backing array of ints or longs. For memory, the obvious choice is int[] or long[], but designing for flexibility calls for an API, which coincidentally is identical to Reader. So, a 4-bit Aligned could be backed by a DirectInt (which will contain an int[]) or a Persistent (doing mmap or some other persistent-oriented lookup). \\n\\n ...I should show this in code instead. I\'ll try and find the time. \\n\\n \\n Yeah, we do eventually want CSF to be updateable, but I don\'t think we \\nneed this for phase 1?  \\n\\n Not in the specific scenario, no. \\n\\n\\n \\n Toke: \\nThe whole 32bit vs. 64bit as backing array does present a bit of a problem with persistence. We\'ll be in a situation where the index will be optimized for the architecture used for building, not the one used for searching. Leaving the option of a future mmap open means that it is not possible to do a conversion when retrieving the bits, so I have no solution for this (other than doing memory-only).  \\n\\n \\n I\'m confused - a future mmap impl shouldn\'t put pressure on the file \\nformat used by packed ints today? Ie, a future mmap impl can use a \\ntotally different format than the designed-to-be-slurped-into-RAM \\nformat for packed ints, today? \\n\\n Also, what do you mean by optimized for building not searching?  \\n\\n When we\'re using Aligned, the choice of using int or long for the backing array dictates how the persistent bitstream will be. If the index builder is a 64 bit machine and 7 bits\\/value is used, the result will be longs, each containing 9 values. \\n\\n When the structure is read into memory by the searcher, the backing array will again be long. But if the searcher happens to be a 32 bit machine, the performance will be less than if ints were used for the backing array. \\n\\n One way to handle this is to do a conversion, when loading into memory. If the searcher is 64 bit, it will always convert into longs. If the searcher is 32 bit, it will convert into int, if the bits\\/value is &lt;= 32. The conversion is cheap, so this is no problem in itself. \\n\\n However, if we\'re planning for the future (or for flexibility, depending on point of view), we would very much like the persistent format to be directly usable, so that we don\'t need to load the whole structure into memory. This rules out conversion and sets us back to step 1: The index will be optimized for either 32bit or 64 bit searchers. \\n\\n Oh well, we could always just ignore it and say that Aligned is 64 bit based. As it is more memory-efficient than Aligned on 32 bit machines, maybe the slightly smaller number of backing longs will compensate for the overhead of retrieving longs on a 64 bit machine. \\n\\n \\n Note that on 32 bit machines, if there is actually a gain, we can make \\na backing store with ints yet still allow for storage of nbits&gt;32? It \\n\\\"just\\\" means a value may be split across 2 or 3 values?  \\n\\n My guess is that the number of values vs. the available level 2 cache will play a big role here: For a relatively small number of values, the added logic will be costly. For a larger number of values, the cache-misses will dwarf that.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12802903\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12802903&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12802903\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12802903_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802903_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 17:30\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T17:30:55+0000\'\u003e20\\/Jan\\/10 17:30\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003ePaul: In the aligned case, and with the right byte order, getInt() on a java data stream might be reduced to processor instructions operating on 4 bytes at a time. Is that what you mean by JVM intrinsic?\u003c\\/p\u003e\\n\\n\u003cp\u003eYonik: Yes. But are you aware of that having been implemented in any JVMs?\u003c\\/p\u003e\\n\\n\u003cp\u003eI remember reading about an implementation doing that, but I can\'t find it back now.\u003c\\/p\u003e\\n\\n\u003cp\u003eIf one cannot have such ints directly, there is not much point in unpacking via IndexInput.getInt(), it would be better to unpack directly from the bytes.\u003cbr\\/\u003e\\nAlso, in that case, I\'d prefer to use single byte increments (above 4 byte increments) for the size of the encoded data for variations on Simple9.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12802903_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12802903_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jan\\/10 17:30\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-20T17:30:55+0000\'\u003e20\\/Jan\\/10 17:30\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Paul: In the aligned case, and with the right byte order, getInt() on a java data stream might be reduced to processor instructions operating on 4 bytes at a time. Is that what you mean by JVM intrinsic? \\n\\n Yonik: Yes. But are you aware of that having been implemented in any JVMs? \\n\\n I remember reading about an implementation doing that, but I can\'t find it back now. \\n\\n If one cannot have such ints directly, there is not much point in unpacking via IndexInput.getInt(), it would be better to unpack directly from the bytes. \\nAlso, in that case, I\'d prefer to use single byte increments (above 4 byte increments) for the size of the encoded data for variations on Simple9.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12803628\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12803628&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12803628\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12803628_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803628_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 08:07\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T08:07:51+0000\'\u003e22\\/Jan\\/10 08:07\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eLooking at bit patterns and persistence, I see 3 different ones: Packed, aligned32 and aligned64. Regardless of whether 32bit or 64bit is used when a packed structure is created, it can be read as both 32bit and 64bit packed. As for the special cases of 8, 16, 32 and 64 bits\\/value, the bit patterns are identically to both packed and aligned. This leeds me to propose a header designating one of the three structures mentioned.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe current draft from Michael McCandless states both bitsPerValue and maxValue in the persistent format. It seems a redundant to have both, but I might be missing something here? Either way, the bitsPerValue is ambiguous as it does not translate to memory usage the same way for packed, aligned32 or aligned64. Should I choose, I\'d go for maxValue.\u003c\\/p\u003e\\n\\n\u003cp\u003eWhat about a header stating\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003eformat (\u003cspan class=\\\"code-object\\\"\u003eString\u003c\\/span\u003e \u003cspan class=\\\"code-quote\\\"\u003e\\\"packed\\\"\u003c\\/span\u003e, \u003cspan class=\\\"code-quote\\\"\u003e\\\"aligned32\\\"\u003c\\/span\u003e or \u003cspan class=\\\"code-quote\\\"\u003e\\\"aligned64\\\"\u003c\\/span\u003e)\\nvalueCount (vInt)\\nmaxValue (vLong)\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\u003cp\u003e?\u003c\\/p\u003e\\n\\n\u003cp\u003eI have working code for packed32 and packed64 and am currently fitting it into Michael\'s patch. I hope to finish it this weekend.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12803628_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803628_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 08:07\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T08:07:51+0000\'\u003e22\\/Jan\\/10 08:07\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Looking at bit patterns and persistence, I see 3 different ones: Packed, aligned32 and aligned64. Regardless of whether 32bit or 64bit is used when a packed structure is created, it can be read as both 32bit and 64bit packed. As for the special cases of 8, 16, 32 and 64 bits\\/value, the bit patterns are identically to both packed and aligned. This leeds me to propose a header designating one of the three structures mentioned. \\n\\n The current draft from Michael McCandless states both bitsPerValue and maxValue in the persistent format. It seems a redundant to have both, but I might be missing something here? Either way, the bitsPerValue is ambiguous as it does not translate to memory usage the same way for packed, aligned32 or aligned64. Should I choose, I\'d go for maxValue. \\n\\n What about a header stating \\n  \\n format ( String   \\\"packed\\\" ,  \\\"aligned32\\\"  or  \\\"aligned64\\\" )\\nvalueCount (vInt)\\nmaxValue (vLong)\\n \\n  \\n ? \\n\\n I have working code for packed32 and packed64 and am currently fitting it into Michael\'s patch. I hope to finish it this weekend.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12803633\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12803633&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12803633\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12803633_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803633_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 08:37\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T08:37:01+0000\'\u003e22\\/Jan\\/10 08:37\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eHow about encoding the header something like this:\u003c\\/p\u003e\\n\\n\u003cp\u003eVByte 1 bit.\u003cbr\\/\u003e\\nSimple9 4 bits. These cases imply valueCount and maxValue.\u003cbr\\/\u003e\\nFor around 4-16 numbers encode the complete header in 5-6 bits, also implying valueCount and maxValue.\u003cbr\\/\u003e\\nFor FrameOfRef, encoding 32 or more numbers, a larger header can be used, 4 bytes for example, maxValue is implied from the number of frame bits. valueCount could be 32, 64, 128 (i.e. 2 bits). Also the number of exceptions could be put there.\u003c\\/p\u003e\\n\\n\u003cp\u003eThis header \\\"type\\\" can be chosen depending on the given length of the encoded sequence.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12803633_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803633_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 08:37\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T08:37:01+0000\'\u003e22\\/Jan\\/10 08:37\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    How about encoding the header something like this: \\n\\n VByte 1 bit. \\nSimple9 4 bits. These cases imply valueCount and maxValue. \\nFor around 4-16 numbers encode the complete header in 5-6 bits, also implying valueCount and maxValue. \\nFor FrameOfRef, encoding 32 or more numbers, a larger header can be used, 4 bytes for example, maxValue is implied from the number of frame bits. valueCount could be 32, 64, 128 (i.e. 2 bits). Also the number of exceptions could be put there. \\n\\n This header \\\"type\\\" can be chosen depending on the given length of the encoded sequence.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12803635\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12803635&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12803635\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12803635_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803635_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 08:39\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T08:39:12+0000\'\u003e22\\/Jan\\/10 08:39\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003eI have working code for packed32 and packed64 and am currently fitting it into Michael\'s patch. I hope to finish it this weekend.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eNice!  Sounds like good progress Toke!\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eThe current draft from Michael McCandless states both bitsPerValue and maxValue in the persistent format\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI was only storing maxValue as a convenience for the layer above &#8211; we don\'t need to do that &#8211; I think storing format (packed, aligned32, aligned64) and bitsPerValue makes sense.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eRegardless of whether 32bit or 64bit is used when a packed structure is created, it can be read as both 32bit and 64bit packed.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eRight, but with the challenge (if we use 32bit backing array) of properly handling the nbits&gt;32 case (this is perfectly doable... \\\"it\'s just software\\\" \u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/wink.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e ).\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eAs for the special cases of 8, 16, 32 and 64 bits\\/value, the bit patterns are identically to both packed and aligned.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI had chosen to match IndexOutput\\/Inputs\'s byte order (big-endian) so that the packed format naturally reads back with IndexInput\'s readLong\\/Int\\/Short (I added a readShort).\u003c\\/p\u003e\\n\\n\u003cp\u003eI\'m assuming for these special cases that dedicated Reader impls, with byte[], short[], int[], long[] backing array, is faster than eg backing with a long[] and shift\\/masking per lookup.\u003c\\/p\u003e\\n\\n\u003cp\u003eBut eg for the nbits=3 case, aligned 32\\/64 would ensure that no value spans across two underlying entries in the backing array (wasting some bits of storage in exchange).  Whereas the nbits=2 or 4 cases would naturally be aligned anyway...\u003c\\/p\u003e\\n\\n\u003cp\u003eOne question: the Reader api is now this:\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e\u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e get(\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e index);\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eWhich is convenient since obviously long can accommodate all of the underlying possible nbits, but... for small nbits values, this logically entails a cast.  EG say nbits=8, so it\'s a direct byte[] backing array.  get() must cast up to long, and caller must operate with long... I\'m wondering whether that forced casting is going to hurt performance enough to make us want to have dedicated precision (8, 16, 32, 64) Reader interfaces....\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12803635_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803635_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 08:39\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T08:39:12+0000\'\u003e22\\/Jan\\/10 08:39\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     I have working code for packed32 and packed64 and am currently fitting it into Michael\'s patch. I hope to finish it this weekend.  \\n\\n Nice!  Sounds like good progress Toke! \\n\\n  The current draft from Michael McCandless states both bitsPerValue and maxValue in the persistent format  \\n\\n I was only storing maxValue as a convenience for the layer above &#8211; we don\'t need to do that &#8211; I think storing format (packed, aligned32, aligned64) and bitsPerValue makes sense. \\n\\n  Regardless of whether 32bit or 64bit is used when a packed structure is created, it can be read as both 32bit and 64bit packed.  \\n\\n Right, but with the challenge (if we use 32bit backing array) of properly handling the nbits&gt;32 case (this is perfectly doable... \\\"it\'s just software\\\"   ). \\n\\n  As for the special cases of 8, 16, 32 and 64 bits\\/value, the bit patterns are identically to both packed and aligned.  \\n\\n I had chosen to match IndexOutput\\/Inputs\'s byte order (big-endian) so that the packed format naturally reads back with IndexInput\'s readLong\\/Int\\/Short (I added a readShort). \\n\\n I\'m assuming for these special cases that dedicated Reader impls, with byte[], short[], int[], long[] backing array, is faster than eg backing with a long[] and shift\\/masking per lookup. \\n\\n But eg for the nbits=3 case, aligned 32\\/64 would ensure that no value spans across two underlying entries in the backing array (wasting some bits of storage in exchange).  Whereas the nbits=2 or 4 cases would naturally be aligned anyway... \\n\\n One question: the Reader api is now this: \\n  \\n  long  get( int  index);\\n \\n  \\n\\n Which is convenient since obviously long can accommodate all of the underlying possible nbits, but... for small nbits values, this logically entails a cast.  EG say nbits=8, so it\'s a direct byte[] backing array.  get() must cast up to long, and caller must operate with long... I\'m wondering whether that forced casting is going to hurt performance enough to make us want to have dedicated precision (8, 16, 32, 64) Reader interfaces....              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12803638\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12803638&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12803638\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12803638_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803638_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 08:45\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T08:45:21+0000\'\u003e22\\/Jan\\/10 08:45\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003eThis header \\\"type\\\" can be chosen depending on the given length of the encoded sequence.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI think we should separate the header needed for this issue (single header stored once at the beginning of a potentially massive file), from the per-block header used by int block based formats like SimpleN\\/PForDelta\\/etc?\u003c\\/p\u003e\\n\\n\u003cp\u003eI think Toke\'s proposed header, if we swap in bitsPerValue in place of maxValue, is good for this issue?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12803638_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803638_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 08:45\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T08:45:21+0000\'\u003e22\\/Jan\\/10 08:45\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     This header \\\"type\\\" can be chosen depending on the given length of the encoded sequence.  \\n\\n I think we should separate the header needed for this issue (single header stored once at the beginning of a potentially massive file), from the per-block header used by int block based formats like SimpleN\\/PForDelta\\/etc? \\n\\n I think Toke\'s proposed header, if we swap in bitsPerValue in place of maxValue, is good for this issue?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12803679\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12803679&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12803679\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12803679_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803679_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 12:27\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T12:27:10+0000\'\u003e22\\/Jan\\/10 12:27\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI\'ve uploaded a preliminary patch with packed32, packed64, directByte, directShort, directInt and directLong implementations. I\'ve used Michael McCandless patch as foundation, but the new patch is generated to be independent from the old one. It uses maxValue instead of bitsPerValue for the header, there\'s no test of packed32 and there\'s a general need for cleanup. The main missing components are aligned32 and aligned64.\u003c\\/p\u003e\\n\\n\u003cp\u003eI\'ve done quite a bit of refactoring and (cheater that I am) added setters to all implementations of Reader, although not to the interface. Besides the nitty-gritty details of the implementation, I suspect that the code for selecting which implementation to use is a prime candidate for discussion. It is located in PackedInts and tries to select the best implementation based on preference for packed, aligned and direct paired with preference for 32bit and 64bit.\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e  \u003cspan class=\\\"code-keyword\\\"\u003eprivate\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003estatic\u003c\\/span\u003e IMPLEMENTATION getImplementation(\\n          \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e maxValue, PRIORITY priority, BLOCK_PREFERENCE block) {\\n    \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e bits = bitsRequired(maxValue);\\n    \u003cspan class=\\\"code-keyword\\\"\u003eswitch\u003c\\/span\u003e (priority) {\\n      \u003cspan class=\\\"code-keyword\\\"\u003ecase\u003c\\/span\u003e direct: {\\n        bits = getNextFixedSize(bits);\\n        \u003cspan class=\\\"code-keyword\\\"\u003ebreak\u003c\\/span\u003e;\\n      }\\n      \u003cspan class=\\\"code-keyword\\\"\u003ecase\u003c\\/span\u003e aligned: {\\n        \u003cspan class=\\\"code-keyword\\\"\u003eif\u003c\\/span\u003e (block == BLOCK_PREFERENCE.bit32) {\\n          \u003cspan class=\\\"code-keyword\\\"\u003eif\u003c\\/span\u003e (bits == 7 || bits &gt;= 11) {\\n            bits = getNextFixedSize(bits); \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ Align to \u003cspan class=\\\"code-object\\\"\u003ebyte\u003c\\/span\u003e, \u003cspan class=\\\"code-object\\\"\u003eshort\u003c\\/span\u003e, \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e or \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e\\n\u003c\\/span\u003e          }\\n        } \u003cspan class=\\\"code-keyword\\\"\u003eelse\u003c\\/span\u003e {\\n          \u003cspan class=\\\"code-keyword\\\"\u003eif\u003c\\/span\u003e ((bits &gt;= 13 &amp;&amp; bits &lt;= 15) || (bits &gt;= 22)) {\\n            bits = getNextFixedSize(bits); \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ Align to \u003cspan class=\\\"code-object\\\"\u003eshort\u003c\\/span\u003e, \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e or \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e\\n\u003c\\/span\u003e          }\\n        }\\n      }\\n    }\\n    \u003cspan class=\\\"code-keyword\\\"\u003eswitch\u003c\\/span\u003e (bits) { \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ The safe choices\\n\u003c\\/span\u003e      \u003cspan class=\\\"code-keyword\\\"\u003ecase\u003c\\/span\u003e 8: \u003cspan class=\\\"code-keyword\\\"\u003ereturn\u003c\\/span\u003e IMPLEMENTATION.directByte;\\n      \u003cspan class=\\\"code-keyword\\\"\u003ecase\u003c\\/span\u003e 16: \u003cspan class=\\\"code-keyword\\\"\u003ereturn\u003c\\/span\u003e IMPLEMENTATION.directShort;\\n      \u003cspan class=\\\"code-keyword\\\"\u003ecase\u003c\\/span\u003e 32: \u003cspan class=\\\"code-keyword\\\"\u003ereturn\u003c\\/span\u003e IMPLEMENTATION.directInt;\\n      \u003cspan class=\\\"code-keyword\\\"\u003ecase\u003c\\/span\u003e 63:\\n      \u003cspan class=\\\"code-keyword\\\"\u003ecase\u003c\\/span\u003e 64: \u003cspan class=\\\"code-keyword\\\"\u003ereturn\u003c\\/span\u003e IMPLEMENTATION.directLong;\\n    }\\n\\n    \u003cspan class=\\\"code-keyword\\\"\u003eif\u003c\\/span\u003e (priority == PRIORITY.aligned || bits == 1 || bits == 2 || bits == 4) {\\n      \u003cspan class=\\\"code-keyword\\\"\u003ereturn\u003c\\/span\u003e block == BLOCK_PREFERENCE.bit32 &amp;&amp; bits &lt; 32 ?\\n              IMPLEMENTATION.aligned32 : IMPLEMENTATION.aligned64;\\n    }\\n    \u003cspan class=\\\"code-keyword\\\"\u003ereturn\u003c\\/span\u003e block == BLOCK_PREFERENCE.bit32 &amp;&amp; bits &lt; 32 ?\\n            IMPLEMENTATION.packed32 : IMPLEMENTATION.packed64;\\n\\n    \u003cspan class=\\\"code-keyword\\\"\u003ereturn\u003c\\/span\u003e IMPLEMENTATION.packed64;\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eI think that an \\\"auto\\\"-value for priority is worth considering: For 9, 17 and 33 bits\\/value, packed is often faster than aligned due to only using half the memory and thus having lower risk of level 2 cache misses. For high bits\\/value, such as 30, 31, 62, 63 and 64 (guesstimating here), choosing direct seems to be the best choice for most situations. Users of PackedInts should not be expected to know this.\u003c\\/p\u003e\\n\\n\u003cp\u003eI\'ll start work on aligned32 and aligned64, but I will leave the rest of the patch alone for now, as I suspect that there\'ll be some changes to the current draft.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12803679_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803679_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 12:27\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T12:27:10+0000\'\u003e22\\/Jan\\/10 12:27\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I\'ve uploaded a preliminary patch with packed32, packed64, directByte, directShort, directInt and directLong implementations. I\'ve used Michael McCandless patch as foundation, but the new patch is generated to be independent from the old one. It uses maxValue instead of bitsPerValue for the header, there\'s no test of packed32 and there\'s a general need for cleanup. The main missing components are aligned32 and aligned64. \\n\\n I\'ve done quite a bit of refactoring and (cheater that I am) added setters to all implementations of Reader, although not to the interface. Besides the nitty-gritty details of the implementation, I suspect that the code for selecting which implementation to use is a prime candidate for discussion. It is located in PackedInts and tries to select the best implementation based on preference for packed, aligned and direct paired with preference for 32bit and 64bit. \\n\\n  \\n    private   static  IMPLEMENTATION getImplementation(\\n           long  maxValue, PRIORITY priority, BLOCK_PREFERENCE block) {\\n     int  bits = bitsRequired(maxValue);\\n     switch  (priority) {\\n       case  direct: {\\n        bits = getNextFixedSize(bits);\\n         break ;\\n      }\\n       case  aligned: {\\n         if  (block == BLOCK_PREFERENCE.bit32) {\\n           if  (bits == 7 || bits &gt;= 11) {\\n            bits = getNextFixedSize(bits);  \\/\\/ Align to  byte ,  short ,  int  or  long \\n           }\\n        }  else  {\\n           if  ((bits &gt;= 13 &amp;&amp; bits &lt;= 15) || (bits &gt;= 22)) {\\n            bits = getNextFixedSize(bits);  \\/\\/ Align to  short ,  int  or  long \\n           }\\n        }\\n      }\\n    }\\n     switch  (bits) {  \\/\\/ The safe choices\\n        case  8:  return  IMPLEMENTATION.directByte;\\n       case  16:  return  IMPLEMENTATION.directShort;\\n       case  32:  return  IMPLEMENTATION.directInt;\\n       case  63:\\n       case  64:  return  IMPLEMENTATION.directLong;\\n    }\\n\\n     if  (priority == PRIORITY.aligned || bits == 1 || bits == 2 || bits == 4) {\\n       return  block == BLOCK_PREFERENCE.bit32 &amp;&amp; bits &lt; 32 ?\\n              IMPLEMENTATION.aligned32 : IMPLEMENTATION.aligned64;\\n    }\\n     return  block == BLOCK_PREFERENCE.bit32 &amp;&amp; bits &lt; 32 ?\\n            IMPLEMENTATION.packed32 : IMPLEMENTATION.packed64;\\n\\n     return  IMPLEMENTATION.packed64;\\n \\n  \\n\\n I think that an \\\"auto\\\"-value for priority is worth considering: For 9, 17 and 33 bits\\/value, packed is often faster than aligned due to only using half the memory and thus having lower risk of level 2 cache misses. For high bits\\/value, such as 30, 31, 62, 63 and 64 (guesstimating here), choosing direct seems to be the best choice for most situations. Users of PackedInts should not be expected to know this. \\n\\n I\'ll start work on aligned32 and aligned64, but I will leave the rest of the patch alone for now, as I suspect that there\'ll be some changes to the current draft.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12803743\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12803743&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12803743\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12803743_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803743_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 16:17\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T16:17:33+0000\'\u003e22\\/Jan\\/10 16:17\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eThe generated code in the patches has quite a few switch statements to decode a single value.\u003cbr\\/\u003e\\nThese switch statements could be avoided by using something like this (adapted from the 1410b patch):\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e\\/** Decode a value from the compressed array of b bit values by retrieving the corresponding bits.\\n * Since numFrameBits is always smaller than the number of bits in an \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e,\\n * at most two ints in the buffer will be used.\\n *\\/\\n\u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e decodeCompressedValueBase(\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e compressedPos, \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e numBits) {\\n  \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e compressedBitPos = numBits * compressedPos;\\n  \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e intIndex = (compressedBitPos &gt;&gt; 5);\\n  \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e firstBitPosition = compressedBitPos &amp; 31;\\n  \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e value = intBuffer.get(intIndex) &gt;&gt;&gt; firstBitPosition;\\n  \u003cspan class=\\\"code-keyword\\\"\u003eif\u003c\\/span\u003e ((firstBitPosition + numBits) &gt; 32) { \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ value does not fit in first \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e\\n\u003c\\/span\u003e    intIndex++;\\n    value |= (intBuffer.get(intIndex) &lt;&lt; (32 - firstBitPosition));\\n  }\\n  \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e maxValue = (\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e) ((1L &lt;&lt; numBits) - 1);\\n  \u003cspan class=\\\"code-keyword\\\"\u003ereturn\u003c\\/span\u003e value &amp; maxValue;\\n}\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\u003cp\u003eAs maxValue is essentially a mask, it could also be looked up in an array.\u003c\\/p\u003e\\n\\n\u003cp\u003eCould that be faster than these generated switch statements?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12803743_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803743_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 16:17\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T16:17:33+0000\'\u003e22\\/Jan\\/10 16:17\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    The generated code in the patches has quite a few switch statements to decode a single value. \\nThese switch statements could be avoided by using something like this (adapted from the 1410b patch): \\n  \\n \\/** Decode a value from the compressed array of b bit values by retrieving the corresponding bits.\\n * Since numFrameBits is always smaller than the number of bits in an  int ,\\n * at most two ints in the buffer will be used.\\n *\\/\\n public   int  decodeCompressedValueBase( int  compressedPos,  int  numBits) {\\n   int  compressedBitPos = numBits * compressedPos;\\n   int  intIndex = (compressedBitPos &gt;&gt; 5);\\n   int  firstBitPosition = compressedBitPos &amp; 31;\\n   int  value = intBuffer.get(intIndex) &gt;&gt;&gt; firstBitPosition;\\n   if  ((firstBitPosition + numBits) &gt; 32) {  \\/\\/ value does not fit in first  int \\n     intIndex++;\\n    value |= (intBuffer.get(intIndex) &lt;&lt; (32 - firstBitPosition));\\n  }\\n   final   int  maxValue = ( int ) ((1L &lt;&lt; numBits) - 1);\\n   return  value &amp; maxValue;\\n}\\n \\n  \\n As maxValue is essentially a mask, it could also be looked up in an array. \\n\\n Could that be faster than these generated switch statements?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12803872\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12803872&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12803872\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12803872_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803872_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 21:11\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T21:11:08+0000\'\u003e22\\/Jan\\/10 21:11\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI think Michaels generated code was meant as a temporary solution, until a handcrafted version was available. In packed32 and packed64, the code for decoding a value is \u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e  \u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e get(\u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e index) {\\n    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e majorBitPos = index * elementBits;\\n    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e elementPos = (\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e)(majorBitPos &gt;&gt;&gt; BLOCK_BITS); \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ \\/ BLOCK_SIZE\\n\u003c\\/span\u003e    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e bitPos =     (\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e)(majorBitPos &amp; MOD_MASK); \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ % BLOCK_SIZE);\\n\u003c\\/span\u003e\\n    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e base = bitPos * FAC_BITPOS;\\n\\n    \u003cspan class=\\\"code-keyword\\\"\u003ereturn\u003c\\/span\u003e ((blocks[elementPos] &lt;&lt; shifts[base]) &gt;&gt;&gt; shifts[base+1]) |\\n            ((blocks[elementPos+1] &gt;&gt;&gt; shifts[base+2]) &amp; readMasks[bitPos]);\\n  }\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\u003cp\u003ewhich looks a lot like your (Paul Elschot)  suggestion. It  avoids all conditionals at the cost of more bit-operations and a dummy element at the end of the backing array. I must admit that my performance testing of the different solutions has been fairly ad hoc (measure, tweak, repeat), so an appropriate test would be in order.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12803872_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12803872_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Jan\\/10 21:11\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-22T21:11:08+0000\'\u003e22\\/Jan\\/10 21:11\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I think Michaels generated code was meant as a temporary solution, until a handcrafted version was available. In packed32 and packed64, the code for decoding a value is  \\n  \\n    public   long  get( final   int  index) {\\n     final   long  majorBitPos = index * elementBits;\\n     final   int  elementPos = ( int )(majorBitPos &gt;&gt;&gt; BLOCK_BITS);  \\/\\/ \\/ BLOCK_SIZE\\n      final   int  bitPos =     ( int )(majorBitPos &amp; MOD_MASK);  \\/\\/ % BLOCK_SIZE);\\n \\n     final   int  base = bitPos * FAC_BITPOS;\\n\\n     return  ((blocks[elementPos] &lt;&lt; shifts[base]) &gt;&gt;&gt; shifts[base+1]) |\\n            ((blocks[elementPos+1] &gt;&gt;&gt; shifts[base+2]) &amp; readMasks[bitPos]);\\n  }\\n \\n  \\n which looks a lot like your (Paul Elschot)  suggestion. It  avoids all conditionals at the cost of more bit-operations and a dummy element at the end of the backing array. I must admit that my performance testing of the different solutions has been fairly ad hoc (measure, tweak, repeat), so an appropriate test would be in order.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12804062\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12804062&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12804062\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12804062_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12804062_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/10 10:44\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-23T10:44:44+0000\'\u003e23\\/Jan\\/10 10:44\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eNice to see a more mature alternative.\u003cbr\\/\u003e\\nThe trade off between (dummy element\\/unconditioned extra access) and (conditioned extra access) is of later concern.\u003cbr\\/\u003e\\nBoth the extra access and the condition take cycles, so it\'s not clear which one will be faster. It might even depend on the value of elementBits.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12804062_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12804062_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/10 10:44\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-23T10:44:44+0000\'\u003e23\\/Jan\\/10 10:44\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Nice to see a more mature alternative. \\nThe trade off between (dummy element\\/unconditioned extra access) and (conditioned extra access) is of later concern. \\nBoth the extra access and the condition take cycles, so it\'s not clear which one will be faster. It might even depend on the value of elementBits.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12804072\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12804072&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12804072\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n                                            \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12804072_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12804072_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/10 11:48\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-23T11:48:57+0000\'\u003e23\\/Jan\\/10 11:48\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e   - \u003cspan class=\\\"redText subText\\\" title=\\\"Paul Elschot - 23\\/Jan\\/10 11:50\\\"\u003eedited\u003c\\/span\u003e \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eAs to whether to use int or long in the interface unsigned packed int, the only numbers that will probably need to be long in the foreseeable future are docids. However this change can be delayed by not allowing an index segment to grow beyond 2^32 or 2^31-1docs, and by only implementing the long docids for multiple index segments.\u003cbr\\/\u003e\\nSo as long as it is ok to assume that an index segment can have MAXINT docs at most, we could use an int interface here.\u003cbr\\/\u003e\\nDo Nutch and\\/or Solr already have long docids implemented on multiple index readers\\/writers or segments?\u003c\\/p\u003e\\n\\n\u003cp\u003eThe other border is the max size of a document field. If that goes beyond MAXINT, the positions and maybe even the frequencies would need to be changed from int to long. But for now I can\'t think of a real use case with a document field that has more than MAXINT positions. That would be like a book with ten million pages of text. Did anyone ever run into this limitation?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n                                            \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12804072_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12804072_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jan\\/10 11:48\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-23T11:48:57+0000\'\u003e23\\/Jan\\/10 11:48\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e   - \u003cspan class=\\\"redText subText\\\" title=\\\"Paul Elschot - 23\\/Jan\\/10 11:50\\\"\u003eedited\u003c\\/span\u003e                   As to whether to use int or long in the interface unsigned packed int, the only numbers that will probably need to be long in the foreseeable future are docids. However this change can be delayed by not allowing an index segment to grow beyond 2^32 or 2^31-1docs, and by only implementing the long docids for multiple index segments. \\nSo as long as it is ok to assume that an index segment can have MAXINT docs at most, we could use an int interface here. \\nDo Nutch and\\/or Solr already have long docids implemented on multiple index readers\\/writers or segments? \\n\\n The other border is the max size of a document field. If that goes beyond MAXINT, the positions and maybe even the frequencies would need to be changed from int to long. But for now I can\'t think of a real use case with a document field that has more than MAXINT positions. That would be like a book with ten million pages of text. Did anyone ever run into this limitation?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12804723\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12804723&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12804723\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12804723_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12804723_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'25\\/Jan\\/10 21:21\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-25T21:21:39+0000\'\u003e25\\/Jan\\/10 21:21\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eGood progress !\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eI think Michaels generated code was meant as a temporary solution, until a handcrafted version was available\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eActually that was intended to be a fast impl... the switch should be\u003cbr\\/\u003e\\ncompiled to a direct lookup (maybe plus a conditional to catch the\u003cbr\\/\u003e\\n\\\"default\\\" case even though it will never happen...ugh).  But I like\u003cbr\\/\u003e\\nyour impl with no conditional at all.  We should test both.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eAs to whether to use int or long in the interface unsigned packed int, the only numbers that will probably need to be long in the foreseeable future are docids.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eAlso the file offsets into the terms dict, possibly the offsets in RAM\u003cbr\\/\u003e\\ninto the terms dict character data (UTF8 byte[]).  Also, when we do\u003cbr\\/\u003e\\ncolumn stride fields, we allow storing values &gt; int.  I think we\u003cbr\\/\u003e\\nshould stick with \u003ctt\u003elong get(index)\u003c\\/tt\u003e for now.\u003c\\/p\u003e\\n\\n\u003cp\u003eOther comments:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eMaybe we should move all of this under oal.util.packed?\u003cbr\\/\u003e\\n    (packedints?  ints?)\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eI think we should remove getMaxValue() from the Reader interface?\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eWhy create the IMPLEMENTATION enum?  Why not simply return an\u003cbr\\/\u003e\\n    \u003cspan class=\\\"error\\\"\u003e&#91;anonymous&#93;\u003c\\/span\u003e instance of Writer?\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eWhy not store bitsPerValue in the header instead of maxValue?  EG\u003cbr\\/\u003e\\n    maybe my maxValue is 7000, but because I\'m using directShort,\u003cbr\\/\u003e\\n    bitsPerValue is 16.  Also, the maxValue at write time should not\u003cbr\\/\u003e\\n    have to be known &#8211; eg the factory API should let me ask for a\u003cbr\\/\u003e\\n    direct short writer without declaring the maxValue I will store.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eI wonder if we should add an optional Object\u003cbr\\/\u003e\\n    getDirectBackingArray().  The packed\\/aligned impls would return\u003cbr\\/\u003e\\n    null, but the direct byte\\/short\\/int\\/long impls would return their\u003cbr\\/\u003e\\n    array.  This would allow callers to specialize upstream impls to\u003cbr\\/\u003e\\n    do the direct array lookup without the cast-to-long (like how\u003cbr\\/\u003e\\n    FieldComparator now has impls for byte,short,int,long).  I suspect\u003cbr\\/\u003e\\n    for column stride fields, when sorting by an integer field, on a\u003cbr\\/\u003e\\n    32bit arch, this would be a perf win.  But: let\'s wait until we\u003cbr\\/\u003e\\n    have CSFs, and we can test whether there really is a gain here....\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eI think we shouldn\'t put a getWriter on every Reader\u003cbr\\/\u003e\\n    impl... because it\'s a one to many mapping?  Eg the format written\u003cbr\\/\u003e\\n    by PackedWriter can be read by direct byte\\/short\\/int\\/long,\u003cbr\\/\u003e\\n    Packed32\\/64.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eFor starters I don\'t think we should make reader impls that can\u003cbr\\/\u003e\\n    read nbits &gt; 31 bits with an int[] backing array.  I think long[]\u003cbr\\/\u003e\\n    backing array is fine.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eI don\'t think we need separate PRIORITY and BLOCK_PREFERENCE?\u003cbr\\/\u003e\\n    Can\'t we have a single enum (STORAGE?) with: packed, aligned32,\u003cbr\\/\u003e\\n    aligned64?  \\\"Direct\\\" is really just packed with nbits rounded up\u003cbr\\/\u003e\\n    to 8,16,32,64.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eAligned32\\/64 is very wasteful for certain nbits... I like the idea\u003cbr\\/\u003e\\n    of \\\"auto\\\" to avoid risk that caller picks a bad combination.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eI think for starters we should not make any reader impls that do\u003cbr\\/\u003e\\n    remapping at load time.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12804723_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12804723_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'25\\/Jan\\/10 21:21\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-25T21:21:39+0000\'\u003e25\\/Jan\\/10 21:21\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Good progress ! \\n\\n  I think Michaels generated code was meant as a temporary solution, until a handcrafted version was available  \\n\\n Actually that was intended to be a fast impl... the switch should be \\ncompiled to a direct lookup (maybe plus a conditional to catch the \\n\\\"default\\\" case even though it will never happen...ugh).  But I like \\nyour impl with no conditional at all.  We should test both. \\n\\n  As to whether to use int or long in the interface unsigned packed int, the only numbers that will probably need to be long in the foreseeable future are docids.  \\n\\n Also the file offsets into the terms dict, possibly the offsets in RAM \\ninto the terms dict character data (UTF8 byte[]).  Also, when we do \\ncolumn stride fields, we allow storing values &gt; int.  I think we \\nshould stick with  long get(index)  for now. \\n\\n Other comments: \\n\\n \\n\\t Maybe we should move all of this under oal.util.packed? \\n    (packedints?  ints?) \\n \\n\\n\\n \\n\\t I think we should remove getMaxValue() from the Reader interface? \\n \\n\\n\\n \\n\\t Why create the IMPLEMENTATION enum?  Why not simply return an \\n     &#91;anonymous&#93;  instance of Writer? \\n \\n\\n\\n \\n\\t Why not store bitsPerValue in the header instead of maxValue?  EG \\n    maybe my maxValue is 7000, but because I\'m using directShort, \\n    bitsPerValue is 16.  Also, the maxValue at write time should not \\n    have to be known &#8211; eg the factory API should let me ask for a \\n    direct short writer without declaring the maxValue I will store. \\n \\n\\n\\n \\n\\t I wonder if we should add an optional Object \\n    getDirectBackingArray().  The packed\\/aligned impls would return \\n    null, but the direct byte\\/short\\/int\\/long impls would return their \\n    array.  This would allow callers to specialize upstream impls to \\n    do the direct array lookup without the cast-to-long (like how \\n    FieldComparator now has impls for byte,short,int,long).  I suspect \\n    for column stride fields, when sorting by an integer field, on a \\n    32bit arch, this would be a perf win.  But: let\'s wait until we \\n    have CSFs, and we can test whether there really is a gain here.... \\n \\n\\n\\n \\n\\t I think we shouldn\'t put a getWriter on every Reader \\n    impl... because it\'s a one to many mapping?  Eg the format written \\n    by PackedWriter can be read by direct byte\\/short\\/int\\/long, \\n    Packed32\\/64. \\n \\n\\n\\n \\n\\t For starters I don\'t think we should make reader impls that can \\n    read nbits &gt; 31 bits with an int[] backing array.  I think long[] \\n    backing array is fine. \\n \\n\\n\\n \\n\\t I don\'t think we need separate PRIORITY and BLOCK_PREFERENCE? \\n    Can\'t we have a single enum (STORAGE?) with: packed, aligned32, \\n    aligned64?  \\\"Direct\\\" is really just packed with nbits rounded up \\n    to 8,16,32,64. \\n \\n\\n\\n \\n\\t Aligned32\\/64 is very wasteful for certain nbits... I like the idea \\n    of \\\"auto\\\" to avoid risk that caller picks a bad combination. \\n \\n\\n\\n \\n\\t I think for starters we should not make any reader impls that do \\n    remapping at load time. \\n \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12804743\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12804743&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12804743\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12804743_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12804743_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'25\\/Jan\\/10 21:49\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-25T21:49:36+0000\'\u003e25\\/Jan\\/10 21:49\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\\n\u003cp\u003eAs to whether to use int or long in the interface unsigned packed int, the only numbers that will probably need to be long in the foreseeable future are docids.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eAlso the file offsets into the terms dict, possibly the offsets in RAM\u003cbr\\/\u003e\\n into the terms dict character data (UTF8 byte[]). Also, when we do\u003cbr\\/\u003e\\n column stride fields, we allow storing values &gt; int. I think we\u003cbr\\/\u003e\\n should stick with long get(index) for now.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\u003cp\u003eIndeed I missed the offsets. However, a long get(index) will probably get in the way, because there are far fewer offsets\u003cbr\\/\u003e\\nthan normal data, and the 32 bit processors will be around for a long time. So I think we\'ll need both long (for the offsets) and int (for the rest) in the end.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"paul.elschot@xs4all.nl\\\" id=\\\"commentauthor_12804743_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=paul.elschot%40xs4all.nl\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"paul.elschot@xs4all.nl\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Paul Elschot\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12804743_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'25\\/Jan\\/10 21:49\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-25T21:49:36+0000\'\u003e25\\/Jan\\/10 21:49\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    \\n As to whether to use int or long in the interface unsigned packed int, the only numbers that will probably need to be long in the foreseeable future are docids.  \\n \\n Also the file offsets into the terms dict, possibly the offsets in RAM \\n into the terms dict character data (UTF8 byte[]). Also, when we do \\n column stride fields, we allow storing values &gt; int. I think we \\n should stick with long get(index) for now.  \\n Indeed I missed the offsets. However, a long get(index) will probably get in the way, because there are far fewer offsets \\nthan normal data, and the 32 bit processors will be around for a long time. So I think we\'ll need both long (for the offsets) and int (for the rest) in the end.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12804809\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12804809&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12804809\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12804809_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12804809_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'26\\/Jan\\/10 00:17\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-26T00:17:15+0000\'\u003e26\\/Jan\\/10 00:17\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\\n\u003cp\u003eI think we should remove getMaxValue() from the Reader interface?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eYes. I only left maxValue in the code because I ran out of time.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eWhy create the IMPLEMENTATION enum? Why not simply return an\u003cbr\\/\u003e\\n\u003cspan class=\\\"error\\\"\u003e&#91;anonymous&#93;\u003c\\/span\u003e instance of Writer?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eThe IMPLEMENTATION enum is only used internally and is package private. It was introduced to separate decision-making from specific implementations - e.g. the packed writer is the same for packed32 and packed64, although the reader differs. But it could very well be that it confuses more than it helps.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eWhy not store bitsPerValue in the header instead of maxValue?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eAs above - I did not have the time to fix it and wanted to push the patch in order to move the discussion along.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eAlso, the maxValue at write time should not\u003cbr\\/\u003e\\nhave to be known - eg the factory API should let me ask for a\u003cbr\\/\u003e\\ndirect short writer without declaring the maxValue I will store.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eSince Packed and Aligned needs maxValue (or bitsPerValue), this would require two distinct methods in the factory, each returning a subset of the possible implementations. I find that rather confusing.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eI wonder if we should add an optional Object\u003cbr\\/\u003e\\ngetDirectBackingArray(). The packed\\/aligned impls would return\u003cbr\\/\u003e\\nnull, but the direct byte\\/short\\/int\\/long impls would return their\u003cbr\\/\u003e\\narray. \u003cspan class=\\\"error\\\"\u003e&#91;...&#93;\u003c\\/span\u003e \u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eSpeaking of API additions, I find that\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e\u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e getBitsPerValue();\\n\u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e size();\\n\u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e void set(\u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e value);\\n\u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e void clear();\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\u003cp\u003eare trivial to implement for the known implementations. They open up for things like auto-growing to fit higher values by using a delegating wrapper, re-using the structure for counting purposes and sorting in-place.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eI think we shouldn\'t put a getWriter on every Reader\u003cbr\\/\u003e\\nimpl... because it\'s a one to many mapping? Eg the format written\u003cbr\\/\u003e\\nby PackedWriter can be read by direct byte\\/short\\/int\\/long,\u003cbr\\/\u003e\\nPacked32\\/64.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eQuite right.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eFor starters I don\'t think we should make reader impls that can\u003cbr\\/\u003e\\nread nbits &gt; 31 bits with an int[] backing array. I think long[]\u003cbr\\/\u003e\\nbacking array is fine.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\u003cp\u003eThe current patch limits nbits to 32 for Packed32. I am confident that an int-backed reader with nbits &gt; 32 will be slower than a long-backed reader on a 32 bit machine.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eI don\'t think we need separate PRIORITY and BLOCK_PREFERENCE?\u003cbr\\/\u003e\\nCan\'t we have a single enum (STORAGE?) with: packed, aligned32,\u003cbr\\/\u003e\\naligned64? \\\"Direct\\\" is really just packed with nbits rounded up\u003cbr\\/\u003e\\nto 8,16,32,64.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\u003cp\u003eI agree that it does complicate matters somewhat to have them separated. When calling getReader the BLOCK_PREFERENCE should also be removed, as the block preference will always be the same as that architecture. Removing the \\\"direct\\\" option would require the caller to do some of the logic in some cases: If low processing requirements is a priority, direct is preferably and when the bitsPerValue is calculated, the caller would have to do the if (bitsPerValue &gt; 32) bitsPerValue = 64 and so on.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12804809_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12804809_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'26\\/Jan\\/10 00:17\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-01-26T00:17:15+0000\'\u003e26\\/Jan\\/10 00:17\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    \\n I think we should remove getMaxValue() from the Reader interface?  \\n\\n Yes. I only left maxValue in the code because I ran out of time. \\n\\n \\n Why create the IMPLEMENTATION enum? Why not simply return an \\n &#91;anonymous&#93;  instance of Writer?  \\n\\n The IMPLEMENTATION enum is only used internally and is package private. It was introduced to separate decision-making from specific implementations - e.g. the packed writer is the same for packed32 and packed64, although the reader differs. But it could very well be that it confuses more than it helps. \\n\\n \\n Why not store bitsPerValue in the header instead of maxValue?  \\n\\n As above - I did not have the time to fix it and wanted to push the patch in order to move the discussion along. \\n\\n \\n Also, the maxValue at write time should not \\nhave to be known - eg the factory API should let me ask for a \\ndirect short writer without declaring the maxValue I will store.  \\n\\n Since Packed and Aligned needs maxValue (or bitsPerValue), this would require two distinct methods in the factory, each returning a subset of the possible implementations. I find that rather confusing. \\n\\n \\n I wonder if we should add an optional Object \\ngetDirectBackingArray(). The packed\\/aligned impls would return \\nnull, but the direct byte\\/short\\/int\\/long impls would return their \\narray.  &#91;...&#93;    \\n\\n Speaking of API additions, I find that \\n  \\n  public   int  getBitsPerValue();\\n public   int  size();\\n public  void set( long  value);\\n public  void clear();\\n \\n  \\n are trivial to implement for the known implementations. They open up for things like auto-growing to fit higher values by using a delegating wrapper, re-using the structure for counting purposes and sorting in-place. \\n\\n \\n I think we shouldn\'t put a getWriter on every Reader \\nimpl... because it\'s a one to many mapping? Eg the format written \\nby PackedWriter can be read by direct byte\\/short\\/int\\/long, \\nPacked32\\/64.  \\n\\n Quite right. \\n\\n \\n For starters I don\'t think we should make reader impls that can \\nread nbits &gt; 31 bits with an int[] backing array. I think long[] \\nbacking array is fine.  \\n The current patch limits nbits to 32 for Packed32. I am confident that an int-backed reader with nbits &gt; 32 will be slower than a long-backed reader on a 32 bit machine. \\n\\n \\n I don\'t think we need separate PRIORITY and BLOCK_PREFERENCE? \\nCan\'t we have a single enum (STORAGE?) with: packed, aligned32, \\naligned64? \\\"Direct\\\" is really just packed with nbits rounded up \\nto 8,16,32,64.  \\n I agree that it does complicate matters somewhat to have them separated. When calling getReader the BLOCK_PREFERENCE should also be removed, as the block preference will always be the same as that architecture. Removing the \\\"direct\\\" option would require the caller to do some of the logic in some cases: If low processing requirements is a priority, direct is preferably and when the bitsPerValue is calculated, the caller would have to do the if (bitsPerValue &gt; 32) bitsPerValue = 64 and so on.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12829715\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12829715&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12829715\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12829715_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12829715_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'04\\/Feb\\/10 19:24\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-04T19:24:50+0000\'\u003e04\\/Feb\\/10 19:24\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\\n\u003cblockquote\u003e\u003cp\u003eAlso, the maxValue at write time should not have to be known - eg the factory API should let me ask for a direct short writer without declaring the maxValue I will store.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eSince Packed and Aligned needs maxValue (or bitsPerValue), this would require two distinct methods in the factory, each returning a subset of the possible implementations. I find that rather confusing.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eMaybe the caller just always uses the bitsRequired method to get the\u003cbr\\/\u003e\\nrequired bit width per value?\u003c\\/p\u003e\\n\\n\u003cp\u003eThough, when we enable specializing storing of negative values as\u003cbr\\/\u003e\\nwell, that\'ll be a hassle...\u003c\\/p\u003e\\n\\n\u003cp\u003eOK let\'s leave it as you must pass the maxValue for now.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eSpeaking of API additions, I find that\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e\u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e getBitsPerValue();\\n\u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e size();\\n\u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e void set(\u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e value);\\n\u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e void clear();\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eare trivial to implement for the known implementations. They open up for things like auto-growing to fit higher values by using a delegating wrapper, re-using the structure for counting purposes and sorting in-place.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI think the first 2 make sense, but I\'d rather not pursue the 2nd two\u003cbr\\/\u003e\\nat this time.  Ie, I think this API only needs write-once, and then\u003cbr\\/\u003e\\nread-only.\u003c\\/p\u003e\\n\\n\u003cp\u003eIf we open up random writing (set\\/clear), with auto-growing, etc.,\u003cbr\\/\u003e\\nthat does add complexities to the impl.  EG the backing store can no\u003cbr\\/\u003e\\nlonger be final, we\'d have to do some locking (or mark the array\u003cbr\\/\u003e\\nvolatile) for thread safety, etc.\u003c\\/p\u003e\\n\\n\u003cp\u003eAs far as I can tell... Lucene today doesn\'t yet need random write to\u003cbr\\/\u003e\\nthe packed ints.  The terms dict index and CSF are the two needs I\u003cbr\\/\u003e\\nthink we have now.  Someday (when CSF supports writing) we will... but\u003cbr\\/\u003e\\nnot yet today?\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cblockquote\u003e\u003cp\u003eI don\'t think we need separate PRIORITY and BLOCK_PREFERENCE?  Can\'t we have a single enum (STORAGE?) with: packed, aligned32, aligned64? \\\"Direct\\\" is really just packed with nbits rounded up to 8,16,32,64.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI agree that it does complicate matters somewhat to have them separated. When calling getReader the BLOCK_PREFERENCE should also be removed, as the block preference will always be the same as that architecture. Removing the \\\"direct\\\" option would require the caller to do some of the logic in some cases: If low processing requirements is a priority, direct is preferably and when the bitsPerValue is calculated, the caller would have to do the if (bitsPerValue &gt; 32) bitsPerValue = 64 and so on.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003e(There\'s a bug in the patch in PackedInts.getReader, where it switches\u003cbr\\/\u003e\\nthe block size based on whether JRE is 64 bit: it\'s always choosing 64\u003cbr\\/\u003e\\nbit now).\u003c\\/p\u003e\\n\\n\u003cp\u003eThe \\\"direct\\\" option only applies during writing (ie, you round up to\u003cbr\\/\u003e\\nthe nearest native type bit width).  At read time it\'s just a packed\u003cbr\\/\u003e\\n8\\/16\\/32\\/64.\u003c\\/p\u003e\\n\\n\u003cp\u003eHmm... maybe we could just add an optional 2nd arg to bitsRequired, a\u003cbr\\/\u003e\\nboolean eg \\\"roundUpToNative\\\" or something, which if true does that\u003cbr\\/\u003e\\nrounding for you?  (And then go back to caller computes bit width and\u003cbr\\/\u003e\\npasses it in?).\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12829715_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12829715_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'04\\/Feb\\/10 19:24\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-04T19:24:50+0000\'\u003e04\\/Feb\\/10 19:24\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    \\n  Also, the maxValue at write time should not have to be known - eg the factory API should let me ask for a direct short writer without declaring the maxValue I will store.  \\n\\n Since Packed and Aligned needs maxValue (or bitsPerValue), this would require two distinct methods in the factory, each returning a subset of the possible implementations. I find that rather confusing.  \\n\\n Maybe the caller just always uses the bitsRequired method to get the \\nrequired bit width per value? \\n\\n Though, when we enable specializing storing of negative values as \\nwell, that\'ll be a hassle... \\n\\n OK let\'s leave it as you must pass the maxValue for now. \\n\\n \\n Speaking of API additions, I find that \\n\\n  \\n  public   int  getBitsPerValue();\\n public   int  size();\\n public  void set( long  value);\\n public  void clear();\\n \\n  \\n\\n are trivial to implement for the known implementations. They open up for things like auto-growing to fit higher values by using a delegating wrapper, re-using the structure for counting purposes and sorting in-place.  \\n\\n I think the first 2 make sense, but I\'d rather not pursue the 2nd two \\nat this time.  Ie, I think this API only needs write-once, and then \\nread-only. \\n\\n If we open up random writing (set\\/clear), with auto-growing, etc., \\nthat does add complexities to the impl.  EG the backing store can no \\nlonger be final, we\'d have to do some locking (or mark the array \\nvolatile) for thread safety, etc. \\n\\n As far as I can tell... Lucene today doesn\'t yet need random write to \\nthe packed ints.  The terms dict index and CSF are the two needs I \\nthink we have now.  Someday (when CSF supports writing) we will... but \\nnot yet today? \\n\\n \\n  I don\'t think we need separate PRIORITY and BLOCK_PREFERENCE?  Can\'t we have a single enum (STORAGE?) with: packed, aligned32, aligned64? \\\"Direct\\\" is really just packed with nbits rounded up to 8,16,32,64.  \\n\\n I agree that it does complicate matters somewhat to have them separated. When calling getReader the BLOCK_PREFERENCE should also be removed, as the block preference will always be the same as that architecture. Removing the \\\"direct\\\" option would require the caller to do some of the logic in some cases: If low processing requirements is a priority, direct is preferably and when the bitsPerValue is calculated, the caller would have to do the if (bitsPerValue &gt; 32) bitsPerValue = 64 and so on.  \\n\\n (There\'s a bug in the patch in PackedInts.getReader, where it switches \\nthe block size based on whether JRE is 64 bit: it\'s always choosing 64 \\nbit now). \\n\\n The \\\"direct\\\" option only applies during writing (ie, you round up to \\nthe nearest native type bit width).  At read time it\'s just a packed \\n8\\/16\\/32\\/64. \\n\\n Hmm... maybe we could just add an optional 2nd arg to bitsRequired, a \\nboolean eg \\\"roundUpToNative\\\" or something, which if true does that \\nrounding for you?  (And then go back to caller computes bit width and \\npasses it in?).              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12831950\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12831950&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12831950\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12831950_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12831950_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'10\\/Feb\\/10 11:23\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-10T11:23:05+0000\'\u003e10\\/Feb\\/10 11:23\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eToke, are you still working on this...?  If not, I can take a crack?  I\'d really like to get something online here before we land flex, so the terms dict index isn\'t so wasteful of RAM.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12831950_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12831950_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'10\\/Feb\\/10 11:23\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-10T11:23:05+0000\'\u003e10\\/Feb\\/10 11:23\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Toke, are you still working on this...?  If not, I can take a crack?  I\'d really like to get something online here before we land flex, so the terms dict index isn\'t so wasteful of RAM.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12832012\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12832012&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12832012\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12832012_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12832012_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'10\\/Feb\\/10 14:49\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-10T14:49:44+0000\'\u003e10\\/Feb\\/10 14:49\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eChanging the code to use bitsPerValue instead of maxValue for constructors and persistent format took a bit longer than anticipated. To get things flowing, I\'ve attached the code as it is now. I\'ve moved the classes to o.a.l.util.packed and performed some clenup too. It still needs aligned32 and aligned64 implementations and more cleanup, which I\'ll work on for the next hour today and hopefully some hours tomorrow.\u003c\\/p\u003e\\n\\n\u003cp\u003eOne current use-case for mutable packed ints would be for StringOrdValComparator (using an auto-grow wrapper), although the gain might be small as the overhead of the Strings is so large. I understand the problem of making all packed ints mutable, but a compromise might be to have a Mutable interface and a new factory-method that returns the same implementations as Mutable instead of Reader? That way it is possible to use the implementations for things such as sorting instead of having to re-implement them. I\'ve left the interface for Reader clean as you suggested, but kept the implementations of set in the classes for now, as the code has already been made.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12832012_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12832012_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'10\\/Feb\\/10 14:49\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-10T14:49:44+0000\'\u003e10\\/Feb\\/10 14:49\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Changing the code to use bitsPerValue instead of maxValue for constructors and persistent format took a bit longer than anticipated. To get things flowing, I\'ve attached the code as it is now. I\'ve moved the classes to o.a.l.util.packed and performed some clenup too. It still needs aligned32 and aligned64 implementations and more cleanup, which I\'ll work on for the next hour today and hopefully some hours tomorrow. \\n\\n One current use-case for mutable packed ints would be for StringOrdValComparator (using an auto-grow wrapper), although the gain might be small as the overhead of the Strings is so large. I understand the problem of making all packed ints mutable, but a compromise might be to have a Mutable interface and a new factory-method that returns the same implementations as Mutable instead of Reader? That way it is possible to use the implementations for things such as sorting instead of having to re-implement them. I\'ve left the interface for Reader clean as you suggested, but kept the implementations of set in the classes for now, as the code has already been made.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12832820\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12832820&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12832820\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12832820_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12832820_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'12\\/Feb\\/10 02:57\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-12T02:57:21+0000\'\u003e12\\/Feb\\/10 02:57\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI\'ve read through the comments on \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-1990\\\" title=\\\"Add unsigned packed int impls in oal.util\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-1990\\\"\u003e\u003cdel\u003eLUCENE-1990\u003c\\/del\u003e\u003c\\/a\u003e and implemented most of what has been suggested. The attached patch contains implementations for all the variants we\'ve talked about, including aligned. There\'s a known bug in persistence for aligned64 (and probably also for aligned32) that I haven\'t stomped yet. There\'s also a clear need for a more elaborate unit-test with regard to persistence.\u003c\\/p\u003e\\n\\n\u003cp\u003eOther outstanding issues, as I see them, are whether or not mutable packed arrays should be requestable (as general purpose data structures) and how the factory for creating a writer should work. I have added a getMutable-method to the factory and not touched the return type Reader for the getReader-method. That way read-only users will not be tempted to try and update the received structure. As for the arguments to the factory, Michael McCandless suggested that the preferences should be expressed with (packed | aligned32 | aligned64 | auto). As fas as I can see, this should work. However, I\'ve only just reached this conclusion and haven\'t had the time to implement it.\u003c\\/p\u003e\\n\\n\u003cp\u003eA speed-test has been added and the results from my machine can be seen below. In order for it to be really usable, it should be tried on other machines too.\u003c\\/p\u003e\\n\\n\u003cp\u003eI won\'t touch the code before sometime next week, but I\'ll keep an eye on \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-1990\\\" title=\\\"Add unsigned packed int impls in oal.util\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-1990\\\"\u003e\u003cdel\u003eLUCENE-1990\u003c\\/del\u003e\u003c\\/a\u003e comments until then.\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e        bitsPerValue          valueCount            getCount    PackedDirectByte   PackedDirectShort            Packed32     PackedAligned32     PackedDirectInt            Packed64     PackedAligned64    PackedDirectLong\\n                   1                1000            10000000                 167                 141                 258                 242                 172                 264                 242                 183\\n                   1             1000000            10000000                 224                 232                 266                 233                 246                 262                 238                 338\\n                   1            10000000            10000000                 359                 469                 280                 278                 508                 278                 272                 551\\n                   3                1000            10000000                 168                 166                 265                 241                 163                 262                 243                 166\\n                   3             1000000            10000000                 227                 226                 261                 251                 239                 274                 249                 330\\n                   3            10000000            10000000                 406                 476                 301                 304                 522                 300                 308                 547\\n                   4                1000            10000000                 167                 168                 266                 239                 164                 285                 239                 169\\n                   4             1000000            10000000                 228                 231                 294                 274                 262                 291                 269                 314\\n                   4            10000000            10000000                 385                 480                 308                 333                 514                 331                 315                 557\\n                   7                1000            10000000                 172                 174                 278                 248                 162                 271                 238                 177\\n                   7             1000000            10000000                 224                 236                 289                 281                 272                 278                 277                 345\\n                   7            10000000            10000000                 405                 473                 389                 447                 516                 399                 402                 553\\n                   8                1000            10000000                 192                 171                 268                 242                 174                 291                 240                 163\\n                   8             1000000            10000000                 226                 232                 291                 284                 286                 274                 265                 314\\n                   8            10000000            10000000                 381                 467                 406                 428                 512                 422                 419                 580\\n\\n        bitsPerValue          valueCount            getCount   PackedDirectShort            Packed32     PackedAligned32     PackedDirectInt            Packed64     PackedAligned64    PackedDirectLong\\n                   9                1000            10000000                 166                 274                 241                 170                 261                 237                 163\\n                   9             1000000            10000000                 229                 299                 273                 250                 284                 275                 327\\n                   9            10000000            10000000                 483                 443                 477                 519                 438                 455                 568\\n                  15                1000            10000000                 170                 265                 239                 174                 264                 235                 162\\n                  15             1000000            10000000                 232                 285                 274                 240                 278                 269                 339\\n                  15            10000000            10000000                 473                 518                 524                 523                 519                 521                 550\\n                  16                1000            10000000                 166                 263                 236                 172                 264                 235                 160\\n                  16             1000000            10000000                 229                 285                 278                 244                 293                 272                 332\\n                  16            10000000            10000000                 470                 513                 517                 509                 534                 529                 548\\n\\n        bitsPerValue          valueCount            getCount            Packed32     PackedAligned32     PackedDirectInt            Packed64     PackedAligned64    PackedDirectLong\\n                  17                1000            10000000                 262                 255                 177                 260                 234                 160\\n                  17             1000000            10000000                 290                 306                 273                 304                 290                 320\\n                  17            10000000            10000000                 532                 572                 533                 529                 556                 551\\n                  28                1000            10000000                 269                 256                 187                 267                 238                 163\\n                  28             1000000            10000000                 293                 295                 253                 293                 296                 312\\n                  28            10000000            10000000                 542                 567                 501                 548                 567                 542\\n                  31                1000            10000000                 260                 235                 177                 266                 232                 158\\n                  31             1000000            10000000                 292                 294                 244                 296                 297                 328\\n                  31            10000000            10000000                 552                 563                 516                 562                 568                 548\\n\\n        bitsPerValue          valueCount            getCount     PackedDirectInt            Packed64     PackedAligned64    PackedDirectLong\\n                  32                1000            10000000                 172                 263                 241                 166\\n                  32             1000000            10000000                 241                 291                 297                 320\\n                  32            10000000            10000000                 519                 556                 573                 546\\n\\n        bitsPerValue          valueCount            getCount            Packed64     PackedAligned64    PackedDirectLong\\n                  33                1000            10000000                 264                 239                 159\\n                  33             1000000            10000000                 293                 374                 319\\n                  33            10000000            10000000                 559                 595                 552\\n                  47                1000            10000000                 264                 242                 164\\n                  47             1000000            10000000                 319                 369                 322\\n                  47            10000000            10000000                 577                 601                 548\\n                  49                1000            10000000                 261                 243                 162\\n                  49             1000000            10000000                 323                 413                 319\\n                  49            10000000            10000000                 584                 610                 551\\n                  63                1000            10000000                 269                 235                 161\\n                  63             1000000            10000000                 396                 369                 313\\n                  63            10000000            10000000                 592                 596                 559\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003e(Java 1.6.0_15-b03, default settings on a Dell Precision M6500: Intel i7 Q 820 @ 1.73GHz, 8 MB level 2 cache,  dual-channel PC 1333 RAM, running Ubuntu Karmic)\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12832820_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12832820_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'12\\/Feb\\/10 02:57\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-12T02:57:21+0000\'\u003e12\\/Feb\\/10 02:57\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I\'ve read through the comments on   LUCENE-1990   and implemented most of what has been suggested. The attached patch contains implementations for all the variants we\'ve talked about, including aligned. There\'s a known bug in persistence for aligned64 (and probably also for aligned32) that I haven\'t stomped yet. There\'s also a clear need for a more elaborate unit-test with regard to persistence. \\n\\n Other outstanding issues, as I see them, are whether or not mutable packed arrays should be requestable (as general purpose data structures) and how the factory for creating a writer should work. I have added a getMutable-method to the factory and not touched the return type Reader for the getReader-method. That way read-only users will not be tempted to try and update the received structure. As for the arguments to the factory, Michael McCandless suggested that the preferences should be expressed with (packed | aligned32 | aligned64 | auto). As fas as I can see, this should work. However, I\'ve only just reached this conclusion and haven\'t had the time to implement it. \\n\\n A speed-test has been added and the results from my machine can be seen below. In order for it to be really usable, it should be tried on other machines too. \\n\\n I won\'t touch the code before sometime next week, but I\'ll keep an eye on   LUCENE-1990   comments until then. \\n\\n  \\n         bitsPerValue          valueCount            getCount    PackedDirectByte   PackedDirectShort            Packed32     PackedAligned32     PackedDirectInt            Packed64     PackedAligned64    PackedDirectLong\\n                   1                1000            10000000                 167                 141                 258                 242                 172                 264                 242                 183\\n                   1             1000000            10000000                 224                 232                 266                 233                 246                 262                 238                 338\\n                   1            10000000            10000000                 359                 469                 280                 278                 508                 278                 272                 551\\n                   3                1000            10000000                 168                 166                 265                 241                 163                 262                 243                 166\\n                   3             1000000            10000000                 227                 226                 261                 251                 239                 274                 249                 330\\n                   3            10000000            10000000                 406                 476                 301                 304                 522                 300                 308                 547\\n                   4                1000            10000000                 167                 168                 266                 239                 164                 285                 239                 169\\n                   4             1000000            10000000                 228                 231                 294                 274                 262                 291                 269                 314\\n                   4            10000000            10000000                 385                 480                 308                 333                 514                 331                 315                 557\\n                   7                1000            10000000                 172                 174                 278                 248                 162                 271                 238                 177\\n                   7             1000000            10000000                 224                 236                 289                 281                 272                 278                 277                 345\\n                   7            10000000            10000000                 405                 473                 389                 447                 516                 399                 402                 553\\n                   8                1000            10000000                 192                 171                 268                 242                 174                 291                 240                 163\\n                   8             1000000            10000000                 226                 232                 291                 284                 286                 274                 265                 314\\n                   8            10000000            10000000                 381                 467                 406                 428                 512                 422                 419                 580\\n\\n        bitsPerValue          valueCount            getCount   PackedDirectShort            Packed32     PackedAligned32     PackedDirectInt            Packed64     PackedAligned64    PackedDirectLong\\n                   9                1000            10000000                 166                 274                 241                 170                 261                 237                 163\\n                   9             1000000            10000000                 229                 299                 273                 250                 284                 275                 327\\n                   9            10000000            10000000                 483                 443                 477                 519                 438                 455                 568\\n                  15                1000            10000000                 170                 265                 239                 174                 264                 235                 162\\n                  15             1000000            10000000                 232                 285                 274                 240                 278                 269                 339\\n                  15            10000000            10000000                 473                 518                 524                 523                 519                 521                 550\\n                  16                1000            10000000                 166                 263                 236                 172                 264                 235                 160\\n                  16             1000000            10000000                 229                 285                 278                 244                 293                 272                 332\\n                  16            10000000            10000000                 470                 513                 517                 509                 534                 529                 548\\n\\n        bitsPerValue          valueCount            getCount            Packed32     PackedAligned32     PackedDirectInt            Packed64     PackedAligned64    PackedDirectLong\\n                  17                1000            10000000                 262                 255                 177                 260                 234                 160\\n                  17             1000000            10000000                 290                 306                 273                 304                 290                 320\\n                  17            10000000            10000000                 532                 572                 533                 529                 556                 551\\n                  28                1000            10000000                 269                 256                 187                 267                 238                 163\\n                  28             1000000            10000000                 293                 295                 253                 293                 296                 312\\n                  28            10000000            10000000                 542                 567                 501                 548                 567                 542\\n                  31                1000            10000000                 260                 235                 177                 266                 232                 158\\n                  31             1000000            10000000                 292                 294                 244                 296                 297                 328\\n                  31            10000000            10000000                 552                 563                 516                 562                 568                 548\\n\\n        bitsPerValue          valueCount            getCount     PackedDirectInt            Packed64     PackedAligned64    PackedDirectLong\\n                  32                1000            10000000                 172                 263                 241                 166\\n                  32             1000000            10000000                 241                 291                 297                 320\\n                  32            10000000            10000000                 519                 556                 573                 546\\n\\n        bitsPerValue          valueCount            getCount            Packed64     PackedAligned64    PackedDirectLong\\n                  33                1000            10000000                 264                 239                 159\\n                  33             1000000            10000000                 293                 374                 319\\n                  33            10000000            10000000                 559                 595                 552\\n                  47                1000            10000000                 264                 242                 164\\n                  47             1000000            10000000                 319                 369                 322\\n                  47            10000000            10000000                 577                 601                 548\\n                  49                1000            10000000                 261                 243                 162\\n                  49             1000000            10000000                 323                 413                 319\\n                  49            10000000            10000000                 584                 610                 551\\n                  63                1000            10000000                 269                 235                 161\\n                  63             1000000            10000000                 396                 369                 313\\n                  63            10000000            10000000                 592                 596                 559\\n \\n  \\n\\n (Java 1.6.0_15-b03, default settings on a Dell Precision M6500: Intel i7 Q 820 @ 1.73GHz, 8 MB level 2 cache,  dual-channel PC 1333 RAM, running Ubuntu Karmic)              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12832971\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12832971&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12832971\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12832971_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12832971_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'12\\/Feb\\/10 12:10\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-12T12:10:44+0000\'\u003e12\\/Feb\\/10 12:10\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eGreat progress Toke!\u003c\\/p\u003e\\n\\n\u003cp\u003eI guess we should do Mutable since you\'re so far along already \u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/smile.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e\u003c\\/p\u003e\\n\\n\u003cp\u003eBut, now that we have getMutable, can we make the concrete impls\u003cbr\\/\u003e\\npackage private?  Javadocs for Mutable.set should note that the size\u003cbr\\/\u003e\\nis fixed once you allocate it.  We have no way to save a\u003cbr\\/\u003e\\nMutable... should we add that?  If so, we may want to rename Writer -&gt;\u003cbr\\/\u003e\\nWriteOnceWriter.  This way consumers can also get a Mutable, do random\u003cbr\\/\u003e\\nwrites, then save, if the \\\"write once\\\" model isn\'t a good fit.\u003c\\/p\u003e\\n\\n\u003cp\u003eMaybe we should just merge Mutable &amp; Reader, then?  (LongStore?\u003cbr\\/\u003e\\nLongArray?  PackedLongs?)\u003c\\/p\u003e\\n\\n\u003cp\u003eWe should state clearly that these are all unsigned ints storage.\u003c\\/p\u003e\\n\\n\u003cp\u003eMaybe rename PackedDirectInt to PackedDirect32 (and Short to 16,\u003cbr\\/\u003e\\nByte to 8).  Because... while it is using a direct int[] under the hood,\u003cbr\\/\u003e\\nit\'s really using all 32 bits for the full positive int range.  So\u003cbr\\/\u003e\\nPackedDirect32 can be used even for pos ints that would overflow a\u003cbr\\/\u003e\\nnormal java \\\"int\\\".  (Though, for long we obviously can\'t use that 64th\u003cbr\\/\u003e\\nbit for positive ints...).\u003c\\/p\u003e\\n\\n\u003cp\u003eThe @see in the new IndexInput.readShort is wrong (referencing\u003cbr\\/\u003e\\nwriteInt).\u003c\\/p\u003e\\n\\n\u003cp\u003eCan you add @lucene.internal to the javadocs?\u003c\\/p\u003e\\n\\n\u003cp\u003eSeems like once we stomp the bugs, beef up the tests, and merge\u003cbr\\/\u003e\\nPRIORITY and BLOCK_PREFERENCE (into maybe STORAGE?) for\u003cbr\\/\u003e\\nthe public API, we are nearly done?  Thanks Toke!\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12832971_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12832971_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'12\\/Feb\\/10 12:10\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-12T12:10:44+0000\'\u003e12\\/Feb\\/10 12:10\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Great progress Toke! \\n\\n I guess we should do Mutable since you\'re so far along already   \\n\\n But, now that we have getMutable, can we make the concrete impls \\npackage private?  Javadocs for Mutable.set should note that the size \\nis fixed once you allocate it.  We have no way to save a \\nMutable... should we add that?  If so, we may want to rename Writer -&gt; \\nWriteOnceWriter.  This way consumers can also get a Mutable, do random \\nwrites, then save, if the \\\"write once\\\" model isn\'t a good fit. \\n\\n Maybe we should just merge Mutable &amp; Reader, then?  (LongStore? \\nLongArray?  PackedLongs?) \\n\\n We should state clearly that these are all unsigned ints storage. \\n\\n Maybe rename PackedDirectInt to PackedDirect32 (and Short to 16, \\nByte to 8).  Because... while it is using a direct int[] under the hood, \\nit\'s really using all 32 bits for the full positive int range.  So \\nPackedDirect32 can be used even for pos ints that would overflow a \\nnormal java \\\"int\\\".  (Though, for long we obviously can\'t use that 64th \\nbit for positive ints...). \\n\\n The @see in the new IndexInput.readShort is wrong (referencing \\nwriteInt). \\n\\n Can you add @lucene.internal to the javadocs? \\n\\n Seems like once we stomp the bugs, beef up the tests, and merge \\nPRIORITY and BLOCK_PREFERENCE (into maybe STORAGE?) for \\nthe public API, we are nearly done?  Thanks Toke!              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12836267\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12836267&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12836267\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12836267_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12836267_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Feb\\/10 21:52\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-20T21:52:20+0000\'\u003e20\\/Feb\\/10 21:52\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI am sorry, but personal issues sapped my time and energy this week, so Lucene got bumped down my priority-list. I am going to code4lib next week and I\'ll try and get some hacking done in the plane from Denmark to USA, but that depends on whether or not there is a power socket near my seat. If I don\'t upload a patch late monday, it will be early march before I\'ll get it done\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eBut, now that we have getMutable, can we make the concrete impls\u003cbr\\/\u003e\\npackage private? Javadocs for Mutable.set should note that the size\u003cbr\\/\u003e\\nis fixed once you allocate it.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eAgreed on both.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eWe have no way to save a Mutable... should we add that?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI dont know enough about persistence in Lucene to make that call. Since the writer is tied to Lucene, it would not work for general purposes, so making a writer for Mutables only seems to make sense if the user uses it to build index-structures?\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eMaybe we should just merge Mutable &amp; Reader, then? (LongStore?\u003cbr\\/\u003e\\nLongArray? PackedLongs?)\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI don\'t understand that one? You made a compelling argument for returning immutables to readers earlier (problems with concurrency and having all back ends support writes).\u003c\\/p\u003e\\n\\n\u003cp\u003eAs for the name... I don\'t know. None of the sound right, but I have no other suggestion.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eWe should state clearly that these are all unsigned ints storage.\u003c\\/p\u003e\\n\\n\u003cp\u003eMaybe rename PackedDirectInt to PackedDirect32 (and Short to 16,\u003cbr\\/\u003e\\nByte to 8). Because... while it is using a direct int[] under the hood,\u003cbr\\/\u003e\\nit\'s really using all 32 bits for the full positive int range.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eGood point. The rest of your suggestions are also very valid.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12836267_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12836267_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Feb\\/10 21:52\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-20T21:52:20+0000\'\u003e20\\/Feb\\/10 21:52\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I am sorry, but personal issues sapped my time and energy this week, so Lucene got bumped down my priority-list. I am going to code4lib next week and I\'ll try and get some hacking done in the plane from Denmark to USA, but that depends on whether or not there is a power socket near my seat. If I don\'t upload a patch late monday, it will be early march before I\'ll get it done \\n\\n \\n But, now that we have getMutable, can we make the concrete impls \\npackage private? Javadocs for Mutable.set should note that the size \\nis fixed once you allocate it.  \\n\\n Agreed on both. \\n\\n \\n We have no way to save a Mutable... should we add that?  \\n\\n I dont know enough about persistence in Lucene to make that call. Since the writer is tied to Lucene, it would not work for general purposes, so making a writer for Mutables only seems to make sense if the user uses it to build index-structures? \\n\\n \\n Maybe we should just merge Mutable &amp; Reader, then? (LongStore? \\nLongArray? PackedLongs?)  \\n\\n I don\'t understand that one? You made a compelling argument for returning immutables to readers earlier (problems with concurrency and having all back ends support writes). \\n\\n As for the name... I don\'t know. None of the sound right, but I have no other suggestion. \\n\\n \\n We should state clearly that these are all unsigned ints storage. \\n\\n Maybe rename PackedDirectInt to PackedDirect32 (and Short to 16, \\nByte to 8). Because... while it is using a direct int[] under the hood, \\nit\'s really using all 32 bits for the full positive int range.  \\n\\n Good point. The rest of your suggestions are also very valid.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12837280\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12837280&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12837280\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12837280_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12837280_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Feb\\/10 15:33\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-23T15:33:30+0000\'\u003e23\\/Feb\\/10 15:33\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI\'ve renamed most of the classes to short form, as the \\\"Packed\\\"-prefix did was not that descriptive and fixed some bugs. Still pending is the mutable writer and a bug in persistence for aligned64. Good news (for Lucene at least) is that an airplane blocking snowdrift means that I have time this week for continued hacking.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eBut, now that we have getMutable, can we make the concrete impls\u003cbr\\/\u003e\\npackage private? Javadocs for Mutable.set should note that the size\u003cbr\\/\u003e\\nis fixed once you allocate it.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eThe implementations are now package private, but I only put the note about fixed size on the getMutable-method. There\'s nothing wrong with creating a custom auto growing Mutable.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eWe should state clearly that these are all unsigned ints storage.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eDone.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eMaybe rename PackedDirectInt to PackedDirect32 (and Short to 16,\u003cbr\\/\u003e\\nByte to 8).\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eDone (Direct8, Direct16, Direct32 and Direct64).\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eThe @see in the new IndexInput.readShort is wrong (referencing\u003cbr\\/\u003e\\nwriteInt).\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eFixed.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eCan you add @lucene.internal to the javadocs?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eShould this also be applied to package private classes? Marking those as internal seems redundant.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eSeems like once we stomp the bugs, beef up the tests, and merge\u003cbr\\/\u003e\\nPRIORITY and BLOCK_PREFERENCE (into maybe STORAGE?) for\u003cbr\\/\u003e\\nthe public API, we are nearly done?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI\'ve removed BLOCK_PREFERENCE from the API. It\'s still used internally, mainly to do controlled testing. Tests are beefed up (and currently fails for aligned, so clearly beefing worked).\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12837280_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12837280_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Feb\\/10 15:33\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-23T15:33:30+0000\'\u003e23\\/Feb\\/10 15:33\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I\'ve renamed most of the classes to short form, as the \\\"Packed\\\"-prefix did was not that descriptive and fixed some bugs. Still pending is the mutable writer and a bug in persistence for aligned64. Good news (for Lucene at least) is that an airplane blocking snowdrift means that I have time this week for continued hacking. \\n\\n \\n But, now that we have getMutable, can we make the concrete impls \\npackage private? Javadocs for Mutable.set should note that the size \\nis fixed once you allocate it.  \\n\\n The implementations are now package private, but I only put the note about fixed size on the getMutable-method. There\'s nothing wrong with creating a custom auto growing Mutable. \\n\\n \\n We should state clearly that these are all unsigned ints storage.  \\n\\n Done. \\n\\n \\n Maybe rename PackedDirectInt to PackedDirect32 (and Short to 16, \\nByte to 8).  \\n\\n Done (Direct8, Direct16, Direct32 and Direct64). \\n\\n \\n The @see in the new IndexInput.readShort is wrong (referencing \\nwriteInt).  \\n\\n Fixed. \\n\\n \\n Can you add @lucene.internal to the javadocs?  \\n\\n Should this also be applied to package private classes? Marking those as internal seems redundant. \\n\\n \\n Seems like once we stomp the bugs, beef up the tests, and merge \\nPRIORITY and BLOCK_PREFERENCE (into maybe STORAGE?) for \\nthe public API, we are nearly done?  \\n\\n I\'ve removed BLOCK_PREFERENCE from the API. It\'s still used internally, mainly to do controlled testing. Tests are beefed up (and currently fails for aligned, so clearly beefing worked).              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12838873\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12838873&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12838873\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12838873_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12838873_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'26\\/Feb\\/10 14:03\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-26T14:03:54+0000\'\u003e26\\/Feb\\/10 14:03\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eNow we\'re getting somewhere. I finally squashed the persistence bug and the tests has been turned up another notch. Everything seems to run as it should. Pending issues, as I see them:\u003c\\/p\u003e\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eReview of the code\u003c\\/li\u003e\\n\\t\u003cli\u003eShould we make a MutableWriter?\u003c\\/li\u003e\\n\\t\u003cli\u003eShould we drop support for aligned?\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eThe last one is interesting. The code for getting a value from aligned uses devision and a single RAM-request:\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e  \u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e get(\u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e index) {\\n    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e blockPos = index \\/ valuesPerBlock;\\n    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e bitPos = (index - (blockPos * valuesPerBlock)) * bitsPerValue;\\n    \u003cspan class=\\\"code-keyword\\\"\u003ereturn\u003c\\/span\u003e (blocks[blockPos] &gt;&gt;&gt; shifts[bitPos]) &amp; readMask;\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003ewhere the code for packed uses shift and two RAM-requests:\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e majorBitPos = index * bitsPerValue;\\n    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e elementPos = (\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e)(majorBitPos &gt;&gt;&gt; BLOCK_BITS); \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ \\/ BLOCK_SIZE\\n\u003c\\/span\u003e    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e bitPos =     (\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e)(majorBitPos &amp; MOD_MASK); \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ % BLOCK_SIZE);\\n\u003c\\/span\u003e\\n    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e base = bitPos * FAC_BITPOS;\\n\\n    \u003cspan class=\\\"code-keyword\\\"\u003ereturn\u003c\\/span\u003e ((blocks[elementPos] &lt;&lt; shifts[base]) &gt;&gt;&gt; shifts[base+1]) |\\n            ((blocks[elementPos+1] &gt;&gt;&gt; shifts[base+2]) &amp; readMasks[bitPos]);\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eI have done some tests (see the TODO-file in the attached patch) and on 64 bit machines, the difference in access-speed for aligned vs. packed is not that great and not always in favor of aligned. Probably because some space is wasted and the RAM-cache is not so well utilized. If this is also the case for 32 bit machines, I vote for removing aligned and only used packed with the special-case optimizations direct8, direct16, direct32 and direct64. This would also mean that there is only one persistent format.\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003ejava -cp lucene-core-3.1-dev.jar org.apache.lucene.util.packed.PackedIntsPerformance\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\u003cp\u003eRuns throught the performance tests and delivers a simple report, so it should be very easy to test on different platforms. It only measures access speed.\u003c\\/p\u003e\\n\\n\u003cp\u003eI consider this patch ready for review and concentrate on other matters until I hear more.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12838873_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12838873_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'26\\/Feb\\/10 14:03\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-26T14:03:54+0000\'\u003e26\\/Feb\\/10 14:03\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Now we\'re getting somewhere. I finally squashed the persistence bug and the tests has been turned up another notch. Everything seems to run as it should. Pending issues, as I see them: \\n\\n \\n\\t Review of the code \\n\\t Should we make a MutableWriter? \\n\\t Should we drop support for aligned? \\n \\n\\n\\n The last one is interesting. The code for getting a value from aligned uses devision and a single RAM-request: \\n  \\n    public   long  get( final   int  index) {\\n     final   int  blockPos = index \\/ valuesPerBlock;\\n     final   int  bitPos = (index - (blockPos * valuesPerBlock)) * bitsPerValue;\\n     return  (blocks[blockPos] &gt;&gt;&gt; shifts[bitPos]) &amp; readMask;\\n \\n  \\n\\n where the code for packed uses shift and two RAM-requests: \\n  \\n      final   long  majorBitPos = index * bitsPerValue;\\n     final   int  elementPos = ( int )(majorBitPos &gt;&gt;&gt; BLOCK_BITS);  \\/\\/ \\/ BLOCK_SIZE\\n      final   int  bitPos =     ( int )(majorBitPos &amp; MOD_MASK);  \\/\\/ % BLOCK_SIZE);\\n \\n     final   int  base = bitPos * FAC_BITPOS;\\n\\n     return  ((blocks[elementPos] &lt;&lt; shifts[base]) &gt;&gt;&gt; shifts[base+1]) |\\n            ((blocks[elementPos+1] &gt;&gt;&gt; shifts[base+2]) &amp; readMasks[bitPos]);\\n \\n  \\n\\n I have done some tests (see the TODO-file in the attached patch) and on 64 bit machines, the difference in access-speed for aligned vs. packed is not that great and not always in favor of aligned. Probably because some space is wasted and the RAM-cache is not so well utilized. If this is also the case for 32 bit machines, I vote for removing aligned and only used packed with the special-case optimizations direct8, direct16, direct32 and direct64. This would also mean that there is only one persistent format. \\n\\n  \\n java -cp lucene-core-3.1-dev.jar org.apache.lucene.util.packed.PackedIntsPerformance\\n \\n  \\n Runs throught the performance tests and delivers a simple report, so it should be very easy to test on different platforms. It only measures access speed. \\n\\n I consider this patch ready for review and concentrate on other matters until I hear more.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12838908\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12838908&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12838908\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12838908_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12838908_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'26\\/Feb\\/10 15:49\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-26T15:49:46+0000\'\u003e26\\/Feb\\/10 15:49\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI couldn\'t help making a tiny tweak to the performance test so that it outputs execution time means for the different implementations. I have attached measurements from 5 different 64 bit machines. Looking at the means, I observe the following:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003ei7 Q820 and Xeon L5420: Practically no difference between aligned and packed with a small edge to aligned\u003c\\/li\u003e\\n\\t\u003cli\u003eCore 2 and Xeon 5148: Aligned is consistently about 10% slower than packed\u003c\\/li\u003e\\n\\t\u003cli\u003eXeon MP (old with just 1 MB CPU cache): Aligned ranges from 0-10% slower than packed, depending on bits\\/value\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eThe direct implementations outperforms packed and aligned for all sane cases (using direct8 to hold only 1 bit\\/value is clearly a bad idea). No surprise there.\u003c\\/p\u003e\\n\\n\u003cp\u003eCaveat: The tests were run without any other significantly resource heavy processes disturbing it. This means that there were no fighting for the CPU cache.\u003c\\/p\u003e\\n\\n\u003cp\u003eMajor caveat: Tests are needed on other processors than 64 bit Intel.\u003c\\/p\u003e\\n\\n\u003cp\u003eI would be great if someone could figure out how to make an aligned getter without using division as that is surely the thing that hampers aligned performance.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12838908_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12838908_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'26\\/Feb\\/10 15:49\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-26T15:49:46+0000\'\u003e26\\/Feb\\/10 15:49\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I couldn\'t help making a tiny tweak to the performance test so that it outputs execution time means for the different implementations. I have attached measurements from 5 different 64 bit machines. Looking at the means, I observe the following: \\n\\n \\n\\t i7 Q820 and Xeon L5420: Practically no difference between aligned and packed with a small edge to aligned \\n\\t Core 2 and Xeon 5148: Aligned is consistently about 10% slower than packed \\n\\t Xeon MP (old with just 1 MB CPU cache): Aligned ranges from 0-10% slower than packed, depending on bits\\/value \\n \\n\\n\\n The direct implementations outperforms packed and aligned for all sane cases (using direct8 to hold only 1 bit\\/value is clearly a bad idea). No surprise there. \\n\\n Caveat: The tests were run without any other significantly resource heavy processes disturbing it. This means that there were no fighting for the CPU cache. \\n\\n Major caveat: Tests are needed on other processors than 64 bit Intel. \\n\\n I would be great if someone could figure out how to make an aligned getter without using division as that is surely the thing that hampers aligned performance.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12839007\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12839007&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12839007\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12839007_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12839007_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'26\\/Feb\\/10 20:04\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-26T20:04:34+0000\'\u003e26\\/Feb\\/10 20:04\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eGreat progress!  I think this is very close.\u003c\\/p\u003e\\n\\n\u003cp\u003eAirplane blocking snow drifts!?  Where on earth are you anyway?\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cblockquote\u003e\u003cp\u003eCan you add @lucene.internal to the javadocs?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eShould this also be applied to package private classes? Marking those as internal seems redundant.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eYeah I agree package private APIs don\'t need the @lucene.internal...\u003c\\/p\u003e\\n\\n\u003cp\u003eIt\'s very interesting that align is never a win &#8211; I think in that\u003cbr\\/\u003e\\ncase removing it makes sense?  It\'ll be a nice simplification.\u003c\\/p\u003e\\n\\n\u003cp\u003eI think we don\'t need to make a MutableWriter, at least before\u003cbr\\/\u003e\\ncommitting?  Nobody needs it now... (I think?).\u003c\\/p\u003e\\n\\n\u003cp\u003eOther small things:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eCan you use @lucene.internal instead of the NOTE that I had put on\u003cbr\\/\u003e\\n    the classes?\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eWe lost \\\"final\\\" in the RamUsageEstimator constants\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eDid we ever test performance of the specialized (generated)\u003cbr\\/\u003e\\n    decoders using switch statements?\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12839007_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12839007_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'26\\/Feb\\/10 20:04\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-26T20:04:34+0000\'\u003e26\\/Feb\\/10 20:04\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Great progress!  I think this is very close. \\n\\n Airplane blocking snow drifts!?  Where on earth are you anyway? \\n\\n \\n  Can you add @lucene.internal to the javadocs?  \\n\\n Should this also be applied to package private classes? Marking those as internal seems redundant.  \\n\\n Yeah I agree package private APIs don\'t need the @lucene.internal... \\n\\n It\'s very interesting that align is never a win &#8211; I think in that \\ncase removing it makes sense?  It\'ll be a nice simplification. \\n\\n I think we don\'t need to make a MutableWriter, at least before \\ncommitting?  Nobody needs it now... (I think?). \\n\\n Other small things: \\n\\n \\n\\t Can you use @lucene.internal instead of the NOTE that I had put on \\n    the classes? \\n \\n\\n\\n \\n\\t We lost \\\"final\\\" in the RamUsageEstimator constants \\n \\n\\n\\n \\n\\t Did we ever test performance of the specialized (generated) \\n    decoders using switch statements? \\n \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12839062\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12839062&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12839062\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12839062_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12839062_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'26\\/Feb\\/10 22:55\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-26T22:55:25+0000\'\u003e26\\/Feb\\/10 22:55\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\\n\u003cp\u003eAirplane blocking snow drifts!?  Where on earth are you anyway?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eIn Denmark. The guy responsible for clearing the runway did indeed clear the runway. He just forgot that the plane needs to taxi into the runway in the first place. That made us miss our connecting flight.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eIt\'s very interesting that align is never a win &#8211; I think in that case removing it makes sense?  It\'ll be a nice simplification.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eWell, practically never wins for the machines I tested on and never wins with my implementation.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eCan you use @lucene.internal instead of the NOTE that I had put on the classes?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eDone... I think. I\'m not very good at this part, so if someone else wants to do some cleanup i JavaDoc and such, they are very welcome by me.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eWe lost \\\"final\\\" in the RamUsageEstimator constants\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eStrange. Oh well, fixed.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cp\u003eDid we ever test performance of the specialized (generated) decoders using switch statements?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI just did a quick hack in order to measure performance  and I was very surprised that the generated switch-based implementations performs so well. It\'s nearly on par with packed most of the time and exceeds it in some cases. I only tested on 3 machines though. The hack is in the \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-1990\\\" title=\\\"Add unsigned packed int impls in oal.util\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-1990\\\"\u003e\u003cdel\u003eLUCENE-1990\u003c\\/del\u003e\u003c\\/a\u003e-te20100226c.patch and is called when the performance test is executed.\u003c\\/p\u003e\\n\\n\u003cp\u003eAttachment generated_performance-te20100226.txt contains measurements where the py-generated code is tested together with the other implementations.\u003c\\/p\u003e\\n\\n\u003cp\u003eNote to self: Switch is not equivalent to a series of if-else, when we\'re talking performance and when we switch without omissions in the cases.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12839062_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12839062_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'26\\/Feb\\/10 22:55\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-26T22:55:25+0000\'\u003e26\\/Feb\\/10 22:55\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    \\n Airplane blocking snow drifts!?  Where on earth are you anyway?  \\n\\n In Denmark. The guy responsible for clearing the runway did indeed clear the runway. He just forgot that the plane needs to taxi into the runway in the first place. That made us miss our connecting flight. \\n\\n \\n It\'s very interesting that align is never a win &#8211; I think in that case removing it makes sense?  It\'ll be a nice simplification.  \\n\\n Well, practically never wins for the machines I tested on and never wins with my implementation. \\n\\n \\n Can you use @lucene.internal instead of the NOTE that I had put on the classes?  \\n\\n Done... I think. I\'m not very good at this part, so if someone else wants to do some cleanup i JavaDoc and such, they are very welcome by me. \\n\\n \\n We lost \\\"final\\\" in the RamUsageEstimator constants  \\n\\n Strange. Oh well, fixed. \\n\\n \\n Did we ever test performance of the specialized (generated) decoders using switch statements?  \\n\\n I just did a quick hack in order to measure performance  and I was very surprised that the generated switch-based implementations performs so well. It\'s nearly on par with packed most of the time and exceeds it in some cases. I only tested on 3 machines though. The hack is in the   LUCENE-1990  -te20100226c.patch and is called when the performance test is executed. \\n\\n Attachment generated_performance-te20100226.txt contains measurements where the py-generated code is tested together with the other implementations. \\n\\n Note to self: Switch is not equivalent to a series of if-else, when we\'re talking performance and when we switch without omissions in the cases.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12839230\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12839230&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12839230\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12839230_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12839230_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'27\\/Feb\\/10 11:13\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-27T11:13:42+0000\'\u003e27\\/Feb\\/10 11:13\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\\n\u003cblockquote\u003e\u003cp\u003eAirplane blocking snow drifts!? Where on earth are you anyway?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eIn Denmark. The guy responsible for clearing the runway did indeed clear the runway. He just forgot that the plane needs to taxi into the runway in the first place. That made us miss our connecting flight.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eGood grief!\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cblockquote\u003e\u003cp\u003eIt\'s very interesting that align is never a win - I think in that case removing it makes sense? It\'ll be a nice simplification.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eWell, practically never wins for the machines I tested on and never wins with my implementation.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI think we should remove it...\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cblockquote\u003e\u003cp\u003eDid we ever test performance of the specialized (generated) decoders using switch statements?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI just did a quick hack in order to measure performance and I was very surprised that the generated switch-based implementations performs so well. It\'s nearly on par with packed most of the time and exceeds it in some cases. I only tested on 3 machines though. The hack is in the \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-1990\\\" title=\\\"Add unsigned packed int impls in oal.util\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-1990\\\"\u003e\u003cdel\u003eLUCENE-1990\u003c\\/del\u003e\u003c\\/a\u003e-te20100226c.patch and is called when the performance test is executed.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eThanks for testing this!  It is interesting.\u003c\\/p\u003e\\n\\n\u003cp\u003eI ran the perf test on a CentOS 5.4 machine, java\u003cbr\\/\u003e\\n1.6.0_17-b04 64 bit server, Intel core 2 duo E8400 (3 ghz) &#8211; attached\u003cbr\\/\u003e\\nperf-mkm-20100227.txt.  I also show the switch impl close, though\u003cbr\\/\u003e\\nalways a bit behind.\u003c\\/p\u003e\\n\\n\u003cp\u003eSeems like we should just stick with the non-gen\'d packed impl?\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eNote to self: Switch is not equivalent to a series of if-else, when we\'re talking performance and when we switch without omissions in the cases.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eRight, if the switch cases are compact, it should compile into a fast jump\u003cbr\\/\u003e\\ntable (though it may still do an unecessary bounds check).\u003c\\/p\u003e\\n\\n\u003cp\u003eI think, once we removed aligned, this is ready to commit?  I think we\u003cbr\\/\u003e\\nshould land this on flex branch?  (It\'s using CodecUtil, BytesRef &#8211;\u003cbr\\/\u003e\\nI\'ll merge them when I commit).  Then I can cutover the terms index to\u003cbr\\/\u003e\\nuse packed ints.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12839230_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12839230_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'27\\/Feb\\/10 11:13\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-02-27T11:13:42+0000\'\u003e27\\/Feb\\/10 11:13\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    \\n  Airplane blocking snow drifts!? Where on earth are you anyway?  \\n\\n In Denmark. The guy responsible for clearing the runway did indeed clear the runway. He just forgot that the plane needs to taxi into the runway in the first place. That made us miss our connecting flight.  \\n\\n Good grief! \\n\\n \\n  It\'s very interesting that align is never a win - I think in that case removing it makes sense? It\'ll be a nice simplification.  \\n\\n Well, practically never wins for the machines I tested on and never wins with my implementation.  \\n\\n I think we should remove it... \\n\\n \\n  Did we ever test performance of the specialized (generated) decoders using switch statements?  \\n\\n I just did a quick hack in order to measure performance and I was very surprised that the generated switch-based implementations performs so well. It\'s nearly on par with packed most of the time and exceeds it in some cases. I only tested on 3 machines though. The hack is in the   LUCENE-1990  -te20100226c.patch and is called when the performance test is executed.  \\n\\n Thanks for testing this!  It is interesting. \\n\\n I ran the perf test on a CentOS 5.4 machine, java \\n1.6.0_17-b04 64 bit server, Intel core 2 duo E8400 (3 ghz) &#8211; attached \\nperf-mkm-20100227.txt.  I also show the switch impl close, though \\nalways a bit behind. \\n\\n Seems like we should just stick with the non-gen\'d packed impl? \\n\\n  Note to self: Switch is not equivalent to a series of if-else, when we\'re talking performance and when we switch without omissions in the cases.  \\n\\n Right, if the switch cases are compact, it should compile into a fast jump \\ntable (though it may still do an unecessary bounds check). \\n\\n I think, once we removed aligned, this is ready to commit?  I think we \\nshould land this on flex branch?  (It\'s using CodecUtil, BytesRef &#8211; \\nI\'ll merge them when I commit).  Then I can cutover the terms index to \\nuse packed ints.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12839684\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12839684&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12839684\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12839684_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12839684_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Mar\\/10 14:11\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-01T14:11:43+0000\'\u003e01\\/Mar\\/10 14:11\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI\'ve tested on two 32 bit Windows machines: An Intel T2400 (32 bit only) running XP and an Athlon X2 4850e (64 bit capable) running 32 bit XP. The result can be seen in attachment performance-20100301.txt. Something curious happens with high (32+) bits\\/value for the T2400 as aligned overtakes packed. However, the overall picture is still that aligned only wins for a few special cases, so now I\'ll be happy to remove it from the patch. As a note, generated is also slower than packed on the AMD processor, although not as much as for Intel.\u003c\\/p\u003e\\n\\n\u003cp\u003eI have removed all traces of aligned from PackedInts, but kept the classes in the patch, in the case that someone finds a faster way to handle aligned. PackedIntsPerformance still includes both the generated switch-implementation and Aligned32 and Aligned64. It should be possible to apply the patch without Aligned32, Aligned64, AlignedWriter and PackedIntsPerformance.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12839684_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12839684_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Mar\\/10 14:11\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-01T14:11:43+0000\'\u003e01\\/Mar\\/10 14:11\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I\'ve tested on two 32 bit Windows machines: An Intel T2400 (32 bit only) running XP and an Athlon X2 4850e (64 bit capable) running 32 bit XP. The result can be seen in attachment performance-20100301.txt. Something curious happens with high (32+) bits\\/value for the T2400 as aligned overtakes packed. However, the overall picture is still that aligned only wins for a few special cases, so now I\'ll be happy to remove it from the patch. As a note, generated is also slower than packed on the AMD processor, although not as much as for Intel. \\n\\n I have removed all traces of aligned from PackedInts, but kept the classes in the patch, in the case that someone finds a faster way to handle aligned. PackedIntsPerformance still includes both the generated switch-implementation and Aligned32 and Aligned64. It should be possible to apply the patch without Aligned32, Aligned64, AlignedWriter and PackedIntsPerformance.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12839852\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12839852&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12839852\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12839852_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12839852_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Mar\\/10 20:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-01T20:56:57+0000\'\u003e01\\/Mar\\/10 20:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eSome thoughts on avoiding the generic division by experimenting with reciprocal multiplication: For aligned, the sane number of values\\/block are \u003cspan class=\\\"error\\\"\u003e&#91;3, 5, 6, 7, 8, 9, 10, 16, 21, 32, 64&#93;\u003c\\/span\u003e. I tried testing index from 0 to Integer.MAX_VALUE with these divisors and reciprocal multiplication. It worked perfectly for all divisors except \u003cspan class=\\\"error\\\"\u003e&#91;5, 7, 9, 10, 21&#93;\u003c\\/span\u003e. Unfortunately it already falls for divisor 21 at index 252645140, which makes it useless as a full replacement. If one were so inclined, it would be possible to select aligned implementation based on valueCount, with fallback to the \\\"slow\\\" version. The gain of using fast division seems quite substantial as it makes aligned 14-40% faster than packed (note: Just tested on a single machine). However, re-introducing aligned with four different implementations (Aligned32, Aligned32Fast, Aligned64, Aligned64Fast) is rather daunting and it would make the selection code really messy.\u003c\\/p\u003e\\n\\n\u003cp\u003eI can see that there are well-known tricks to get around the rounding errors. Some are described at \u003ca href=\\\"http:\\/\\/www.cs.uiowa.edu\\/~jones\\/bcd\\/divide.html#fixed\\\" class=\\\"external-link\\\" rel=\\\"nofollow\\\"\u003ehttp:\\/\\/www.cs.uiowa.edu\\/~jones\\/bcd\\/divide.html#fixed\u003c\\/a\u003e . I don\'t know if these extra tricks would negate the 14-40% speed gain though. Since I would like to get the patch out of the door, I vote for keeping aligned disabled and just note that more bit fiddling might make it attractive at some point.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12839852_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12839852_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Mar\\/10 20:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-01T20:56:57+0000\'\u003e01\\/Mar\\/10 20:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Some thoughts on avoiding the generic division by experimenting with reciprocal multiplication: For aligned, the sane number of values\\/block are  &#91;3, 5, 6, 7, 8, 9, 10, 16, 21, 32, 64&#93; . I tried testing index from 0 to Integer.MAX_VALUE with these divisors and reciprocal multiplication. It worked perfectly for all divisors except  &#91;5, 7, 9, 10, 21&#93; . Unfortunately it already falls for divisor 21 at index 252645140, which makes it useless as a full replacement. If one were so inclined, it would be possible to select aligned implementation based on valueCount, with fallback to the \\\"slow\\\" version. The gain of using fast division seems quite substantial as it makes aligned 14-40% faster than packed (note: Just tested on a single machine). However, re-introducing aligned with four different implementations (Aligned32, Aligned32Fast, Aligned64, Aligned64Fast) is rather daunting and it would make the selection code really messy. \\n\\n I can see that there are well-known tricks to get around the rounding errors. Some are described at  http:\\/\\/www.cs.uiowa.edu\\/~jones\\/bcd\\/divide.html#fixed  . I don\'t know if these extra tricks would negate the 14-40% speed gain though. Since I would like to get the patch out of the door, I vote for keeping aligned disabled and just note that more bit fiddling might make it attractive at some point.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12842412\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12842412&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12842412\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12842412_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12842412_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'07\\/Mar\\/10 11:51\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-07T11:51:24+0000\'\u003e07\\/Mar\\/10 11:51\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003ePatch looks great Toke &#8211; a few small things:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eI think we shouldn\'t add Aligned*.java to svn?  It\'ll just add\u003cbr\\/\u003e\\n    unused bits to the JAR, and, we can always fallback to this issue\u003cbr\\/\u003e\\n    to pull them in at a future time?\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eCan you resolve the remaining nocommits?  EG (since we are\u003cbr\\/\u003e\\n    unsigned) we can\'t get the 64 bit case working.  I don\'t think we\u003cbr\\/\u003e\\n    should rename to UnsignedXXX, nor, support minValue at this\u003cbr\\/\u003e\\n    point, and remove the ComparableBytesRef, and I\'ll merge BytesRef\u003cbr\\/\u003e\\n    into flex\'s when I commit.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eI can take these too &#8211; I think it\'s ready to commit on flex after\u003cbr\\/\u003e\\nthis.  Thanks!\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12842412_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12842412_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'07\\/Mar\\/10 11:51\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-07T11:51:24+0000\'\u003e07\\/Mar\\/10 11:51\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Patch looks great Toke &#8211; a few small things: \\n\\n \\n\\t I think we shouldn\'t add Aligned*.java to svn?  It\'ll just add \\n    unused bits to the JAR, and, we can always fallback to this issue \\n    to pull them in at a future time? \\n \\n\\n\\n \\n\\t Can you resolve the remaining nocommits?  EG (since we are \\n    unsigned) we can\'t get the 64 bit case working.  I don\'t think we \\n    should rename to UnsignedXXX, nor, support minValue at this \\n    point, and remove the ComparableBytesRef, and I\'ll merge BytesRef \\n    into flex\'s when I commit. \\n \\n\\n\\n I can take these too &#8211; I think it\'s ready to commit on flex after \\nthis.  Thanks!              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12842414\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12842414&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12842414\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"thetaphi\\\" id=\\\"commentauthor_12842414_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=thetaphi\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"thetaphi\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Uwe Schindler\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12842414_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'07\\/Mar\\/10 11:59\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-07T11:59:05+0000\'\u003e07\\/Mar\\/10 11:59\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eWe should also add the @lucene.internal javadoc comments everywhere instead of the big NOTE. Why has one class a full-uppercase class name?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"thetaphi\\\" id=\\\"commentauthor_12842414_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=thetaphi\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"thetaphi\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Uwe Schindler\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12842414_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'07\\/Mar\\/10 11:59\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-07T11:59:05+0000\'\u003e07\\/Mar\\/10 11:59\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    We should also add the @lucene.internal javadoc comments everywhere instead of the big NOTE. Why has one class a full-uppercase class name?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12843027\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12843027&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12843027\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12843027_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843027_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 12:33\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T12:33:20+0000\'\u003e09\\/Mar\\/10 12:33\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eMichael McCandless:\u003c\\/p\u003e\\n\u003cblockquote\u003e\\n\u003cul\u003e\\n\\t\u003cli\u003eI think we shouldn\'t add Aligned*.java to svn? It\'ll just add\u003cbr\\/\u003e\\n      unused bits to the JAR, and, we can always fallback to this issue\u003cbr\\/\u003e\\n      to pull them in at a future time?\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI agree. At the current state, Aligned is just dead weight.\u003c\\/p\u003e\\n\\n\u003cp\u003eThis also means that the performance tester won\'t be part of the commit though. I can quickly make a performance tester that does not use aligned, if it is preferable to keep performance testing.\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\\n\u003cul\u003e\\n\\t\u003cli\u003eCan you resolve the remaining nocommits? EG (since we are\u003cbr\\/\u003e\\n      unsigned) we can\'t get the 64 bit case working. I don\'t think we\u003cbr\\/\u003e\\n      should rename to UnsignedXXX, nor, support minValue at this\u003cbr\\/\u003e\\n      point, and remove the ComparableBytesRef, and I\'ll merge BytesRef\u003cbr\\/\u003e\\n      into flex\'s when I commit.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eI can take these too - I think it\'s ready to commit on flex after this\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eIt will help a lot if you take care of these issues, thanks.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12843027_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843027_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 12:33\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T12:33:20+0000\'\u003e09\\/Mar\\/10 12:33\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Michael McCandless: \\n \\n \\n\\t I think we shouldn\'t add Aligned*.java to svn? It\'ll just add \\n      unused bits to the JAR, and, we can always fallback to this issue \\n      to pull them in at a future time? \\n \\n \\n\\n I agree. At the current state, Aligned is just dead weight. \\n\\n This also means that the performance tester won\'t be part of the commit though. I can quickly make a performance tester that does not use aligned, if it is preferable to keep performance testing. \\n\\n \\n \\n\\t Can you resolve the remaining nocommits? EG (since we are \\n      unsigned) we can\'t get the 64 bit case working. I don\'t think we \\n      should rename to UnsignedXXX, nor, support minValue at this \\n      point, and remove the ComparableBytesRef, and I\'ll merge BytesRef \\n      into flex\'s when I commit. \\n \\n\\n\\n I can take these too - I think it\'s ready to commit on flex after this  \\n\\n It will help a lot if you take care of these issues, thanks.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12843028\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12843028&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12843028\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12843028_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843028_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 12:34\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T12:34:52+0000\'\u003e09\\/Mar\\/10 12:34\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eUwe Schindler:\u003c\\/p\u003e\\n\u003cblockquote\u003e\\n\u003cp\u003eWe should also add the @lucene.internal javadoc comments everywhere instead of the big NOTE. Why has one class a full-uppercase class name? \u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eAre you looking at patch \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-1990\\\" title=\\\"Add unsigned packed int impls in oal.util\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-1990\\\"\u003e\u003cdel\u003eLUCENE-1990\u003c\\/del\u003e\u003c\\/a\u003e-te20100301.patch? I don\'t see any NOTE and no full-uppercase class name?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12843028_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843028_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 12:34\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T12:34:52+0000\'\u003e09\\/Mar\\/10 12:34\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Uwe Schindler: \\n \\n We should also add the @lucene.internal javadoc comments everywhere instead of the big NOTE. Why has one class a full-uppercase class name?   \\n\\n Are you looking at patch   LUCENE-1990  -te20100301.patch? I don\'t see any NOTE and no full-uppercase class name?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12843215\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12843215&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12843215\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12843215_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843215_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 18:19\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T18:19:06+0000\'\u003e09\\/Mar\\/10 18:19\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003eIt will help a lot if you take care of these issues, thanks.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eOK will do.  I\'ll commit soon to flex... thanks Toke!\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12843215_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843215_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 18:19\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T18:19:06+0000\'\u003e09\\/Mar\\/10 18:19\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     It will help a lot if you take care of these issues, thanks.  \\n\\n OK will do.  I\'ll commit soon to flex... thanks Toke!              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12843218\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12843218&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12843218\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12843218_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843218_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 18:23\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T18:23:35+0000\'\u003e09\\/Mar\\/10 18:23\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003eWe should also add the @lucene.internal javadoc comments everywhere instead of the big NOTE.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eI found one more NOTE in CodecUtil &#8211; I\'ll fix before committing.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12843218_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843218_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 18:23\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T18:23:35+0000\'\u003e09\\/Mar\\/10 18:23\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     We should also add the @lucene.internal javadoc comments everywhere instead of the big NOTE.  \\n\\n I found one more NOTE in CodecUtil &#8211; I\'ll fix before committing.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12843220\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12843220&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12843220\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12843220_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843220_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 18:26\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T18:26:12+0000\'\u003e09\\/Mar\\/10 18:26\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003eWhy has one class a full-uppercase class name?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eUwe you mean eg STORAGE?  (And also BLOCK, IMPLEMENTATION... but they are package private).  These are enums &#8211; seems OK to make them all caps?\u003c\\/p\u003e\\n\\n\u003cp\u003eThough I do think we can simplify some of this now that we\'re removing the aligned case... eg PERSISTENCE is an enum with only one value.  I\'ll take a stab &amp; post patch.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12843220_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843220_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 18:26\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T18:26:12+0000\'\u003e09\\/Mar\\/10 18:26\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     Why has one class a full-uppercase class name?  \\n\\n Uwe you mean eg STORAGE?  (And also BLOCK, IMPLEMENTATION... but they are package private).  These are enums &#8211; seems OK to make them all caps? \\n\\n Though I do think we can simplify some of this now that we\'re removing the aligned case... eg PERSISTENCE is an enum with only one value.  I\'ll take a stab &amp; post patch.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12843325\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12843325&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12843325\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12843325_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843325_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 22:14\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T22:14:17+0000\'\u003e09\\/Mar\\/10 22:14\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eOK new patch attached:\u003c\\/p\u003e\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003ePorted to flex, and cutover to CodecUtil.  BytesRef required no\u003cbr\\/\u003e\\n    changes...\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eSimplified the API\\/impl to not use STORAGE, PERSISTENCE,\u003cbr\\/\u003e\\n    IMPLEMENTATION, etc.  You just specify required bitsPerValue.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eRemoved Aligned*, and ConsumesRAM interface\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eFixed the nocommits.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eI think it\'s ready!  I\'ll wait a day or two...\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12843325_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12843325_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'09\\/Mar\\/10 22:14\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-09T22:14:17+0000\'\u003e09\\/Mar\\/10 22:14\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    OK new patch attached: \\n\\n \\n\\t Ported to flex, and cutover to CodecUtil.  BytesRef required no \\n    changes... \\n \\n\\n\\n \\n\\t Simplified the API\\/impl to not use STORAGE, PERSISTENCE, \\n    IMPLEMENTATION, etc.  You just specify required bitsPerValue. \\n \\n\\n\\n \\n\\t Removed Aligned*, and ConsumesRAM interface \\n \\n\\n\\n \\n\\t Fixed the nocommits. \\n \\n\\n\\n I think it\'s ready!  I\'ll wait a day or two...              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12844914\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12844914&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12844914\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12844914_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12844914_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'13\\/Mar\\/10 16:34\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-13T16:34:52+0000\'\u003e13\\/Mar\\/10 16:34\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eThanks Toke!\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12844914_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12844914_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'13\\/Mar\\/10 16:34\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-13T16:34:52+0000\'\u003e13\\/Mar\\/10 16:34\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Thanks Toke!              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12845082\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12845082&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12845082\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12845082_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12845082_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'14\\/Mar\\/10 13:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-14T13:56:18+0000\'\u003e14\\/Mar\\/10 13:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eThanks for rounding off, Michael. It\'s been a pleasure.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12845082_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12845082_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'14\\/Mar\\/10 13:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-14T13:56:18+0000\'\u003e14\\/Mar\\/10 13:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Thanks for rounding off, Michael. It\'s been a pleasure.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12850550\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12850550&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12850550\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"rcmuir\\\" id=\\\"commentauthor_12850550_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=rcmuir\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"rcmuir\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Robert Muir\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12850550_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'27\\/Mar\\/10 17:04\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-27T17:04:45+0000\'\u003e27\\/Mar\\/10 17:04\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eBy the way Toke, we have lately been benchmarking automaton queries, which are pretty intensive on the terms dictionary.\u003cbr\\/\u003e\\nI think we were expecting some acceptable slowdown once we switched to packed ints, but according to my benchmarks this is not the case.\u003c\\/p\u003e\\n\\n\u003cp\u003eI think its pretty impressive to see no measurable performance impact on this stuff at all, great work.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"rcmuir\\\" id=\\\"commentauthor_12850550_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=rcmuir\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"rcmuir\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Robert Muir\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12850550_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'27\\/Mar\\/10 17:04\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-27T17:04:45+0000\'\u003e27\\/Mar\\/10 17:04\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    By the way Toke, we have lately been benchmarking automaton queries, which are pretty intensive on the terms dictionary. \\nI think we were expecting some acceptable slowdown once we switched to packed ints, but according to my benchmarks this is not the case. \\n\\n I think its pretty impressive to see no measurable performance impact on this stuff at all, great work.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12851806\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12851806&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12851806\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12851806_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12851806_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Mar\\/10 10:28\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-31T10:28:39+0000\'\u003e31\\/Mar\\/10 10:28\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI am very happy to hear that, Robert. The benchmarks I made had the glaring flaw that they were ... well, benchmarks. With the CPU-cache being hammered in a real world scenario, your findings indicate that the slow round-trip to main memory dwarfs the extra logic for extracting the values from the packed structure. For a few scenarios, it might even be faster than plain arrays.\u003c\\/p\u003e\\n\\n\u003cp\u003eGetting back to reality, my own findings indicates that using PackedInts for ord-based sorted search is not at all faster than plain arrays. The access pattern here is very sequential, so the chance that the needed value is already fetched from main memory is high for both plain and packed structures.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12851806_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12851806_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Mar\\/10 10:28\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-31T10:28:39+0000\'\u003e31\\/Mar\\/10 10:28\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I am very happy to hear that, Robert. The benchmarks I made had the glaring flaw that they were ... well, benchmarks. With the CPU-cache being hammered in a real world scenario, your findings indicate that the slow round-trip to main memory dwarfs the extra logic for extracting the values from the packed structure. For a few scenarios, it might even be faster than plain arrays. \\n\\n Getting back to reality, my own findings indicates that using PackedInts for ord-based sorted search is not at all faster than plain arrays. The access pattern here is very sequential, so the chance that the needed value is already fetched from main memory is high for both plain and packed structures.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12851809\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12851809&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12851809\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12851809_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12851809_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Mar\\/10 10:39\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-31T10:39:04+0000\'\u003e31\\/Mar\\/10 10:39\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eToke, are sort ords that much slower than straight arrays for sorting?\u003c\\/p\u003e\\n\\n\u003cp\u003eAfter flex lands I\'d really like to make a variant of FieldCache.StringIndex that uses BytesRef for the values and packed ints for the ords.... should save alot of memory in many cases (English text saves since utf8 is 1 byte per char; enumerated fields (eg country name) should save tons by using only a few bits instead of 32 we now always use) when sorting by string.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12851809_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12851809_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Mar\\/10 10:39\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-31T10:39:04+0000\'\u003e31\\/Mar\\/10 10:39\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Toke, are sort ords that much slower than straight arrays for sorting? \\n\\n After flex lands I\'d really like to make a variant of FieldCache.StringIndex that uses BytesRef for the values and packed ints for the ords.... should save alot of memory in many cases (English text saves since utf8 is 1 byte per char; enumerated fields (eg country name) should save tons by using only a few bits instead of 32 we now always use) when sorting by string.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12852074\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12852074&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12852074\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12852074_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852074_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Mar\\/10 19:51\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-31T19:51:08+0000\'\u003e31\\/Mar\\/10 19:51\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eIn the original proof of concept for \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-2335\\\" title=\\\"optimization: when sorting by field, if index has one segment and field values are not needed, do not load String[] into field cache\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-2335\\\"\u003eLUCENE-2335\u003c\\/a\u003e, I measured the time for extracting top-20 for ... 10 million? documents and got something like 600ms when using PackedInts, which is fairly slow in my book and recall getting better performance with straight arrays for that. This is all wery fuzzy though and I\'d love to be proven wrong. If PackedInts are faster for sorting too, it\'s getting very hard to see the downside of that representation.\u003c\\/p\u003e\\n\\n\u003cp\u003eSince \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-2335\\\" title=\\\"optimization: when sorting by field, if index has one segment and field values are not needed, do not load String[] into field cache\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-2335\\\"\u003eLUCENE-2335\u003c\\/a\u003e relies heavily on arays of sorted indexes into ordinal arrays, I\'ll make sure to performance test both PackedInts and straight arrays for sorted search.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12852074_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852074_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Mar\\/10 19:51\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-03-31T19:51:08+0000\'\u003e31\\/Mar\\/10 19:51\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    In the original proof of concept for  LUCENE-2335 , I measured the time for extracting top-20 for ... 10 million? documents and got something like 600ms when using PackedInts, which is fairly slow in my book and recall getting better performance with straight arrays for that. This is all wery fuzzy though and I\'d love to be proven wrong. If PackedInts are faster for sorting too, it\'s getting very hard to see the downside of that representation. \\n\\n Since  LUCENE-2335  relies heavily on arays of sorted indexes into ordinal arrays, I\'ll make sure to performance test both PackedInts and straight arrays for sorted search.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12852557\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12852557&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12852557\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n                                            \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12852557_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852557_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Apr\\/10 21:24\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-01T21:24:39+0000\'\u003e01\\/Apr\\/10 21:24\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e   - \u003cspan class=\\\"redText subText\\\" title=\\\"Toke Eskildsen - 01\\/Apr\\/10 21:33\\\"\u003eedited\u003c\\/span\u003e \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eIt seem like my unit-testing of PackedInts.Mutable wasn\'t good enough. There is a bug in Packed64 (and probably in Packed32 too) when using the set-method. In certain cases the secondary block is changed when it should be left alone. A simple unit-test is\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e    PackedInts.Mutable mutable = PackedInts.getMutable(26, 5);\\n    mutable.set(24, 31);\\n    mutable.set(4, 16);\\n    assertEquals(\u003cspan class=\\\"code-quote\\\"\u003e\\\"The value #24 should remain unchanged\\\"\u003c\\/span\u003e, 31, mutable.get(24));\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eThe PackedWriter uses a different algorithm for generating the bit stream and is unaffected by this bug.\u003c\\/p\u003e\\n\\n\u003cp\u003eI expect the write-masks for the set-method to be at fault and I am working on a fix. ETA: Within an hour or sometime during the weekend, depending on difficulty.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n                                            \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12852557_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852557_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Apr\\/10 21:24\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-01T21:24:39+0000\'\u003e01\\/Apr\\/10 21:24\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e   - \u003cspan class=\\\"redText subText\\\" title=\\\"Toke Eskildsen - 01\\/Apr\\/10 21:33\\\"\u003eedited\u003c\\/span\u003e                   It seem like my unit-testing of PackedInts.Mutable wasn\'t good enough. There is a bug in Packed64 (and probably in Packed32 too) when using the set-method. In certain cases the secondary block is changed when it should be left alone. A simple unit-test is \\n  \\n     PackedInts.Mutable mutable = PackedInts.getMutable(26, 5);\\n    mutable.set(24, 31);\\n    mutable.set(4, 16);\\n    assertEquals( \\\"The value #24 should remain unchanged\\\" , 31, mutable.get(24));\\n \\n  \\n\\n The PackedWriter uses a different algorithm for generating the bit stream and is unaffected by this bug. \\n\\n I expect the write-masks for the set-method to be at fault and I am working on a fix. ETA: Within an hour or sometime during the weekend, depending on difficulty.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12852562\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12852562&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12852562\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12852562_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852562_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Apr\\/10 21:38\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-01T21:38:20+0000\'\u003e01\\/Apr\\/10 21:38\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eGood catch Toke!  Flex actually uses Mutable on loading the terms index when indexDivisor is not 1...\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12852562_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852562_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Apr\\/10 21:38\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-01T21:38:20+0000\'\u003e01\\/Apr\\/10 21:38\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Good catch Toke!  Flex actually uses Mutable on loading the terms index when indexDivisor is not 1...              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12852563\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12852563&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12852563\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12852563_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852563_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Apr\\/10 21:38\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-01T21:38:39+0000\'\u003e01\\/Apr\\/10 21:38\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eReopen to fix issue Toke found with Mutable\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12852563_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852563_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Apr\\/10 21:38\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-01T21:38:39+0000\'\u003e01\\/Apr\\/10 21:38\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Reopen to fix issue Toke found with Mutable              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12852568\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12852568&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12852568\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12852568_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852568_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Apr\\/10 21:51\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-01T21:51:46+0000\'\u003e01\\/Apr\\/10 21:51\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI\'ve located the bug and fixed it. As expected, it was in the write-masks. Unfortunately I\'m running out of time, so I cannot make a patch right now. The code for Packed64 is\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e  \u003cspan class=\\\"code-keyword\\\"\u003eprivate\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003estatic\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e[][] WRITE_MASKS =\\n          \u003cspan class=\\\"code-keyword\\\"\u003enew\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e[ENTRY_SIZE][ENTRY_SIZE * FAC_BITPOS];\\n  \u003cspan class=\\\"code-keyword\\\"\u003estatic\u003c\\/span\u003e {\\n    \u003cspan class=\\\"code-keyword\\\"\u003efor\u003c\\/span\u003e (\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e elementBits = 1 ; elementBits &lt;= BLOCK_SIZE ; elementBits++) {\\n        \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e elementPosMask = ~(~0L &lt;&lt; elementBits);\\n        \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e[] currentShifts = SHIFTS[elementBits];\\n        \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e[] currentMasks = WRITE_MASKS[elementBits];\\n        \u003cspan class=\\\"code-keyword\\\"\u003efor\u003c\\/span\u003e (\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e bitPos = 0 ; bitPos &lt; BLOCK_SIZE ; bitPos++) {\\n            \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e base = bitPos * FAC_BITPOS;\\n            currentMasks[base  ] =~((elementPosMask\\n                               &lt;&lt; currentShifts[base + 1])\\n                              &gt;&gt;&gt; currentShifts[base]);\\n            currentMasks[base+1] =\\n                ~(elementPosMask &lt;&lt; currentShifts[base + 2]);\\n            currentMasks[base+2] = currentShifts[base + 2] == 0 ? 0 : ~0;\\n          \u003cspan class=\\\"code-keyword\\\"\u003eif\u003c\\/span\u003e (bitPos &lt;= BLOCK_SIZE - elementBits) { \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ Second block not used\\n\u003c\\/span\u003e            currentMasks[base+1] = ~0; \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ Keep all bits\\n\u003c\\/span\u003e            currentMasks[base+2] = 0;  \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ Or with 0\\n\u003c\\/span\u003e          }\\n        }\\n    }\\n  }\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eThe changed code is the addition of the last check for second block usage. Likewise the fix for Packed32 is\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e  \u003cspan class=\\\"code-keyword\\\"\u003eprivate\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003estatic\u003c\\/span\u003e \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e[][] WRITE_MASKS =\\n          \u003cspan class=\\\"code-keyword\\\"\u003enew\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e[ENTRY_SIZE][ENTRY_SIZE * FAC_BITPOS];\\n  \u003cspan class=\\\"code-keyword\\\"\u003estatic\u003c\\/span\u003e {\\n    \u003cspan class=\\\"code-keyword\\\"\u003efor\u003c\\/span\u003e (\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e elementBits = 1 ; elementBits &lt;= BLOCK_SIZE ; elementBits++) {\\n      \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e elementPosMask = ~(~0 &lt;&lt; elementBits);\\n      \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e[] currentShifts = SHIFTS[elementBits];\\n      \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e[] currentMasks = WRITE_MASKS[elementBits];\\n      \u003cspan class=\\\"code-keyword\\\"\u003efor\u003c\\/span\u003e (\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e bitPos = 0 ; bitPos &lt; BLOCK_SIZE ; bitPos++) {\\n        \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e base = bitPos * FAC_BITPOS;\\n        currentMasks[base  ] =~((elementPosMask\\n                &lt;&lt; currentShifts[base + 1])\\n                &gt;&gt;&gt; currentShifts[base]);\\n        currentMasks[base+1] = ~(elementPosMask\\n                &lt;&lt; currentShifts[base + 2]);\\n        currentMasks[base+2] = currentShifts[base + 2] == 0 ? 0 : ~0;\\n        \u003cspan class=\\\"code-keyword\\\"\u003eif\u003c\\/span\u003e (bitPos &lt;= BLOCK_SIZE - elementBits) { \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ Second block not used\\n\u003c\\/span\u003e          currentMasks[base+1] = ~0; \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ Keep all bits\\n\u003c\\/span\u003e          currentMasks[base+2] = 0;  \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ Or with 0\\n\u003c\\/span\u003e        }\\n      }\\n    }\\n  }\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eWithout checking thoroughly, I\'d expect the two pieces of code to be exactly the same, at the difference between Packed32 and Packed64 is just long vs. int and some constants. The unit-test from above can be used for Packed32 by explicitly creating a Packed32 instead of calling the factory.\u003c\\/p\u003e\\n\\n\u003cp\u003eI\'ll be back behind the screen in a few days where I can make a patch, but you are more than welcome to roll the patch if it is more convenient to get it immediately.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12852568_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852568_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Apr\\/10 21:51\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-01T21:51:46+0000\'\u003e01\\/Apr\\/10 21:51\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I\'ve located the bug and fixed it. As expected, it was in the write-masks. Unfortunately I\'m running out of time, so I cannot make a patch right now. The code for Packed64 is \\n  \\n    private   static   final   long [][] WRITE_MASKS =\\n           new   long [ENTRY_SIZE][ENTRY_SIZE * FAC_BITPOS];\\n   static  {\\n     for  ( int  elementBits = 1 ; elementBits &lt;= BLOCK_SIZE ; elementBits++) {\\n         long  elementPosMask = ~(~0L &lt;&lt; elementBits);\\n         int [] currentShifts = SHIFTS[elementBits];\\n         long [] currentMasks = WRITE_MASKS[elementBits];\\n         for  ( int  bitPos = 0 ; bitPos &lt; BLOCK_SIZE ; bitPos++) {\\n             int  base = bitPos * FAC_BITPOS;\\n            currentMasks[base  ] =~((elementPosMask\\n                               &lt;&lt; currentShifts[base + 1])\\n                              &gt;&gt;&gt; currentShifts[base]);\\n            currentMasks[base+1] =\\n                ~(elementPosMask &lt;&lt; currentShifts[base + 2]);\\n            currentMasks[base+2] = currentShifts[base + 2] == 0 ? 0 : ~0;\\n           if  (bitPos &lt;= BLOCK_SIZE - elementBits) {  \\/\\/ Second block not used\\n             currentMasks[base+1] = ~0;  \\/\\/ Keep all bits\\n             currentMasks[base+2] = 0;   \\/\\/ Or with 0\\n           }\\n        }\\n    }\\n  }\\n \\n  \\n\\n The changed code is the addition of the last check for second block usage. Likewise the fix for Packed32 is \\n\\n  \\n    private   static   final   int [][] WRITE_MASKS =\\n           new   int [ENTRY_SIZE][ENTRY_SIZE * FAC_BITPOS];\\n   static  {\\n     for  ( int  elementBits = 1 ; elementBits &lt;= BLOCK_SIZE ; elementBits++) {\\n       int  elementPosMask = ~(~0 &lt;&lt; elementBits);\\n       int [] currentShifts = SHIFTS[elementBits];\\n       int [] currentMasks = WRITE_MASKS[elementBits];\\n       for  ( int  bitPos = 0 ; bitPos &lt; BLOCK_SIZE ; bitPos++) {\\n         int  base = bitPos * FAC_BITPOS;\\n        currentMasks[base  ] =~((elementPosMask\\n                &lt;&lt; currentShifts[base + 1])\\n                &gt;&gt;&gt; currentShifts[base]);\\n        currentMasks[base+1] = ~(elementPosMask\\n                &lt;&lt; currentShifts[base + 2]);\\n        currentMasks[base+2] = currentShifts[base + 2] == 0 ? 0 : ~0;\\n         if  (bitPos &lt;= BLOCK_SIZE - elementBits) {  \\/\\/ Second block not used\\n           currentMasks[base+1] = ~0;  \\/\\/ Keep all bits\\n           currentMasks[base+2] = 0;   \\/\\/ Or with 0\\n         }\\n      }\\n    }\\n  }\\n \\n  \\n\\n Without checking thoroughly, I\'d expect the two pieces of code to be exactly the same, at the difference between Packed32 and Packed64 is just long vs. int and some constants. The unit-test from above can be used for Packed32 by explicitly creating a Packed32 instead of calling the factory. \\n\\n I\'ll be back behind the screen in a few days where I can make a patch, but you are more than welcome to roll the patch if it is more convenient to get it immediately.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12852571\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12852571&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12852571\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12852571_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852571_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Apr\\/10 22:06\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-01T22:06:17+0000\'\u003e01\\/Apr\\/10 22:06\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI turned it into a patch (attached).\u003c\\/p\u003e\\n\\n\u003cp\u003eBut: without the fix, when I run the test, I don\'t see it failing (on current flex branch).  I\'ve fixed a few issues with packed ints on flex, but I don\'t think they would\'ve fixed this.  Confused....\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12852571_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12852571_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Apr\\/10 22:06\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-01T22:06:17+0000\'\u003e01\\/Apr\\/10 22:06\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I turned it into a patch (attached). \\n\\n But: without the fix, when I run the test, I don\'t see it failing (on current flex branch).  I\'ve fixed a few issues with packed ints on flex, but I don\'t think they would\'ve fixed this.  Confused....              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12854151\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12854151&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12854151\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12854151_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12854151_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'06\\/Apr\\/10 20:08\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-06T20:08:48+0000\'\u003e06\\/Apr\\/10 20:08\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI did a checkout with\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003esvn co https:\u003cspan class=\\\"code-comment\\\"\u003e\\/\\/svn.apache.org\\/repos\\/asf\\/lucene\\/dev\\/trunk\\/lucene lucene-flex\u003c\\/span\u003e\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eand added the following method to TestPackedInts\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e  \u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e void testSecondaryBlockChange() \u003cspan class=\\\"code-keyword\\\"\u003ethrows\u003c\\/span\u003e IOException {\\n    PackedInts.Mutable mutable = \u003cspan class=\\\"code-keyword\\\"\u003enew\u003c\\/span\u003e Packed64(26, 5);\\n    mutable.set(24, 31);\\n    assertEquals(\u003cspan class=\\\"code-quote\\\"\u003e\\\"The value #24 should be correct\\\"\u003c\\/span\u003e, 31, mutable.get(24));\\n    mutable.set(4, 16);\\n    assertEquals(\u003cspan class=\\\"code-quote\\\"\u003e\\\"The value #24 should remain unchanged\\\"\u003c\\/span\u003e, 31, mutable.get(24));\\n  }\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eafter which I ran\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003eant test-core\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003ewhich gave me\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e    [junit] Testsuite: org.apache.lucene.util.packed.TestPackedInts\\n    [junit] Testcase: testSecondaryBlockChange(org.apache.lucene.util.packed.TestPackedInts):\\tFAILED\\n    [junit] The value #24 should remain unchanged expected:&lt;31&gt; but was:&lt;28&gt;\\n    [junit] junit.framework.AssertionFailedError: The value #24 should remain unchanged expected:&lt;31&gt; but was:&lt;28&gt;\\n    [junit] \\tat org.apache.lucene.util.packed.TestPackedInts.testSecondaryBlockChange(TestPackedInts.java:106)\\n    [junit] \\tat org.apache.lucene.util.LuceneTestCase.runBare(LuceneTestCase.java:276)\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003ethen I added\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e              \u003cspan class=\\\"code-keyword\\\"\u003eif\u003c\\/span\u003e (bitPos &lt;= BLOCK_SIZE - elementBits) { \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ Second block not used\\n\u003c\\/span\u003e                currentMasks[base+1] = ~0; \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ Keep all bits\\n\u003c\\/span\u003e                currentMasks[base+2] = 0;  \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ Or with 0\\n\u003c\\/span\u003e              }\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eto the relevant parts of Packed32 and Packed, as described above and ran\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003eant test-core\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eagain, which gave me\u003c\\/p\u003e\\n\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e    [junit] Testsuite: org.apache.lucene.util.packed.TestPackedInts\\n    [junit] Tests run: 7, Failures: 0, Errors: 0, Time elapsed: 5.463 sec\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eMy initial unit-test contained an error, which I corrected after a minute or two (as far as I remember). Maybe you used the first version?\u003c\\/p\u003e\\n\\n\u003cp\u003eIt seems that the bug is indeed in trunk. It corrupts the value of the block after the current block in certain cases: Sequential assignment of values works fine, but out-of-order assignments corrupts the array.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12854151_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12854151_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'06\\/Apr\\/10 20:08\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-06T20:08:48+0000\'\u003e06\\/Apr\\/10 20:08\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I did a checkout with \\n  \\n svn co https: \\/\\/svn.apache.org\\/repos\\/asf\\/lucene\\/dev\\/trunk\\/lucene lucene-flex \\n \\n  \\n\\n and added the following method to TestPackedInts \\n\\n  \\n    public  void testSecondaryBlockChange()  throws  IOException {\\n    PackedInts.Mutable mutable =  new  Packed64(26, 5);\\n    mutable.set(24, 31);\\n    assertEquals( \\\"The value #24 should be correct\\\" , 31, mutable.get(24));\\n    mutable.set(4, 16);\\n    assertEquals( \\\"The value #24 should remain unchanged\\\" , 31, mutable.get(24));\\n  }\\n \\n  \\n\\n after which I ran \\n\\n  \\n ant test-core\\n \\n  \\n\\n which gave me \\n\\n  \\n     [junit] Testsuite: org.apache.lucene.util.packed.TestPackedInts\\n    [junit] Testcase: testSecondaryBlockChange(org.apache.lucene.util.packed.TestPackedInts):\\tFAILED\\n    [junit] The value #24 should remain unchanged expected:&lt;31&gt; but was:&lt;28&gt;\\n    [junit] junit.framework.AssertionFailedError: The value #24 should remain unchanged expected:&lt;31&gt; but was:&lt;28&gt;\\n    [junit] \\tat org.apache.lucene.util.packed.TestPackedInts.testSecondaryBlockChange(TestPackedInts.java:106)\\n    [junit] \\tat org.apache.lucene.util.LuceneTestCase.runBare(LuceneTestCase.java:276)\\n \\n  \\n\\n then I added \\n\\n  \\n                if  (bitPos &lt;= BLOCK_SIZE - elementBits) {  \\/\\/ Second block not used\\n                 currentMasks[base+1] = ~0;  \\/\\/ Keep all bits\\n                 currentMasks[base+2] = 0;   \\/\\/ Or with 0\\n               }\\n \\n  \\n\\n to the relevant parts of Packed32 and Packed, as described above and ran \\n\\n  \\n ant test-core\\n \\n  \\n\\n again, which gave me \\n\\n  \\n     [junit] Testsuite: org.apache.lucene.util.packed.TestPackedInts\\n    [junit] Tests run: 7, Failures: 0, Errors: 0, Time elapsed: 5.463 sec\\n \\n  \\n\\n My initial unit-test contained an error, which I corrected after a minute or two (as far as I remember). Maybe you used the first version? \\n\\n It seems that the bug is indeed in trunk. It corrupts the value of the block after the current block in certain cases: Sequential assignment of values works fine, but out-of-order assignments corrupts the array.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12854174\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12854174&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12854174\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12854174_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12854174_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'06\\/Apr\\/10 20:46\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-06T20:46:13+0000\'\u003e06\\/Apr\\/10 20:46\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eOK indeed now I can see the failure when I add the test (I guess I did use the first version), and the changes fix it.  I\'ll commit shortly.  Thanks Toke!\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12854174_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12854174_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'06\\/Apr\\/10 20:46\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-06T20:46:13+0000\'\u003e06\\/Apr\\/10 20:46\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    OK indeed now I can see the failure when I add the test (I guess I did use the first version), and the changes fix it.  I\'ll commit shortly.  Thanks Toke!              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12854183\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12854183&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12854183\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12854183_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12854183_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'06\\/Apr\\/10 20:58\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-06T20:58:39+0000\'\u003e06\\/Apr\\/10 20:58\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eThanks Toke!\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12854183_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12854183_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'06\\/Apr\\/10 20:58\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-04-06T20:58:39+0000\'\u003e06\\/Apr\\/10 20:58\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Thanks Toke!              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12904560\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12904560&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12904560\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12904560_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12904560_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Aug\\/10 08:41\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-08-31T08:41:45+0000\'\u003e31\\/Aug\\/10 08:41\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI have discovered a bug in Packed32 and Packed64: When the number of bits exceed 2^31, the setters and getters fail. This is due to a missing cast in the calculation of the entry-point in the backing int\\/long-arrays.\u003c\\/p\u003e\\n\\n\u003cp\u003eIn both Packed32 and Packed64 the line\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e majorBitPos = index * bitsPerValue;\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\u003cp\u003eis used in get as well as set. This should be\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e    \u003cspan class=\\\"code-keyword\\\"\u003efinal\u003c\\/span\u003e \u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e majorBitPos = (\u003cspan class=\\\"code-object\\\"\u003elong\u003c\\/span\u003e)index * bitsPerValue;\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\u003cp\u003ein all 4 cases.\u003c\\/p\u003e\\n\\n\u003cp\u003eA unit test for this is\u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e  \\/*\\n  Check \u003cspan class=\\\"code-keyword\\\"\u003eif\u003c\\/span\u003e the structures properly handle the \u003cspan class=\\\"code-keyword\\\"\u003ecase\u003c\\/span\u003e where\\n  index * bitsPerValue &gt; \u003cspan class=\\\"code-object\\\"\u003eInteger\u003c\\/span\u003e.MAX_VALUE\\n   *\\/\\n  \u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e void testIntOverflow() {\\n    \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e INDEX = (\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e) \u003cspan class=\\\"code-object\\\"\u003eMath\u003c\\/span\u003e.pow(2, 30);\\n    \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e BITS = 4;\\n\\n    Packed32 p32 = \u003cspan class=\\\"code-keyword\\\"\u003enew\u003c\\/span\u003e Packed32(INDEX, BITS);\\n    p32.set(INDEX-1, 1);\\n    assertEquals(\u003cspan class=\\\"code-quote\\\"\u003e\\\"The value at position \\\"\u003c\\/span\u003e + (INDEX-1)\\n        + \u003cspan class=\\\"code-quote\\\"\u003e\\\" should be correct \u003cspan class=\\\"code-keyword\\\"\u003efor\u003c\\/span\u003e Packed32\\\"\u003c\\/span\u003e, 1, p32.get(INDEX-1));\\n    p32 = \u003cspan class=\\\"code-keyword\\\"\u003enull\u003c\\/span\u003e; \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ To free 512MB\\n\u003c\\/span\u003e\\n    Packed64 p64 = \u003cspan class=\\\"code-keyword\\\"\u003enew\u003c\\/span\u003e Packed64(INDEX, BITS);\\n    p64.set(INDEX-1, 1);\\n    assertEquals(\u003cspan class=\\\"code-quote\\\"\u003e\\\"The value at position \\\"\u003c\\/span\u003e + (INDEX-1)\\n        + \u003cspan class=\\\"code-quote\\\"\u003e\\\" should be correct \u003cspan class=\\\"code-keyword\\\"\u003efor\u003c\\/span\u003e Packed64\\\"\u003c\\/span\u003e, 1, p64.get(INDEX-1));\\n  }\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eOne big problem with the unit-test is that it requires 2^30*4\\/8 bytes = 512MB of heap. I am guessing that this makes it impossible to run in the standard test-suite.\u003c\\/p\u003e\\n\\n\u003cp\u003eI am unsure as to how I should push this fix through. Should I create a new JIRA issue? Make a patch against trunk? Or maybe a committer could just try the test above and insert the fix in trunk?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12904560_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12904560_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Aug\\/10 08:41\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-08-31T08:41:45+0000\'\u003e31\\/Aug\\/10 08:41\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I have discovered a bug in Packed32 and Packed64: When the number of bits exceed 2^31, the setters and getters fail. This is due to a missing cast in the calculation of the entry-point in the backing int\\/long-arrays. \\n\\n In both Packed32 and Packed64 the line \\n  \\n      final   long  majorBitPos = index * bitsPerValue;\\n \\n  \\n is used in get as well as set. This should be \\n  \\n      final   long  majorBitPos = ( long )index * bitsPerValue;\\n \\n  \\n in all 4 cases. \\n\\n A unit test for this is \\n  \\n   \\/*\\n  Check  if  the structures properly handle the  case  where\\n  index * bitsPerValue &gt;  Integer .MAX_VALUE\\n   *\\/\\n   public  void testIntOverflow() {\\n     int  INDEX = ( int )  Math .pow(2, 30);\\n     int  BITS = 4;\\n\\n    Packed32 p32 =  new  Packed32(INDEX, BITS);\\n    p32.set(INDEX-1, 1);\\n    assertEquals( \\\"The value at position \\\"  + (INDEX-1)\\n        +  \\\" should be correct  for  Packed32\\\" , 1, p32.get(INDEX-1));\\n    p32 =  null ;  \\/\\/ To free 512MB\\n \\n    Packed64 p64 =  new  Packed64(INDEX, BITS);\\n    p64.set(INDEX-1, 1);\\n    assertEquals( \\\"The value at position \\\"  + (INDEX-1)\\n        +  \\\" should be correct  for  Packed64\\\" , 1, p64.get(INDEX-1));\\n  }\\n \\n  \\n\\n One big problem with the unit-test is that it requires 2^30*4\\/8 bytes = 512MB of heap. I am guessing that this makes it impossible to run in the standard test-suite. \\n\\n I am unsure as to how I should push this fix through. Should I create a new JIRA issue? Make a patch against trunk? Or maybe a committer could just try the test above and insert the fix in trunk?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12904564\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12904564&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12904564\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"simonw\\\" id=\\\"commentauthor_12904564_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=simonw\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"simonw\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Simon Willnauer\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12904564_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Aug\\/10 09:01\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-08-31T09:01:32+0000\'\u003e31\\/Aug\\/10 09:01\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003eOne big problem with the unit-test is that it requires 2^30*4\\/8 bytes = 512MB of heap. I am guessing that this makes it impossible to run in the standard test-suite.\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\u003cp\u003eSeems to be a bit high for a unittest but you can\'t help it, right? \u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/smile.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e\u003c\\/p\u003e\\n\\n\u003cblockquote\u003e\u003cp\u003eI am unsure as to how I should push this fix through. Should I create a new JIRA issue? Make a patch against trunk? Or maybe a committer could just try the test above and insert the fix in trunk?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\u003cp\u003eI would suggest to create a new issue and attach a patch with the fix including your unittest. Since the unittest might break hudson etc I would recommend to add an @Ignore on top of it (JUnit 4) until we decided how to include tests like that. Maybe we might introduce a special flag that enables tests like that with a JUnit Assume call but that needs to be further discussed.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"simonw\\\" id=\\\"commentauthor_12904564_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=simonw\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"simonw\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Simon Willnauer\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12904564_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Aug\\/10 09:01\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-08-31T09:01:32+0000\'\u003e31\\/Aug\\/10 09:01\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     One big problem with the unit-test is that it requires 2^30*4\\/8 bytes = 512MB of heap. I am guessing that this makes it impossible to run in the standard test-suite.  \\n Seems to be a bit high for a unittest but you can\'t help it, right?   \\n\\n  I am unsure as to how I should push this fix through. Should I create a new JIRA issue? Make a patch against trunk? Or maybe a committer could just try the test above and insert the fix in trunk?  \\n I would suggest to create a new issue and attach a patch with the fix including your unittest. Since the unittest might break hudson etc I would recommend to add an @Ignore on top of it (JUnit 4) until we decided how to include tests like that. Maybe we might introduce a special flag that enables tests like that with a JUnit Assume call but that needs to be further discussed.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12904569\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12904569&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12904569\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12904569_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12904569_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Aug\\/10 09:21\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-08-31T09:21:14+0000\'\u003e31\\/Aug\\/10 09:21\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eRemembering signed integer representation, a better test would be \u003c\\/p\u003e\\n\u003cdiv class=\\\"code panel\\\" style=\\\"border-width: 1px;\\\"\u003e\u003cdiv class=\\\"codeContent panelContent\\\"\u003e\\n\u003cpre class=\\\"code-java\\\"\u003e  \\/*\\n  Check \u003cspan class=\\\"code-keyword\\\"\u003eif\u003c\\/span\u003e the structures properly handle the \u003cspan class=\\\"code-keyword\\\"\u003ecase\u003c\\/span\u003e where\\n  index * bitsPerValue &gt; \u003cspan class=\\\"code-object\\\"\u003eInteger\u003c\\/span\u003e.MAX_VALUE\\n   *\\/\\n  \u003cspan class=\\\"code-keyword\\\"\u003epublic\u003c\\/span\u003e void testIntOverflow() {\\n    \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e INDEX = (\u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e)\u003cspan class=\\\"code-object\\\"\u003eMath\u003c\\/span\u003e.pow(2, 30)+1;\\n    \u003cspan class=\\\"code-object\\\"\u003eint\u003c\\/span\u003e BITS = 2;\\n\\n    Packed32 p32 = \u003cspan class=\\\"code-keyword\\\"\u003enew\u003c\\/span\u003e Packed32(INDEX, BITS);\\n    p32.set(INDEX-1, 1);\\n    assertEquals(\u003cspan class=\\\"code-quote\\\"\u003e\\\"The value at position \\\"\u003c\\/span\u003e + (INDEX-1)\\n        + \u003cspan class=\\\"code-quote\\\"\u003e\\\" should be correct \u003cspan class=\\\"code-keyword\\\"\u003efor\u003c\\/span\u003e Packed32\\\"\u003c\\/span\u003e, 1, p32.get(INDEX-1));\\n    p32 = \u003cspan class=\\\"code-keyword\\\"\u003enull\u003c\\/span\u003e; \u003cspan class=\\\"code-comment\\\"\u003e\\/\\/ To free the 256MB used\\n\u003c\\/span\u003e\\n    Packed64 p64 = \u003cspan class=\\\"code-keyword\\\"\u003enew\u003c\\/span\u003e Packed64(INDEX, BITS);\\n    p64.set(INDEX-1, 1);\\n    assertEquals(\u003cspan class=\\\"code-quote\\\"\u003e\\\"The value at position \\\"\u003c\\/span\u003e + (INDEX-1)\\n        + \u003cspan class=\\\"code-quote\\\"\u003e\\\" should be correct \u003cspan class=\\\"code-keyword\\\"\u003efor\u003c\\/span\u003e Packed64\\\"\u003c\\/span\u003e, 1, p64.get(INDEX-1));\\n  }\\n\u003c\\/pre\u003e\\n\u003c\\/div\u003e\u003c\\/div\u003e\\n\\n\u003cp\u003eThis still triggers the bug but requires \\\"only\\\" 256 MB. Is this acceptable in the Hudson environment?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12904569_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12904569_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'31\\/Aug\\/10 09:21\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-08-31T09:21:14+0000\'\u003e31\\/Aug\\/10 09:21\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Remembering signed integer representation, a better test would be  \\n  \\n   \\/*\\n  Check  if  the structures properly handle the  case  where\\n  index * bitsPerValue &gt;  Integer .MAX_VALUE\\n   *\\/\\n   public  void testIntOverflow() {\\n     int  INDEX = ( int ) Math .pow(2, 30)+1;\\n     int  BITS = 2;\\n\\n    Packed32 p32 =  new  Packed32(INDEX, BITS);\\n    p32.set(INDEX-1, 1);\\n    assertEquals( \\\"The value at position \\\"  + (INDEX-1)\\n        +  \\\" should be correct  for  Packed32\\\" , 1, p32.get(INDEX-1));\\n    p32 =  null ;  \\/\\/ To free the 256MB used\\n \\n    Packed64 p64 =  new  Packed64(INDEX, BITS);\\n    p64.set(INDEX-1, 1);\\n    assertEquals( \\\"The value at position \\\"  + (INDEX-1)\\n        +  \\\" should be correct  for  Packed64\\\" , 1, p64.get(INDEX-1));\\n  }\\n \\n  \\n\\n This still triggers the bug but requires \\\"only\\\" 256 MB. Is this acceptable in the Hudson environment?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12904863\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12904863&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12904863\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"rcmuir\\\" id=\\\"commentauthor_12904863_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=rcmuir\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"rcmuir\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Robert Muir\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12904863_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Sep\\/10 01:31\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-09-01T01:31:00+0000\'\u003e01\\/Sep\\/10 01:31\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cblockquote\u003e\u003cp\u003eThis still triggers the bug but requires \\\"only\\\" 256 MB. Is this acceptable in the Hudson environment?\u003c\\/p\u003e\u003c\\/blockquote\u003e\\n\\n\u003cp\u003eThe default maxMemory size is wired at 512MB. i think this might be too large already: on my machine with 4 cpus\u003cbr\\/\u003e\\nthis means max 2GB for lucene and 4GB for solr tests.\u003c\\/p\u003e\\n\\n\u003cp\u003eone way to do this would be to make this maxMemory configurable with a -D, set it accordingly in hudson, and\u003cbr\\/\u003e\\nalso setup a way to write \'hudson-only\' tests. then stuff like this could run in the nightly only.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"rcmuir\\\" id=\\\"commentauthor_12904863_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=rcmuir\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"rcmuir\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Robert Muir\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12904863_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'01\\/Sep\\/10 01:31\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-09-01T01:31:00+0000\'\u003e01\\/Sep\\/10 01:31\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                     This still triggers the bug but requires \\\"only\\\" 256 MB. Is this acceptable in the Hudson environment?  \\n\\n The default maxMemory size is wired at 512MB. i think this might be too large already: on my machine with 4 cpus \\nthis means max 2GB for lucene and 4GB for solr tests. \\n\\n one way to do this would be to make this maxMemory configurable with a -D, set it accordingly in hudson, and \\nalso setup a way to write \'hudson-only\' tests. then stuff like this could run in the nightly only.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12905857\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=12905857&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12905857\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n                                            \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12905857_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12905857_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Sep\\/10 11:26\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-09-03T11:26:54+0000\'\u003e03\\/Sep\\/10 11:26\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e   - \u003cspan class=\\\"redText subText\\\" title=\\\"Toke Eskildsen - 03\\/Sep\\/10 14:16\\\"\u003eedited\u003c\\/span\u003e \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eCorrection: I have created \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-2633\\\" title=\\\"PackedInts does not support structures above 256MB\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-2633\\\"\u003e\u003cdel\u003eLUCENE-2633\u003c\\/del\u003e\u003c\\/a\u003e and uploaded a patch for the issue above.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n                                            \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"toke\\\" id=\\\"commentauthor_12905857_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=toke\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"toke\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Toke Eskildsen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12905857_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Sep\\/10 11:26\'\u003e\u003ctime class=\'livestamp\' datetime=\'2010-09-03T11:26:54+0000\'\u003e03\\/Sep\\/10 11:26\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e   - \u003cspan class=\\\"redText subText\\\" title=\\\"Toke Eskildsen - 03\\/Sep\\/10 14:16\\\"\u003eedited\u003c\\/span\u003e                   Correction: I have created   LUCENE-2633   and uploaded a patch for the issue above.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-13157798\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-1990?focusedCommentId=13157798&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13157798\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"thetaphi\\\" id=\\\"commentauthor_13157798_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=thetaphi\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"thetaphi\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Uwe Schindler\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_13157798_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'27\\/Nov\\/11 12:29\'\u003e\u003ctime class=\'livestamp\' datetime=\'2011-11-27T12:29:33+0000\'\u003e27\\/Nov\\/11 12:29\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eBulk close after release of 3.5\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"thetaphi\\\" id=\\\"commentauthor_13157798_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=thetaphi\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"thetaphi\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Uwe Schindler\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_13157798_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'27\\/Nov\\/11 12:29\'\u003e\u003ctime class=\'livestamp\' datetime=\'2011-11-27T12:29:33+0000\'\u003e27\\/Nov\\/11 12:29\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Bulk close after release of 3.5              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\"";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["scope-filter-data"]="{\"createScopeActions\":[],\"scopes\":[]}";
WRM._unparsedData["sidebar-collapsed-by-default"]="true";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:can-manage"]="false";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:with-icons"]="false";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:shortcuts"]="[]";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:project-id"]="12310110";
WRM._unparsedData["sidebar-id"]="\"\u003cdiv class=\\\"aui-sidebar  projects-sidebar sidebar-pending\\\" \u003e\u003cdiv class=\\\"aui-sidebar-wrapper\\\"\u003e\u003cdiv class=\\\"aui-sidebar-body\\\"\u003e\u003cheader class=\\\"aui-page-header\\\"\u003e\u003cdiv class=\\\"aui-page-header-inner\\\"\u003e\u003cdiv class=\\\"aui-page-header-image\\\"\u003e\u003ca href=\\\"\\/jira\\/projects\\/LUCENE\\/summary\\\" title=\\\"Lucene - Core\\\" class=\\\"jira-project-avatar\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-large aui-avatar-project\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"\\/jira\\/secure\\/projectavatar?pid=12310110&amp;avatarId=10061\\\" alt=\\\"Lucene - Core\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e\u003cimg src=\\\"data:image\\/svg+xml;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI\\/Pg0KPCEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDE4LjEuMSwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgIC0tPg0KPHN2ZyB2ZXJzaW9uPSIxLjEiIGlkPSJMYXllcl8xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4PSIwcHgiIHk9IjBweCINCgkgdmlld0JveD0iMCAwIDMwMCAzMDAiIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMwMCAzMDA7IiB4bWw6c3BhY2U9InByZXNlcnZlIj4NCjxnIGlkPSJMYXllcl8yIj4NCgk8cGF0aCBzdHlsZT0iZmlsbDojRjc5MjMyOyIgZD0iTTE1MCwwQzY2LjY2NywwLDAsNjYuNjY3LDAsMTUwczY2LjY2NywxNTAsMTUwLDE1MHMxNTAtNjYuNjY3LDE1MC0xNTBTMjMzLjMzMywwLDE1MCwweg0KCQkgTTEzNi42NjcsMTc4LjMzM0wxMjUsMTkwbC00MS42NjctNDBMOTUsMTM4LjMzM2wzMC0zMEwxMzYuNjY3LDEyMGwtMzAsMzBMMTM2LjY2NywxNzguMzMzeiBNMjA1LDE2MS42NjdsLTMwLDMwTDE2My4zMzMsMTgwDQoJCWwzMC0zMGwtMzAtMzBMMTc1LDEwOC4zMzNMMjE2LjY2NywxNTBMMjA1LDE2MS42Njd6Ii8+DQo8L2c+DQo8Zz4NCgk8cG9seWdvbiBzdHlsZT0iZmlsbDojRkZGRkZGOyIgcG9pbnRzPSIxNzUsMTkxLjY2NyAyMDUsMTYxLjY2NyAyMTYuNjY3LDE1MCAxNzUsMTA4LjMzMyAxNjMuMzMzLDEyMCAxOTMuMzMzLDE1MCAxNjMuMzMzLDE4MCAJIi8+DQoJPHBvbHlnb24gc3R5bGU9ImZpbGw6I0ZGRkZGRjsiIHBvaW50cz0iMTI1LDEwOC4zMzMgOTUsMTM4LjMzMyA4My4zMzMsMTUwIDEyNSwxOTAgMTM2LjY2NywxNzguMzMzIDEwNi42NjcsMTUwIDEzNi42NjcsMTIwIAkiLz4NCjwvZz4NCjwvc3ZnPg0K\\\" alt=\\\"Icon indicating the project type\\\" class=\\\"jira-project-avatar-icon\\\" \\/\u003e\u003c\\/a\u003e\u003c\\/div\u003e\u003c!-- .aui-page-header-image --\u003e\u003cdiv class=\\\"aui-page-header-main\\\"\u003e\u003ch1\u003e\u003cdiv class=\\\"aui-group aui-group-split\\\"\u003e\u003cdiv class=\\\"aui-item project-title\\\"\u003e\u003ca href=\\\"\\/jira\\/projects\\/LUCENE\\/summary\\\" title=\\\"Lucene - Core\\\"\u003eLucene - Core\u003c\\/a\u003e\u003c\\/div\u003e\u003c\\/div\u003e\u003c\\/h1\u003e\u003c\\/div\u003e\u003c!-- .aui-page-header-main --\u003e\u003c\\/div\u003e\u003c!-- .aui-page-header-inner --\u003e\u003c\\/header\u003e\u003c!-- .aui-page-header --\u003e\u003cnav class=\\\"aui-navgroup aui-navgroup-vertical\\\"\u003e\u003cdiv class=\\\"aui-navgroup-inner sidebar-content-container\\\"\u003e\u003cdiv class=\\\"aui-sidebar-group aui-sidebar-group-tier-one\\\" data-id=\\\"sidebar-navigation-panel\\\"\u003e\u003cul class=\\\"aui-nav\\\"\u003e\u003cli class=\\\"aui-nav-selected\\\" \u003e\u003ca class=\\\"aui-nav-item \\\" href=\\\"\\/jira\\/projects\\/LUCENE\\/issues\\\" data-link-id=\\\"com.atlassian.jira.jira-projects-issue-navigator:sidebar-issue-navigator\\\" \u003e\u003cspan class=\\\"aui-icon aui-icon-large icon-sidebar-issues\\\"\u003e\u003c\\/span\u003e\u003cspan class=\\\"aui-nav-item-label\\\" title=\\\"Issues\\\"\u003eIssues\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/li\u003e\u003cli  \u003e\u003ca class=\\\"aui-nav-item \\\" href=\\\"\\/jira\\/projects\\/LUCENE?selectedItem=com.atlassian.jira.jira-projects-plugin:report-page\\\" data-link-id=\\\"com.atlassian.jira.jira-projects-plugin:report-page\\\" \u003e\u003cspan class=\\\"aui-icon aui-icon-large agile-icon-report\\\"\u003e\u003c\\/span\u003e\u003cspan class=\\\"aui-nav-item-label\\\" title=\\\"Reports\\\"\u003eReports\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/li\u003e\u003cli  \u003e\u003ca class=\\\"aui-nav-item \\\" href=\\\"\\/jira\\/projects\\/LUCENE?selectedItem=com.atlassian.jira.jira-projects-plugin:components-page\\\" data-link-id=\\\"com.atlassian.jira.jira-projects-plugin:components-page\\\" \u003e\u003cspan class=\\\"aui-icon aui-icon-large icon-sidebar-components\\\"\u003e\u003c\\/span\u003e\u003cspan class=\\\"aui-nav-item-label\\\" title=\\\"Components\\\"\u003eComponents\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/li\u003e\u003c\\/ul\u003e\u003c\\/div\u003e\u003c\\/div\u003e\u003c\\/nav\u003e\u003c\\/div\u003e\u003cdiv class=\\\"aui-sidebar-footer\\\"\u003e\u003ca class=\\\"aui-button aui-button-subtle aui-sidebar-toggle aui-sidebar-footer-tipsy\\\" data-tooltip=\\\"Expand sidebar ( [ )\\\" href=\\\"#\\\"\u003e\u003cspan class=\\\"aui-icon aui-icon-small\\\"\u003e\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/div\u003e\u003c\\/div\u003e\u003c\\/div\u003e\"";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:bigpipe-init/jira.webresources:bigpipe-init.js" data-wrm-key="jira.webresources:bigpipe-init" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <form id="jira_request_timing_info" class="dont-default-focus"> 
   <fieldset class="parameters hidden"> 
    <input type="hidden" title="jira.request.start.millis" value="1516202765206"> 
    <input type="hidden" title="jira.request.server.time" value="504"> 
    <input type="hidden" title="jira.request.id" value="926x7689868x7"> 
    <input type="hidden" title="jira.session.expiry.time" value="-"> 
    <input type="hidden" title="jira.session.expiry.in.mins" value="-"> 
    <input id="jiraConcurrentRequests" type="hidden" name="jira.request.concurrent.requests" value="4"> 
    <input type="hidden" title="db.reads.time.in.ms" value="43"> 
    <input type="hidden" title="db.conns.time.in.ms" value="50"> 
   </fieldset> 
  </form> 
  <!--
	                 REQUEST ID : 926x7689868x7
	          REQUEST TIMESTAMP : [17/Jan/2018:15:26:05 +0000]
	               REQUEST TIME : 0.5040
	                 ASESSIONID : -
	        CONCURRENT REQUESTS : 4

	                      db.reads : OpSnapshot{name='db.reads', invocationCount=31, elapsedTotal=43539172, elapsedMin=436319, elapsedMax=12567196, resultSetSize=0, cpuTotal=0, cpuMin=0, cpuMax=0}
	                      db.conns : OpSnapshot{name='db.conns', invocationCount=35, elapsedTotal=50458629, elapsedMin=456741, elapsedMax=12621414, resultSetSize=0, cpuTotal=0, cpuMin=0, cpuMax=0}
-->   
 </body>
</html>