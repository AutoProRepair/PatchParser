<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=Edge"> 
  <meta name="application-name" content="JIRA" data-name="jira" data-version="7.6.3">
  <meta name="ajs-viewissue-use-history-api" content="false"> 
  <meta name="ajs-jira-base-url" content="https://issues.apache.org/jira"> 
  <meta name="ajs-serverRenderedViewIssue" content="true"> 
  <meta name="ajs-dev-mode" content="false"> 
  <meta name="ajs-context-path" content="/jira"> 
  <meta name="ajs-version-number" content="7.6.3"> 
  <meta name="ajs-build-number" content="76005"> 
  <meta name="ajs-is-beta" content="false"> 
  <meta name="ajs-is-rc" content="false"> 
  <meta name="ajs-is-snapshot" content="false"> 
  <meta name="ajs-is-milestone" content="false"> 
  <meta name="ajs-remote-user" content=""> 
  <meta name="ajs-remote-user-fullname" content=""> 
  <meta name="ajs-user-locale" content="en_UK"> 
  <meta name="ajs-user-locale-group-separator" content=","> 
  <meta name="ajs-app-title" content="ASF JIRA"> 
  <meta name="ajs-keyboard-shortcuts-enabled" content="true"> 
  <meta name="ajs-keyboard-accesskey-modifier" content="Ctrl+Alt"> 
  <meta name="ajs-enabled-dark-features" content="[&quot;com.atlassian.jira.agile.darkfeature.editable.detailsview&quot;,&quot;nps.survey.inline.dialog&quot;,&quot;com.atlassian.jira.agile.darkfeature.edit.closed.sprint.enabled&quot;,&quot;jira.plugin.devstatus.phasetwo&quot;,&quot;jira.frother.reporter.field&quot;,&quot;atlassian.rest.xsrf.legacy.enabled&quot;,&quot;jira.issue.status.lozenge&quot;,&quot;com.atlassian.jira.config.BIG_PIPE&quot;,&quot;com.atlassian.jira.projects.issuenavigator&quot;,&quot;com.atlassian.jira.config.PDL&quot;,&quot;jira.plugin.devstatus.phasetwo.enabled&quot;,&quot;atlassian.aui.raphael.disabled&quot;,&quot;app-switcher.new&quot;,&quot;frother.assignee.field&quot;,&quot;com.atlassian.jira.projects.ProjectCentricNavigation.Switch&quot;,&quot;sd.internal.base.off.thread.on.completion.events.enabled&quot;,&quot;jira.onboarding.cyoa&quot;,&quot;com.atlassian.jira.agile.darkfeature.kanplan.enabled&quot;,&quot;sd.slavalue.record.updated.date.enabled&quot;,&quot;com.atlassian.jira.config.ProjectConfig.MENU&quot;,&quot;com.atlassian.jira.projects.sidebar.DEFER_RESOURCES&quot;,&quot;com.atlassian.jira.agile.darkfeature.kanplan.epics.and.versions.enabled&quot;,&quot;com.atlassian.jira.agile.darkfeature.sprint.goal.enabled&quot;,&quot;jira.zdu.admin-updates-ui&quot;,&quot;jira.zdu.jmx-monitoring&quot;,&quot;sd.sla.improved.rendering.enabled&quot;,&quot;sd.canned.responses.enabled&quot;,&quot;sd.new.settings.sidebar.location.disabled&quot;,&quot;jira.zdu.cluster-upgrade-state&quot;,&quot;com.atlassian.jira.agile.darkfeature.splitissue&quot;,&quot;com.atlassian.jira.config.CoreFeatures.LICENSE_ROLES_ENABLED&quot;,&quot;com.atlassian.feedback.feedback-button-move-to-header-enable&quot;,&quot;jira.export.csv.enabled&quot;]"> 
  <meta name="ajs-in-admin-mode" content="false"> 
  <meta name="ajs-is-sysadmin" content="false"> 
  <meta name="ajs-is-admin" content="false"> 
  <meta name="ajs-outgoing-mail-enabled" content="true"> 
  <meta name="ajs-date-relativize" content="true"> 
  <meta name="ajs-date-time" content="HH:mm"> 
  <meta name="ajs-date-day" content="EEEE HH:mm"> 
  <meta name="ajs-date-dmy" content="dd/MMM/yy"> 
  <meta name="ajs-date-complete" content="dd/MMM/yy HH:mm"> 
  <script type="text/javascript">var AJS=AJS||{};AJS.debug=true;</script> 
  <meta id="atlassian-token" name="atlassian-token" content="A5KQ-2QAV-T4JA-FDED|72941a26aa6ca363f6a0ce4ff935cf94a769cedd|lout"> 
  <link rel="shortcut icon" href="/jira/s/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/_/favicon.ico"> 
  <!--[if IE]><![endif]--> 
  <script type="text/javascript">
    (function() {
        var contextPath = '/jira';
        var eventBuffer = [];

        function printDeprecatedMsg() {
            if (console && console.warn) {
                console.warn('DEPRECATED JS - contextPath global variable has been deprecated since 7.4.0. Use `wrm/context-path` module instead.');
            }
        }

        function sendEvent(analytics, postfix) {
            analytics.send({
                name: 'js.globals.contextPath.' + postfix
            });
        }

        function sendDeprecatedEvent(postfix) {
            try {
                var analytics = require('jira/analytics');
                if (eventBuffer.length) {
                    eventBuffer.forEach(function(value) {
                        sendEvent(analytics, value);
                    });
                    eventBuffer = [];
                }

                if (postfix) {
                    sendEvent(analytics, postfix);
                }
            } catch(ex) {
                eventBuffer.push(postfix);
                setTimeout(sendDeprecatedEvent, 1000);
            }
        }

        Object.defineProperty(window, 'contextPath', {
            get: function() {
                printDeprecatedMsg();
                sendDeprecatedEvent('get');
                return contextPath;
            },
            set: function(value) {
                printDeprecatedMsg();
                sendDeprecatedEvent('set');
                contextPath = value;
            }
        });
    })();

</script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.plugins.atlassian-plugins-webresource-plugin:context-path.context-path"]="\"/jira\"";
WRM._unparsedData["jira.webresources:feature-flags.feature-flag-data"]="{\"enabled-feature-keys\":[\"com.atlassian.jira.agile.darkfeature.editable.detailsview\",\"nps.survey.inline.dialog\",\"com.atlassian.jira.agile.darkfeature.edit.closed.sprint.enabled\",\"jira.plugin.devstatus.phasetwo\",\"jira.frother.reporter.field\",\"atlassian.rest.xsrf.legacy.enabled\",\"jira.issue.status.lozenge\",\"com.atlassian.jira.config.BIG_PIPE\",\"com.atlassian.jira.projects.issuenavigator\",\"com.atlassian.jira.config.PDL\",\"jira.plugin.devstatus.phasetwo.enabled\",\"atlassian.aui.raphael.disabled\",\"app-switcher.new\",\"frother.assignee.field\",\"com.atlassian.jira.projects.ProjectCentricNavigation.Switch\",\"sd.internal.base.off.thread.on.completion.events.enabled\",\"jira.onboarding.cyoa\",\"com.atlassian.jira.agile.darkfeature.kanplan.enabled\",\"sd.slavalue.record.updated.date.enabled\",\"com.atlassian.jira.config.ProjectConfig.MENU\",\"com.atlassian.jira.projects.sidebar.DEFER_RESOURCES\",\"com.atlassian.jira.agile.darkfeature.kanplan.epics.and.versions.enabled\",\"com.atlassian.jira.agile.darkfeature.sprint.goal.enabled\",\"jira.zdu.admin-updates-ui\",\"jira.zdu.jmx-monitoring\",\"sd.sla.improved.rendering.enabled\",\"sd.canned.responses.enabled\",\"sd.new.settings.sidebar.location.disabled\",\"jira.zdu.cluster-upgrade-state\",\"com.atlassian.jira.agile.darkfeature.splitissue\",\"com.atlassian.jira.config.CoreFeatures.LICENSE_ROLES_ENABLED\",\"com.atlassian.feedback.feedback-button-move-to-header-enable\",\"jira.export.csv.enabled\"],\"feature-flag-states\":{\"sd.customer.profile.multi.languages\":true,\"sd.customer.portal.transitions\":true,\"sd.customer.portal.transitions.config\":true,\"sd.custom.email.stripping.rules\":false,\"sd.sla.lucene.issue.id.callback.performance\":true,\"sd.new.settings.sidebar.location\":true,\"sd.workload.report.paginator\":true,\"sd.experimental.portal.search.algorithm.default.1\":false,\"sd.customer.portal.help.center.agent.announcement\":true,\"sd.sla.improved.rendering\":false,\"sd.experimental.portal.search.algorithm.default.2\":false,\"sd.customer.feedback.validate.reporter.on.token\":true,\"sd.custom.email.notifications.utf8.csat.star\":true,\"sd.who.create.customers.by.email.setting\":true,\"com.atlassian.jira.issuetable.move.links.hidden\":true,\"jira.renderer.consider.variable.format\":true,\"sd.stats.event.tracking\":true,\"sd.password.helper.dialog\":true,\"sd.canned.responses\":false,\"sd.portal.help.center.customer.signup.secondary.email\":true,\"sd.custom.email.notifications.manage.language\":true,\"sd.use.search.by.permissions\":true,\"sd.slavalue.record.updated.date\":false,\"sd.report.custom.date.range\":false,\"sd.kb.article.helpfulness.report\":false,\"com.atlassian.jira.agile.darkfeature.sprint.goal\":false,\"sd.custom.email.notifications.styling\":true,\"sd.workinghours.new.page.bulldog.1\":false,\"sd.customer.portal.two.step.login\":false,\"sd.automation.psmq.async.executor\":true,\"sd.customer.org.list.page.lazy.search\":true,\"sd.approval.requested.when.handler\":true,\"sd.request.type.field.rest.api.filtering.bugfix\":true,\"sd.automation.then.action.auto.answer.approval\":true,\"com.atlassian.jira.agile.darkfeature.kanplan.epics.and.versions\":false,\"sla.will.only.be.paused.if.they.are.already.started\":true,\"sd.kb.comment.share.stats.collection\":true,\"com.atlassian.jira.upgrade.startup.fix.index\":true,\"sd.customer.orgs.group.participants\":true,\"sd.portal.help.center.customer.signup\":true,\"sd.sla.agent.jql.security.restricted\":true,\"sd.test.feature.flag.x\":true,\"sd.test.feature.flag.y\":false,\"sd.cluster.safe.mail.channel.shutdown\":true,\"sd.email.channel.folders\":false,\"sd.email.analytics.open\":false,\"sd.kb.project.creation.create.link.space\":true,\"sd.workinghours.new.page\":false,\"sd.confluence.anonymous.permission.fix\":true,\"com.atlassian.jira.issuetable.draggable\":true,\"sd.customer.portal.project.agent.announcement\":true,\"sd.automation.audit.log\":true,\"jira.jql.suggestrecentfields\":false,\"sd.canned.responses.check.index.startup\":false,\"sd.new.project.templates\":true,\"sd.custom.email.notifications.custom.rules.simple.ui\":false,\"sd.custom.email.notifications.cut.over\":true,\"sd.dismiss.all.misconfiguration.warnings.setting\":true,\"com.atlassian.jira.agile.darkfeature.optimistic.transitions\":true,\"sd.sla.configurations.export\":true,\"sd.canned.responses.variable.substitution\":true,\"com.atlassian.jira.agile.darkfeature.kanplan\":false,\"sd.internal.base.off.thread.on.completion.events\":false,\"sd.customer.portal.prioties.per.project.fix\":true,\"jira.instrumentation.laas\":false,\"sd.kb.self.service.report\":false,\"sla.improved.request.handling\":true,\"sd.no.schedule.async.upgrade.tasks\":true,\"sd.kb.primary.nav\":true,\"com.atlassian.jira.agile.darkfeature.edit.closed.sprint\":false,\"sd.kb.issueview.panel.phase2\":true,\"sd.email.outsider.comments\":true,\"jira.create.linked.issue\":true,\"sd.kb.issueview.panel\":true,\"jira.sal.host.connect.accessor.existing.transaction.will.create.transactions\":true,\"sd.approvals.light.weight\":false,\"sd.automation.then.webhook\":true,\"sd.respect.inline.edit.issue.off\":true,\"jira.jql.smartautoselectfirst\":false,\"sd.global.portal.search.atlassian.only.tracking\":false,\"sd.automation.if.condition.comment.primary.action\":true,\"jira.priorities.per.project\":true,\"sd.inline.noformat.renderer\":true,\"sd.customer.request.type.create.edit.screens\":true}}";
WRM._unparsedData["jira.webresources:default-comment-security-level.DefaultCommentSecurityLevelHelpLink"]="{\"extraClasses\":\"default-comment-level-help\",\"title\":\"Commenting on an Issue\",\"url\":\"https://docs.atlassian.com/jira/jcore-docs-076/Editing+and+collaborating+on+issues#Editingandcollaboratingonissues-restrictacomment\",\"isLocal\":false}";
WRM._unparsedData["jira.webresources:dateFormatProvider.allFormats"]="{\"dateFormats\":{\"meridiem\":[\"AM\",\"PM\"],\"eras\":[\"BC\",\"AD\"],\"months\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"monthsShort\":[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"weekdaysShort\":[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],\"weekdays\":[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]},\"lookAndFeelFormats\":{\"relativize\":\"true\",\"time\":\"HH:mm\",\"day\":\"EEEE HH:mm\",\"dmy\":\"dd/MMM/yy\",\"complete\":\"dd/MMM/yy HH:mm\"}}";
WRM._unparsedData["com.atlassian.jira.jira-issue-nav-components:issueviewer.features"]="{\"rteEnabled\":true}";
WRM._unparsedData["com.atlassian.jira.plugins.jira-dnd-attachment-plugin:dnd-issue-drop-zone.thumbnail-mime-types"]="\"image/png,image/vnd.wap.wbmp,image/x-png,image/jpeg,image/bmp,image/gif\"";
WRM._unparsedData["com.atlassian.jira.plugins.jira-dnd-attachment-plugin:dnd-issue-drop-zone.upload-limit"]="\"62914560\"";
WRM._unparsedData["com.atlassian.plugins.helptips.jira-help-tips:help-tip-manager.JiraHelpTipData"]="{\"anonymous\":true}";
WRM._unparsedData["com.atlassian.jira.jira-view-issue-plugin:controller-subtasks.controller.subtasks.parameters"]="{\"url\":\"/rest/api/2/issue/{issueId}/subtask/move\"}";
WRM._unparsedData["com.atlassian.analytics.analytics-client:policy-update-init.policy-update-data-provider"]="false";
WRM._unparsedData["com.atlassian.analytics.analytics-client:programmatic-analytics-init.programmatic-analytics-data-provider"]="false";
WRM._unparsedData["com.atlassian.servicedesk.servicedesk-canned-responses-plugin:canned-responses-data-provider.data"]="{\"substitutionVariables\":{\"issue.summary\":\"Issue summary\",\"issue.description\":\"Issue description\",\"issue.key\":\"Issue key\",\"issue.reporter.name\":\"Issue reporter\",\"issue.resolution\":\"Issue resolution\",\"request.url\":\"Request URL\",\"request.status\":\"Request status\"}}";
WRM._unparsedData["jira.webresources:avatar-picker.data"]="{}";
WRM._unparsedData["com.atlassian.feedback.jira-feedback-plugin:button-resources-init.data"]="{\"jira.feedback.plugin.issue.collector.core\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-UK&collectorId=abbf546d\",\"jira.feedback.plugin.issue.collector.default\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-UK&collectorId=abbf546d\",\"jira.feedback.plugin.issue.collector.service.desk\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector.js?locale=en-UK&collectorId=a698db21\",\"jira.feedback.plugin.issue.collector.software\":\"https://jira.atlassian.com/s/576e9ab86257d4f65f6ea5b6dd50de44-T/en_UK3ljiw5/71006/b6b48b2829824b869586ac216d119363/2.0.11/_/download/batch/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs/com.atlassian.jira.collector.plugin.jira-issue-collector-plugin:issuecollector-embededjs.js?locale=en-UK&collectorId=abbf546d\",\"isHeaderFeedbackButtonEnabled\":true}";
WRM._unparsedData["com.atlassian.jira.jira-header-plugin:dismissedFlags.flags"]="{\"dismissed\":[]}";
WRM._unparsedData["com.atlassian.jira.jira-header-plugin:newsletter-signup-tip-init.newsletterSignup"]="{\"signupDescription\":\"Get updates, inspiration and best practices from the team behind JIRA.\",\"formUrl\":\"https://www.atlassian.com/apis/exact-target/{0}/subscribe?mailingListId=1401671\",\"signupTitle\":\"Sign up!\",\"signupId\":\"newsletter-signup-tip\",\"showNewsletterTip\":false}";
WRM._unparsedData["com.atlassian.jira.project-templates-plugin:project-templates-plugin-resources.ptAnalyticsData"]="{\"instanceCreatedDate\":\"2011-01-31\"}";
WRM._unparsedData["com.atlassian.servicedesk.core-ui:util-help-links.help-links"]="{\"help\":{\"email.settings\":\"https://docs.atlassian.com/jira/jsd-docs-039/Receiving+requests+by+email\",\"managing.queues\":\"https://docs.atlassian.com/jira/jsd-docs-039/Setting+up+queues+for+your+team\",\"email.setup\":\"https://docs.atlassian.com/jira/jsd-docs-039/Receiving+requests+by+email\",\"request.settings.help.bubble\":\"https://docs.atlassian.com/jira/jsd-docs-039/Managing+access+to+your+service+desk\",\"email.settings.suitablerequest\":\"https://docs.atlassian.com/jira/jsd-docs-039/Receiving+requests+by+email#Receivingrequestsbyemail-suitablerequest\",\"sla.import.help\":\"https://docs.atlassian.com/jira/jsd-docs-039/Importing+SLAs\",\"documentation.home\":\"https://docs.atlassian.com/jira/jsd-docs-039/JIRA+Service+Desk+Documentation\",\"default\":\"https://docs.atlassian.com/jira/jsd-docs-039/\",\"create.space.help\":\"https://docs.atlassian.com/jira/jsd-docs-039/Serving+customers+with+a+knowledge+base#serving-customers-with-a-knowledge-base-createpermission\",\"email.settings.troubleshooting\":\"https://docs.atlassian.com/jira/jsd-docs-039/Troubleshooting+issues+with+the+email+channel\",\"admin.notifications.config\":\"https://docs.atlassian.com/jira/jsd-docs-039/Managing+service+desk+notifications\",\"troubleshoot.requesttype\":\"https://docs.atlassian.com/jira/jsd-docs-039/Troubleshooting+issues+with+request+types\",\"approvals.configuration\":\"https://docs.atlassian.com/jira/jsd-docs-039/Configuring+JIRA+Service+Desk+approvals\",\"setting.up.reports\":\"https://docs.atlassian.com/jira/jsd-docs-039/Setting+up+service+desk+reports\",\"public.signup\":\"https://docs.atlassian.com/jira/jsd-docs-039/Configuring+public+signup\",\"knowledge.base\":\"https://docs.atlassian.com/jira/jsd-docs-039/Serving+customers+with+a+knowledge+base\",\"resolve.permission.scheme.errors\":\"https://docs.atlassian.com/jira/jsd-docs-039/Resolving+permission+scheme+errors\",\"getting.started\":\"https://docs.atlassian.com/jira/jsd-docs-039/Getting+started+with+JIRA+Service+Desk\",\"getting.started.agent\":\"https://docs.atlassian.com/jira/jsd-docs-039/Getting+started+for+service+desk+agents\",\"invite.customers\":\"https://docs.atlassian.com/jira/jsd-docs-039/Managing+access+to+your+service+desk\"},\"kb\":{\"default\":\"https://confluence.atlassian.com/display/SDKB/\",\"troubleshooting.user.management.issues\":\"https://confluence.atlassian.com/display/SDKB/Troubleshooting+issues+with+service+desk+user+management\",\"legacytransition\":\"https://confluence.atlassian.com/display/SDKB/Replacing+legacy+automatic+transitions+with+automation+rules\",\"umtroubleshoot\":\"https://confluence.atlassian.com/display/SDKB/Troubleshooting+issues+with+service+desk+user+management\"}}";
WRM._unparsedData["com.atlassian.servicedesk.core-ui:util-base-url.base-url"]="\"https://issues.apache.org/jira\"";
WRM._unparsedData["com.atlassian.jira.plugins.jira-wiki-editor:wiki-editor-resources.help-data"]="{\"showHelp\":true,\"editorDocumentationUrl\":[\"https://docs.atlassian.com/jira/jcore-docs-076/Visual+editing\"],\"editorDocumentationTitle\":[\"Show me documentation for the visual editor\"]}";
WRM._unparsedData["com.atlassian.jira.plugins.jira-wiki-editor:wiki-editor-resources.thumbnails-allowed"]="false";
WRM._unparsedData["jira.webresources:user-message-flags.adminLockout"]="{}";
WRM._unparsedData["jira.request.correlation-id"]="\"5a8fd3f22f4f57\"";
WRM._unparsedData["project-id"]="12310110";
WRM._unparsedData["project-key"]="\"LUCENE\"";
WRM._unparsedData["project-name"]="\"Lucene - Core\"";
WRM._unparsedData["project-type"]="\"software\"";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:generic-filters"]="[{\"id\":\"allissues\",\"jql\":\"project = \\\"{0}\\\" ORDER BY {1}\",\"defaultOrderby\":\"created DESC\",\"label\":\"All issues\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[]},{\"id\":\"allopenissues\",\"jql\":\"project = \\\"{0}\\\" AND resolution = Unresolved ORDER BY {1}\",\"defaultOrderby\":\"priority DESC, updated DESC\",\"label\":\"Open issues\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"resolution\"]},{\"id\":\"doneissues\",\"jql\":\"project = \\\"{0}\\\" AND statusCategory = Done ORDER BY {1}\",\"defaultOrderby\":\"updated DESC\",\"label\":\"Done issues\",\"requiresUser\":false,\"supportsInlineIssueCreate\":false,\"fields\":[\"status\"]},{\"id\":\"recentlyviewed\",\"jql\":\"project = \\\"{0}\\\" AND issuekey in issueHistory() ORDER BY {1}\",\"defaultOrderby\":\"lastViewed DESC\",\"label\":\"Viewed recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"issuekey\"]},{\"id\":\"addedrecently\",\"jql\":\"project = \\\"{0}\\\" AND created \u003e= -1w ORDER BY {1}\",\"defaultOrderby\":\"created DESC\",\"label\":\"Created recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"created\"]},{\"id\":\"resolvedrecently\",\"jql\":\"project = \\\"{0}\\\" AND resolutiondate \u003e= -1w ORDER BY {1}\",\"defaultOrderby\":\"updated DESC\",\"label\":\"Resolved recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":false,\"fields\":[\"resolutiondate\"]},{\"id\":\"updatedrecently\",\"jql\":\"project = \\\"{0}\\\" AND updated \u003e= -1w ORDER BY {1}\",\"defaultOrderby\":\"updated DESC\",\"label\":\"Updated recently\",\"requiresUser\":false,\"supportsInlineIssueCreate\":true,\"fields\":[\"updated\"]}]";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:default-filter-priority"]="[\"allopenissues\",\"allissues\"]";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:can-manage-filters"]="false";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:project-filters"]="[]";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:can-create-issues"]="false";
WRM._unparsedData["projectId"]="12310110";
WRM._unparsedData["projectKey"]="\"LUCENE\"";
WRM._unparsedData["projectType"]="\"software\"";
WRM._unparsedData["com.atlassian.jira.jira-projects-issue-navigator:server-rendered"]="true";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <link type="text/css" rel="stylesheet" href="/jira/s/a8a4711bc3f2eb261d8c8fd9fbcbba8b-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1fca1750044f2777c977e8d8cc023344/_/download/contextbatch/css/_super/batch.css" data-wrm-key="_super" data-wrm-batch-type="context" media="all"> 
  <link type="text/css" rel="stylesheet" href="/jira/s/1a6b21131945f6f49ff48336b49ca3fe-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/37a6e594cbbfd462a8a54d5aa11475c1/_/download/contextbatch/css/project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super/batch.css?agile_global_admin_condition=true&amp;hc-enabled=true&amp;is-server-instance=true&amp;jag=true&amp;jira.create.linked.issue=true&amp;nps-acknowledged=true&amp;richediton=true&amp;sd_operational=true" data-wrm-key="project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super" data-wrm-batch-type="context" media="all"> 
  <link type="text/css" rel="stylesheet" href="/jira/s/611672383f6cab00ab202241ba6f9d68-T/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/7.6.3/_/download/batch/com.atlassian.feedback.jira-feedback-plugin:button-resources-init/com.atlassian.feedback.jira-feedback-plugin:button-resources-init.css" data-wrm-key="com.atlassian.feedback.jira-feedback-plugin:button-resources-init" data-wrm-batch-type="resource" media="all"> 
  <script type="text/javascript" src="/jira/s/d8484c9183f546511a8e336a8779bcd9-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1fca1750044f2777c977e8d8cc023344/_/download/contextbatch/js/_super/batch.js?locale=en-UK" data-wrm-key="_super" data-wrm-batch-type="context" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d3b35d835f8f46fc3b53bb4db7f85158-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/37a6e594cbbfd462a8a54d5aa11475c1/_/download/contextbatch/js/project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super/batch.js?agile_global_admin_condition=true&amp;hc-enabled=true&amp;is-server-instance=true&amp;jag=true&amp;jira.create.linked.issue=true&amp;locale=en-UK&amp;nps-acknowledged=true&amp;richediton=true&amp;sd_operational=true" data-wrm-key="project.issue.navigator,jira.view.issue,jira.global,atl.general,jira.general,-_super" data-wrm-batch-type="context" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/71d42e74136d842a3ef4d5d136484843-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/871d45c9f322a22cb3aa9b7948a69803/_/download/contextbatch/js/atl.global,-_super/batch.js?locale=en-UK" data-wrm-key="atl.global,-_super" data-wrm-batch-type="context" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:calendar-en/jira.webresources:calendar-en.js" data-wrm-key="jira.webresources:calendar-en" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:calendar-localisation-moment/jira.webresources:calendar-localisation-moment.js" data-wrm-key="jira.webresources:calendar-localisation-moment" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/7.6.3/_/download/batch/com.atlassian.feedback.jira-feedback-plugin:button-resources/com.atlassian.feedback.jira-feedback-plugin:button-resources.js" data-wrm-key="com.atlassian.feedback.jira-feedback-plugin:button-resources" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <link type="text/css" rel="stylesheet" href="/jira/s/95a4826c265852f4904f1e0e7300df68-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/e0de73613a1027de08f3da6a45e1d1a2/_/download/contextbatch/css/jira.global.look-and-feel,-_super/batch.css" data-wrm-key="jira.global.look-and-feel,-_super" data-wrm-batch-type="context" media="all"> 
  <script type="text/javascript" src="/jira/rest/api/1.0/shortcuts/76005/944bb39eced1b35cfc7194aa02eb5a5a/shortcuts.js?context=issuenavigation&amp;context=issueaction"></script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.jira.jira-issue-nav-components:inline-edit-enabled"]="true";
WRM._unparsedData["should-display-chaperone"]="false";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <link type="text/css" rel="stylesheet" href="/jira/s/15712b600e9aecf72ffd9fd3704a0c78-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/6b22a15c7b83f87a47b1757076f43542/_/download/contextbatch/css/com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue/batch.css?jira.create.linked.issue=true&amp;richediton=true&amp;sd_operational=true" data-wrm-key="com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue" data-wrm-batch-type="context" media="all"> 
  <script type="text/javascript" src="/jira/s/5a8f0f8b8aa8f96a4f0f7e9e248d62f3-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/6b22a15c7b83f87a47b1757076f43542/_/download/contextbatch/js/com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue/batch.js?jira.create.linked.issue=true&amp;locale=en-UK&amp;richediton=true&amp;sd_operational=true" data-wrm-key="com.atlassian.jira.projects.sidebar.init,-_super,-project.issue.navigator,-jira.view.issue" data-wrm-batch-type="context" data-initially-rendered></script> 
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="ajs-can-search-users" content="false"> 
  <meta name="ajs-can-edit-watchers" content="false"> 
  <meta name="ajs-default-avatar-url" content="https://issues.apache.org/jira/secure/useravatar?size=xsmall&amp;avatarId=10453"> 
  <meta name="ajs-issue-project-type" content="software"> 
  <meta name="ajs-issue-key" content="LUCENE-843"> 
  <meta name="ajs-server-view-issue-is-editable" content="false"> 
  <title>[LUCENE-843] improve how IndexWriter uses RAM to buffer added documents - ASF JIRA</title> 
  <link rel="search" type="application/opensearchdescription+xml" href="/jira/osd.jsp" title="[LUCENE-843] improve how IndexWriter uses RAM to buffer added documents - ASF JIRA"> 
 </head> 
 <body id="jira" class="aui-layout aui-theme-default " data-version="7.6.3"> 
  <div id="page"> 
   <header id="header" role="banner"> 
    <script>
require(["jquery", "jira/license-banner"], function ($, licenseBanner) {
    $(function () {
        licenseBanner.showLicenseBanner("");
        licenseBanner.showLicenseFlag("");
    });
});
</script> 
    <nav class="aui-header aui-dropdown2-trigger-group" role="navigation">
     <div class="aui-header-inner">
      <div class="aui-header-before">
       <a class=" aui-dropdown2-trigger app-switcher-trigger" aria-controls="app-switcher" aria-haspopup="true" role="button" tabindex="0" data-aui-trigger href="#app-switcher"><span class="aui-icon aui-icon-small aui-iconfont-appswitcher">Linked Applications</span></a>
       <div id="app-switcher" class="aui-dropdown2 aui-style-default" role="menu" aria-hidden="true" data-is-switcher="true" data-environment="{&quot;isUserAdmin&quot;:false,&quot;isAppSuggestionAvailable&quot;:false,&quot;isSiteAdminUser&quot;:false}">
        <div role="application">
         <div class="app-switcher-loading">
          Loading…
         </div>
        </div>
       </div>
      </div>
      <div class="aui-header-primary">
       <h1 id="logo" class="aui-header-logo aui-header-logo-custom"><a href="https://issues.apache.org/jira/secure/MyJiraHome.jspa"><img src="/jira/s/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/_/jira-logo-scaled.png" alt="ASF JIRA"></a></h1>
       <ul class="aui-nav">
        <li><a href="/jira/secure/Dashboard.jspa" class=" aui-nav-link aui-dropdown2-trigger aui-dropdown2-ajax" id="home_link" aria-haspopup="true" aria-controls="home_link-content" title="View and manage your dashboards" accesskey="d">Dashboards</a>
         <div class="aui-dropdown2 aui-style-default" id="home_link-content" data-aui-dropdown2-ajax-key="home_link"></div></li>
        <li><a href="/jira/browse/LUCENE" class=" aui-nav-link aui-dropdown2-trigger aui-dropdown2-ajax" id="browse_link" aria-haspopup="true" aria-controls="browse_link-content" title="View recent projects and browse a list of projects" accesskey="p">Projects</a>
         <div class="aui-dropdown2 aui-style-default" id="browse_link-content" data-aui-dropdown2-ajax-key="browse_link"></div></li>
        <li><a href="/jira/issues/" class=" aui-nav-link aui-dropdown2-trigger aui-dropdown2-ajax" id="find_link" aria-haspopup="true" aria-controls="find_link-content" title="Search for issues and view recent issues" accesskey="i">Issues</a>
         <div class="aui-dropdown2 aui-style-default" id="find_link-content" data-aui-dropdown2-ajax-key="find_link"></div></li> 
       </ul>
      </div>
      <div class="aui-header-secondary">
       <ul class="aui-nav">
        <li id="quicksearch-menu"> 
         <form action="/jira/secure/QuickSearch.jspa" method="get" id="quicksearch" class="aui-quicksearch dont-default-focus ajs-dirty-warning-exempt"> 
          <input id="quickSearchInput" class="search" type="text" title="Search" placeholder="Search" name="searchString" accessKey="q"> 
          <input type="submit" class="hidden" value="Search"> 
         </form> </li> 
        <li><a class="jira-feedback-plugin" role="button" aria-haspopup="true" id="jira-header-feedback-link" href="#"><span class="aui-icon aui-icon-small jira-feedback-plugin-icon">Give feedback to Atlassian</span></a></li> 
        <li id="system-help-menu"> <a class="aui-nav-link aui-dropdown2-trigger" id="help_menu" aria-haspopup="true" aria-owns="system-help-menu-content" href="https://docs.atlassian.com/jira/jcore-docs-076/" target="$textUtils.htmlEncode($rootHelpMenuItem.params.target)" title="Help"><span class="aui-icon aui-icon-small aui-iconfont-help">Help</span></a> 
         <div id="system-help-menu-content" class="aui-dropdown2 aui-style-default"> 
          <div class="aui-dropdown2-section"> 
           <ul id="jira-help" class="aui-list-truncate"> 
            <li> <a id="view_core_help" class="aui-nav-link " title="Go to the online documentation for JIRA Core" href="https://docs.atlassian.com/jira/jcore-docs-076/" target="_blank">JIRA Core help</a> </li> 
            <li> <a id="keyshortscuthelp" class="aui-nav-link " title="Get more information about JIRA's Keyboard Shortcuts" href="/jira/secure/ViewKeyboardShortcuts!default.jspa" target="_blank">Keyboard Shortcuts</a> </li> 
            <li> <a id="view_about" class="aui-nav-link " title="Get more information about JIRA" href="/jira/secure/AboutPage.jspa">About JIRA</a> </li> 
            <li> <a id="view_credits" class="aui-nav-link " title="See who did what" href="/jira/secure/JiraCreditsPage!default.jspa" target="_blank">JIRA Credits</a> </li> 
           </ul> 
          </div> 
         </div> </li> 
        <li id="user-options"> <a class="aui-nav-link login-link" href="/jira/login.jsp?os_destination=%2Fbrowse%2FLUCENE-843">Log In</a> 
         <div id="user-options-content" class="aui-dropdown2 aui-style-default"> 
          <div class="aui-dropdown2-section"> 
          </div> 
         </div> </li> 
       </ul>
      </div>
     </div>
     <!-- .aui-header-inner-->
    </nav>
    <!-- .aui-header --> 
   </header> 
   <section id="content" role="main"> 
    <big-pipe data-id="sidebar-id" unresolved></big-pipe>
    <div class="aui-sidebar  sidebar-placeholder">
     <div class="aui-sidebar-wrapper">
      <div class="aui-sidebar-body"></div>
      <div class="aui-sidebar-footer">
       <a class="aui-button aui-button-subtle aui-sidebar-toggle aui-sidebar-footer-tipsy" data-tooltip="Expand sidebar ( [ )" href="#"><span class="aui-icon aui-icon-small"></span></a>
      </div>
     </div>
    </div>
    <script id="projects-sidebar-init">
    require(['jira/projects/sidebar/expansion-manager'], function(expansionManager) {
        var scriptTag = document.getElementById('projects-sidebar-init');
        var sidebar = AJS.sidebar('.aui-sidebar');
        expansionManager(sidebar);
        scriptTag.parentElement.removeChild(scriptTag);
    });
    </script>
    <div class="aui-page-panel">
     <div class="aui-page-panel-inner">
      <div class="issue-navigator">
       <div class="content">
        <div class="issue-view">
         <div class="navigation-tools">
          <div class="pager-container"></div>
         </div>
         <div class="issue-container">
          <div id="issue-content" class="issue-edit-form">
           <header id="stalker" class="issue-header js-stalker">
            <div class="issue-header-content">
             <header class="aui-page-header">
              <div class="aui-page-header-inner">
               <div class="aui-page-header-image">
                <span id="12310110" class="aui-avatar aui-avatar-large aui-avatar-project"><span class="aui-avatar-inner"><img id="project-avatar" alt="Uploaded image for project: 'Lucene - Core'" src="https://issues.apache.org/jira/secure/projectavatar?pid=12310110&amp;avatarId=10061"></span></span>
               </div>
               <!-- .aui-page-header-image -->
               <div class="aui-page-header-main">
                <ol class="aui-nav aui-nav-breadcrumbs">
                 <li><a id="project-name-val" href="/jira/browse/LUCENE">Lucene - Core</a></li>
                 <li><a class="issue-link" data-issue-key="LUCENE-843" href="/jira/browse/LUCENE-843" id="key-val" rel="12365595">LUCENE-843</a></li>
                </ol>
                <h1 id="summary-val">improve how IndexWriter uses RAM to buffer added documents</h1>
               </div>
               <!-- .aui-page-header-main -->
               <div class="aui-page-header-actions">
                <div id="issue-header-pager"></div>
               </div>
               <!-- .aui-page-header-actions -->
              </div>
              <!-- .aui-page-header-inner -->
             </header>
             <!-- .aui-page-header -->
             <div class="command-bar">
              <div class="ops-cont">
               <div class="ops-menus aui-toolbar">
                <div class="toolbar-split toolbar-split-left">
                 <ul id="opsbar-ops-login-lnk_container" class="toolbar-group pluggable-ops">
                  <li class="toolbar-item"><a id="ops-login-lnk" title="Log In" class="toolbar-trigger" href="/jira/login.jsp?os_destination=%2Fbrowse%2FLUCENE-843"><span class="trigger-label">Log In</span></a></li>
                 </ul>
                 <ul id="opsbar-opsbar-operations" class="toolbar-group pluggable-ops"></ul>
                 <ul id="opsbar-opsbar-transitions" class="toolbar-group pluggable-ops"></ul>
                 <ul id="opsbar-opsbar-admin" class="toolbar-group pluggable-ops"></ul>
                </div>
                <div class="toolbar-split toolbar-split-right">
                 <ul id="opsbar-jira.issue.tools" class="toolbar-group pluggable-ops">
                  <li class="toolbar-item">
                   <div>
                    <a href="#" id="viewissue-export" aria-owns="viewissue-export_drop" aria-haspopup="true" title="Export this issue in another format" class="toolbar-trigger aui-button aui-style-default aui-dropdown2-trigger"><span class="icon icon-default aui-icon aui-icon-small aui-iconfont-export"></span> <span class="dropdown-text">Export</span></a>
                    <div id="viewissue-export_drop" class="aui-style-default aui-dropdown2">
                     <ul>
                      <li class="aui-list-item"><a href="/jira/si/jira.issueviews:issue-xml/LUCENE-843/LUCENE-843.xml" id="jira.issueviews:issue-xml"><span class="trigger-label">XML</span></a></li>
                      <li class="aui-list-item"><a href="/jira/si/jira.issueviews:issue-word/LUCENE-843/LUCENE-843.doc" id="jira.issueviews:issue-word"><span class="trigger-label">Word</span></a></li>
                      <li class="aui-list-item"><a href="/jira/si/jira.issueviews:issue-html/LUCENE-843/LUCENE-843.html" id="jira.issueviews:issue-html"><span class="trigger-label">Printable</span></a></li>
                      <li class="aui-list-item"><a href="/jira/si/com.atlassian.jira.plugins.jira-importers-plugin:issue-json/LUCENE-843/LUCENE-843.json" id="com.atlassian.jira.plugins.jira-importers-plugin:issue-json"><span class="trigger-label">JSON</span></a></li>
                     </ul>
                    </div>
                   </div></li>
                 </ul>
                </div>
               </div>
              </div>
             </div>
            </div>
           </header>
           <div class="issue-body-content">
            <div class="aui-group issue-body">
             <div class="aui-item issue-main-column">
              <div id="details-module" class="module toggle-wrap">
               <div id="details-module_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Details</h2>
               </div>
               <div class="mod-content"> 
                <ul id="issuedetails" class="property-list two-cols"> 
                 <li class="item"> 
                  <div class="wrap"> 
                   <strong class="name">Type:</strong> 
                   <span id="type-val" class="value"> <img alt="" height="16" src="/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype" title="Improvement - An improvement or enhancement to an existing feature or task." width="16"> Improvement </span> 
                  </div> </li> 
                 <li class="item item-right"> 
                  <div class="wrap"> 
                   <strong class="name">Status:</strong> 
                   <span id="status-val" class="value"> <span class=" jira-issue-status-lozenge aui-lozenge jira-issue-status-lozenge-green jira-issue-status-lozenge-done jira-issue-status-lozenge-max-width-medium" data-tooltip="<span class=&quot;jira-issue-status-tooltip-title&quot;>Closed</span><br><span class=&quot;jira-issue-status-tooltip-desc&quot;>The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.</span>">Closed</span> </span> 
                  </div> </li> 
                 <li class="item new"> 
                  <div class="wrap"> 
                   <strong class="name">Priority:</strong> 
                   <span id="priority-val" class="value"> <img alt="" height="16" src="/jira/images/icons/priorities/minor.svg" title="Minor - Minor loss of function, or other problem where easy workaround is present." width="16"> Minor </span> 
                  </div> </li> 
                 <li class="item item-right"> 
                  <div class="wrap"> 
                   <strong class="name">Resolution:</strong> 
                   <span id="resolution-val" class="value resolved"> Fixed </span> 
                  </div> </li> 
                 <li class="item"> 
                  <div class="wrap"> 
                   <strong class="name">Affects Version/s:</strong> 
                   <span id="versions-val" class="value"> <span class="shorten" id="versions-field"> <span title="2.2 ">2.2</span> </span> </span> 
                  </div> </li> 
                 <li class="item item-right"> 
                  <div class="wrap"> 
                   <strong class="name">Fix Version/s:</strong> 
                   <span id="fixfor-val" class="value"> <span class="shorten" id="fixVersions-field"> <a href="/jira/issues/?jql=project+%3D+LUCENE+AND+fixVersion+%3D+2.3" title="2.3 ">2.3</a> </span> </span> 
                  </div> </li> 
                 <li class="item"> 
                  <div class="wrap"> 
                   <strong class="name">Component/s:</strong> 
                   <span id="components-val" class="value"> <span class="shorten" id="components-field"> <a href="/jira/issues/?jql=project+%3D+LUCENE+AND+component+%3D+%22core%2Findex%22" title="core/index issues with indexing code">core/index</a> </span> </span> 
                  </div> </li> 
                 <li class="item full-width"> 
                  <div class="wrap" id="wrap-labels"> 
                   <strong class="name">Labels:</strong> 
                   <div class="labels-wrap value"> 
                    <span class="labels" id="labels-12365595-value">None</span> 
                   </div> 
                  </div> </li> 
                </ul> 
                <div id="customfieldmodule"> 
                 <div class="aui-tabs horizontal-tabs" id="customfield-tabs"> 
                  <div id="customfield-panel-1" class="tabs-pane active-pane"> 
                   <ul class="property-list"> 
                    <li id="rowForcustomfield_12310120" class="item"> 
                     <div class="wrap"> 
                      <strong title="Lucene Fields" class="name">Lucene Fields:</strong> 
                      <div id="customfield_12310120-val" class="value type-multicheckboxes" data-fieldtype="multicheckboxes" data-fieldtypecompletekey="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes"> 
                       <div class="shorten" id="customfield_12310120-field"> 
                        <span>New</span>, 
                        <span>Patch Available</span> 
                       </div> 
                      </div> 
                     </div> </li> 
                   </ul> 
                  </div> 
                 </div>
                </div> 
               </div>
              </div>
              <div id="descriptionmodule" class="module toggle-wrap">
               <div id="descriptionmodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Description</h2>
               </div>
               <div class="mod-content">
                <div id="description-val" class="field-ignore-highlight"> 
                 <div class="user-content-block"> 
                  <p>I'm working on a new class (MultiDocumentWriter) that writes more than<br> one document directly into a single Lucene segment, more efficiently<br> than the current approach.</p> 
                  <p>This only affects the creation of an initial segment from added<br> documents. I haven't changed anything after that, eg how segments are<br> merged.</p> 
                  <p>The basic ideas are:</p> 
                  <ul> 
                   <li>Write stored fields and term vectors directly to disk (don't<br> use up RAM for these).</li> 
                  </ul> 
                  <ul> 
                   <li>Gather posting lists &amp; term infos in RAM, but periodically do<br> in-RAM merges. Once RAM is full, flush buffers to disk (and<br> merge them later when it's time to make a real segment).</li> 
                  </ul> 
                  <ul> 
                   <li>Recycle objects/buffers to reduce time/stress in GC.</li> 
                  </ul> 
                  <ul> 
                   <li>Other various optimizations.</li> 
                  </ul> 
                  <p>Some of these changes are similar to how KinoSearch builds a segment.<br> But, I haven't made any changes to Lucene's file format nor added<br> requirements for a global fields schema.</p> 
                  <p>So far the only externally visible change is a new method<br> "setRAMBufferSize" in IndexWriter (and setMaxBufferedDocs is<br> deprecated) so that it flushes according to RAM usage and not a fixed<br> number documents added.</p> 
                 </div> 
                </div> 
               </div>
              </div>
              <div id="dnd-metadata" class="module toggle-wrap">
               <div id="dnd-metadata_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Attachments</h2>
               </div>
               <div class="mod-content">
                <div id="dnd-metadata-webpanel" data-can-attach="false" data-project-type="software" data-upload-limit="62914560" data-thumbnails-allowed="false"></div>
               </div>
              </div>
              <div id="attachmentmodule" class="module toggle-wrap">
               <div id="attachmentmodule_heading" class="mod-header">
                <ul class="ops">
                 <li class="drop">
                  <div class="aui-dd-parent">
                   <a href="#" class="icon drop-menu js-default-dropdown" title="Options"><span>Options</span></a>
                   <div class="aui-dropdown-content aui-list">
                    <ul id="attachment-sorting-options" class="aui-list-section aui-first">
                     <li class="aui-list-item"><a id="attachment-sort-key-name" href="/jira/browse/LUCENE-843?attachmentSortBy=fileName#attachmentmodule" class="aui-list-checked aui-checked aui-list-item-link" title="viewissue.subtasks.tab.show.all.name"><span>Sort By Name</span></a></li>
                     <li class="aui-list-item"><a id="attachment-sort-key-date" href="/jira/browse/LUCENE-843?attachmentSortBy=dateTime#attachmentmodule" class="aui-list-checked aui-list-item-link" title="Sort By Date"><span>Sort By Date</span></a></li>
                    </ul>
                    <ul id="attachment-sorting-order-options" class="aui-list-section aui-last">
                     <li class="aui-list-item"><a id="attachment-sort-direction-asc" href="/jira/browse/LUCENE-843?attachmentOrder=asc#attachmentmodule" class="aui-list-checked aui-checked aui-list-item-link" title="Ascending"><span>Ascending</span></a></li>
                     <li class="aui-list-item"><a id="attachment-sort-direction-desc" href="/jira/browse/LUCENE-843?attachmentOrder=desc#attachmentmodule" class="aui-list-checked aui-list-item-link" title="Descending"><span>Descending</span></a></li>
                    </ul>
                   </div>
                  </div></li>
                </ul>
                <h2 class="toggle-title">Attachments</h2>
               </div>
               <div class="mod-content">
                <ol id="file_attachments" class="item-attachments" data-sort-key="fileName" data-sort-order="asc">
                 <li class="attachment-content js-file-attachment" data-attachment-id="12360213" data-issue-id="12365595" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12360213/index.presharedstores.cfs.zip" draggable="true" data-downloadurl="application/zip:index.presharedstores.cfs.zip:https://issues.apache.org/jira/secure/attachment/12360213/index.presharedstores.cfs.zip"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-zip" title="Zip Archive"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12360213/index.presharedstores.cfs.zip" title="Latest  20/Jun/07 15:58 - Michael McCandless" draggable="true" data-downloadurl="application/zip:index.presharedstores.cfs.zip:https://issues.apache.org/jira/secure/attachment/12360213/index.presharedstores.cfs.zip">index.presharedstores.cfs.zip</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-06-20T15:58:57.500Z">20/Jun/07 15:58</time>
                   </dd>
                   <dd class="attachment-size">
                    2 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12360214" data-issue-id="12365595" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12360214/index.presharedstores.nocfs.zip" draggable="true" data-downloadurl="application/zip:index.presharedstores.nocfs.zip:https://issues.apache.org/jira/secure/attachment/12360214/index.presharedstores.nocfs.zip"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-zip" title="Zip Archive"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12360214/index.presharedstores.nocfs.zip" title="Latest  20/Jun/07 15:58 - Michael McCandless" draggable="true" data-downloadurl="application/zip:index.presharedstores.nocfs.zip:https://issues.apache.org/jira/secure/attachment/12360214/index.presharedstores.nocfs.zip">index.presharedstores.nocfs.zip</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-06-20T15:58:57.665Z">20/Jun/07 15:58</time>
                   </dd>
                   <dd class="attachment-size">
                    5 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12353973" data-issue-id="12365595" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12353973/LUCENE-843.patch" draggable="true" data-downloadurl="text/plain:LUCENE-843.patch:https://issues.apache.org/jira/secure/attachment/12353973/LUCENE-843.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12353973/LUCENE-843.patch" title="Latest  22/Mar/07 17:06 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-843.patch:https://issues.apache.org/jira/secure/attachment/12353973/LUCENE-843.patch">LUCENE-843.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-03-22T17:06:45.065Z">22/Mar/07 17:06</time>
                   </dd>
                   <dd class="attachment-size">
                    141 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12354163" data-issue-id="12365595" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12354163/LUCENE-843.take2.patch" draggable="true" data-downloadurl="text/plain:LUCENE-843.take2.patch:https://issues.apache.org/jira/secure/attachment/12354163/LUCENE-843.take2.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12354163/LUCENE-843.take2.patch" title="Latest  25/Mar/07 14:30 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-843.take2.patch:https://issues.apache.org/jira/secure/attachment/12354163/LUCENE-843.take2.patch">LUCENE-843.take2.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-03-25T14:30:36.449Z">25/Mar/07 14:30</time>
                   </dd>
                   <dd class="attachment-size">
                    148 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12354431" data-issue-id="12365595" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12354431/LUCENE-843.take3.patch" draggable="true" data-downloadurl="text/plain:LUCENE-843.take3.patch:https://issues.apache.org/jira/secure/attachment/12354431/LUCENE-843.take3.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12354431/LUCENE-843.take3.patch" title="Latest  28/Mar/07 12:49 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-843.take3.patch:https://issues.apache.org/jira/secure/attachment/12354431/LUCENE-843.take3.patch">LUCENE-843.take3.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-03-28T12:49:18.576Z">28/Mar/07 12:49</time>
                   </dd>
                   <dd class="attachment-size">
                    156 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12354752" data-issue-id="12365595" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12354752/LUCENE-843.take4.patch" draggable="true" data-downloadurl="text/plain:LUCENE-843.take4.patch:https://issues.apache.org/jira/secure/attachment/12354752/LUCENE-843.take4.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12354752/LUCENE-843.take4.patch" title="Latest  02/Apr/07 14:43 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-843.take4.patch:https://issues.apache.org/jira/secure/attachment/12354752/LUCENE-843.take4.patch">LUCENE-843.take4.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-04-02T14:43:21.177Z">02/Apr/07 14:43</time>
                   </dd>
                   <dd class="attachment-size">
                    188 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12356500" data-issue-id="12365595" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12356500/LUCENE-843.take5.patch" draggable="true" data-downloadurl="text/plain:LUCENE-843.take5.patch:https://issues.apache.org/jira/secure/attachment/12356500/LUCENE-843.take5.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12356500/LUCENE-843.take5.patch" title="Latest  30/Apr/07 10:39 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-843.take5.patch:https://issues.apache.org/jira/secure/attachment/12356500/LUCENE-843.take5.patch">LUCENE-843.take5.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-04-30T10:39:19.253Z">30/Apr/07 10:39</time>
                   </dd>
                   <dd class="attachment-size">
                    239 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12357792" data-issue-id="12365595" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12357792/LUCENE-843.take6.patch" draggable="true" data-downloadurl="text/plain:LUCENE-843.take6.patch:https://issues.apache.org/jira/secure/attachment/12357792/LUCENE-843.take6.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12357792/LUCENE-843.take6.patch" title="Latest  21/May/07 18:14 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-843.take6.patch:https://issues.apache.org/jira/secure/attachment/12357792/LUCENE-843.take6.patch">LUCENE-843.take6.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-05-21T18:14:40.754Z">21/May/07 18:14</time>
                   </dd>
                   <dd class="attachment-size">
                    210 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12359276" data-issue-id="12365595" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12359276/LUCENE-843.take7.patch" draggable="true" data-downloadurl="text/plain:LUCENE-843.take7.patch:https://issues.apache.org/jira/secure/attachment/12359276/LUCENE-843.take7.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12359276/LUCENE-843.take7.patch" title="Latest  08/Jun/07 13:31 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-843.take7.patch:https://issues.apache.org/jira/secure/attachment/12359276/LUCENE-843.take7.patch">LUCENE-843.take7.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-06-08T13:31:01.596Z">08/Jun/07 13:31</time>
                   </dd>
                   <dd class="attachment-size">
                    189 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12359906" data-issue-id="12365595" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12359906/LUCENE-843.take8.patch" draggable="true" data-downloadurl="text/plain:LUCENE-843.take8.patch:https://issues.apache.org/jira/secure/attachment/12359906/LUCENE-843.take8.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12359906/LUCENE-843.take8.patch" title="Latest  15/Jun/07 19:00 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-843.take8.patch:https://issues.apache.org/jira/secure/attachment/12359906/LUCENE-843.take8.patch">LUCENE-843.take8.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-06-15T19:00:52.076Z">15/Jun/07 19:00</time>
                   </dd>
                   <dd class="attachment-size">
                    203 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                 <li class="attachment-content js-file-attachment" data-attachment-id="12360022" data-issue-id="12365595" data-attachment-type="file">
                  <div class="attachment-thumb">
                   <a href="/jira/secure/attachment/12360022/LUCENE-843.take9.patch" draggable="true" data-downloadurl="text/plain:LUCENE-843.take9.patch:https://issues.apache.org/jira/secure/attachment/12360022/LUCENE-843.take9.patch"><span class="aui-icon aui-icon-small attachment-icon aui-iconfont-file-txt" title="Text File"></span></a>
                  </div>
                  <dl>
                   <dt class="attachment-title">
                    <a href="/jira/secure/attachment/12360022/LUCENE-843.take9.patch" title="Latest  18/Jun/07 13:56 - Michael McCandless" draggable="true" data-downloadurl="text/plain:LUCENE-843.take9.patch:https://issues.apache.org/jira/secure/attachment/12360022/LUCENE-843.take9.patch">LUCENE-843.take9.patch</a>
                   </dt>
                   <dd class="attachment-delete">
                    <span class="icon"></span>
                   </dd>
                   <dd class="attachment-date">
                    <time class="livestamp" datetime="2007-06-18T13:56:56.528Z">18/Jun/07 13:56</time>
                   </dd>
                   <dd class="attachment-size">
                    204 kB
                   </dd>
                   <dd class="attachment-author">
                    Michael McCandless
                   </dd>
                  </dl></li>
                </ol>
               </div>
              </div>
              <div id="linkingmodule" class="module toggle-wrap">
               <div id="linkingmodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Issue Links</h2>
               </div>
               <div class="mod-content"> 
                <div class="links-container" data-default-link-icon="/jira/images/icons/generic_link_16.png"> 
                 <dl class="links-list "> 
                  <dt title="is blocked by">
                   is blocked by
                  </dt> 
                  <dd id="internal-12365610_10032"> 
                   <div class="link-content"> 
                    <p> <img src="/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype" width="16" height="16" title="Bug - A problem which impairs or prevents the functions of the product." alt="Bug - A problem which impairs or prevents the functions of the product."> <span title="LUCENE-845: If you &quot;flush by RAM usage&quot; then IndexWriter may over-merge"> <a href="/jira/browse/LUCENE-845" data-issue-key="LUCENE-845" class="issue-link link-title resolution">LUCENE-845</a> <span class="link-summary">If you "flush by RAM usage" then IndexWriter may over-merge</span> </span> </p> 
                    <ul class="link-snapshot"> 
                     <li class="priority"> <img src="/jira/images/icons/priorities/minor.svg" width="16" height="16" title="Minor - Minor loss of function, or other problem where easy workaround is present." alt="Minor - Minor loss of function, or other problem where easy workaround is present."> </li> 
                     <li class="status"> <span class=" jira-issue-status-lozenge aui-lozenge jira-issue-status-lozenge-green jira-issue-status-lozenge-done aui-lozenge-subtle jira-issue-status-lozenge-max-width-short" data-tooltip="<span class=&quot;jira-issue-status-tooltip-title&quot;>Closed</span><br><span class=&quot;jira-issue-status-tooltip-desc&quot;>The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.</span>">Closed</span> </li> 
                    </ul> 
                   </div> 
                  </dd> 
                 </dl> 
                 <dl class="links-list "> 
                  <dt title="is related to">
                   is related to
                  </dt> 
                  <dd id="internal-12376448_10030"> 
                   <div class="link-content"> 
                    <p> <img src="/jira/secure/viewavatar?size=xsmall&amp;avatarId=21140&amp;avatarType=issuetype" width="16" height="16" title="Improvement - An improvement or enhancement to an existing feature or task." alt="Improvement - An improvement or enhancement to an existing feature or task."> <span title="SOLR-342: Add support for Lucene's new Indexing and merge features (excluding Document/Field/Token reuse)"> <a href="/jira/browse/SOLR-342" data-issue-key="SOLR-342" class="issue-link link-title resolution">SOLR-342</a> <span class="link-summary">Add support for Lucene's new Indexing and merge features (excluding Document/Field/Token reuse)</span> </span> </p> 
                    <ul class="link-snapshot"> 
                     <li class="priority"> <img src="/jira/images/icons/priorities/minor.svg" width="16" height="16" title="Minor - Minor loss of function, or other problem where easy workaround is present." alt="Minor - Minor loss of function, or other problem where easy workaround is present."> </li> 
                     <li class="status"> <span class=" jira-issue-status-lozenge aui-lozenge jira-issue-status-lozenge-green jira-issue-status-lozenge-done aui-lozenge-subtle jira-issue-status-lozenge-max-width-short" data-tooltip="<span class=&quot;jira-issue-status-tooltip-title&quot;>Resolved</span><br><span class=&quot;jira-issue-status-tooltip-desc&quot;>A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.</span>">Resolved</span> </li> 
                    </ul> 
                   </div> 
                  </dd> 
                 </dl> 
                </div> 
               </div>
              </div>
              <div id="activitymodule" class="module toggle-wrap">
               <div id="activitymodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Activity</h2>
               </div>
               <div class="mod-content"> 
                <big-pipe data-id="activity-panel-pipe-id" style="height: 70px"> 
                 <div></div> 
                </big-pipe> 
               </div>
              </div>
             </div>
             <div id="viewissuesidebar" class="aui-item issue-side-column">
              <div id="peoplemodule" class="module toggle-wrap">
               <div id="peoplemodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">People</h2>
               </div>
               <div class="mod-content"> 
                <ul class="item-details" id="peopledetails"> 
                 <li class="people-details"> 
                  <dl> 
                   <dt>
                    Assignee:
                   </dt> 
                   <dd> 
                    <span id="assignee-val" class="view-issue-field"> <span class="user-hover" id="issue_summary_assignee_mikemccand" rel="mikemccand" data-user="{&quot;avatarUrl&quot;:&quot;https://issues.apache.org/jira/secure/useravatar?size=xsmall&amp;avatarId=10452&quot;,&quot;displayName&quot;:&quot;Michael McCandless&quot;,&quot;emailAddress&quot;:&quot;lucene@mikemccandless.com&quot;,&quot;username&quot;:&quot;mikemccand&quot;}"> <span class="aui-avatar aui-avatar-small"><span class="aui-avatar-inner"><img src="https://issues.apache.org/jira/secure/useravatar?size=small&amp;avatarId=10452" alt="mikemccand"></span></span> Michael McCandless </span> </span> 
                   </dd> 
                  </dl> 
                  <dl> 
                   <dt>
                    Reporter:
                   </dt> 
                   <dd> 
                    <span id="reporter-val" class="view-issue-field"> <span class="user-hover" id="issue_summary_reporter_mikemccand" rel="mikemccand" data-user="{&quot;avatarUrl&quot;:&quot;https://issues.apache.org/jira/secure/useravatar?size=xsmall&amp;avatarId=10452&quot;,&quot;displayName&quot;:&quot;Michael McCandless&quot;,&quot;emailAddress&quot;:&quot;lucene@mikemccandless.com&quot;,&quot;username&quot;:&quot;mikemccand&quot;}"> <span class="aui-avatar aui-avatar-small"><span class="aui-avatar-inner"><img src="https://issues.apache.org/jira/secure/useravatar?size=small&amp;avatarId=10452" alt="mikemccand"></span></span> Michael McCandless </span> </span> 
                   </dd> 
                  </dl> </li> 
                </ul> 
                <ul class="item-details"> 
                 <li> 
                  <dl> 
                   <dt>
                    Votes:
                   </dt> 
                   <dd> 
                    <span id="vote-data" class="aui-badge vote-state-off">5</span> 
                    <span id="vote-label" title="You have to be logged in to vote for an issue.">Vote for this issue</span> 
                   </dd> 
                  </dl> 
                  <dl> 
                   <dt>
                    Watchers:
                   </dt> 
                   <dd> 
                    <span id="watcher-data" class="aui-badge watch-state-off">4</span> 
                    <span id="watch-label" title="You have to be logged in to watch an issue.">Start watching this issue</span> 
                   </dd> 
                  </dl> </li> 
                </ul> 
               </div>
              </div>
              <div id="datesmodule" class="module toggle-wrap">
               <div id="datesmodule_heading" class="mod-header">
                <ul class="ops"></ul>
                <h2 class="toggle-title">Dates</h2>
               </div>
               <div class="mod-content"> 
                <ul class="item-details"> 
                 <li> 
                  <dl class="dates"> 
                   <dt>
                    Created:
                   </dt> 
                   <dd class="date user-tz" title="22/Mar/07 17:05"> 
                    <span data-name="Created" id="created-val" data-fieldtype="datetime"> <time class="livestamp" datetime="2007-03-22T17:05:11+0000">22/Mar/07 17:05</time> </span> 
                   </dd> 
                  </dl> 
                  <dl class="dates"> 
                   <dt>
                    Updated:
                   </dt> 
                   <dd class="date user-tz" title="25/Jan/08 03:23"> 
                    <span data-name="Updated" id="updated-val" data-fieldtype="datetime"> <time class="livestamp" datetime="2008-01-25T03:23:51+0000">25/Jan/08 03:23</time> </span> 
                   </dd> 
                  </dl> 
                  <dl class="dates"> 
                   <dt>
                    Resolved:
                   </dt> 
                   <dd class="date user-tz" title="12/Aug/07 15:48"> 
                    <span data-name="Resolved" id="resolutiondate-val" data-fieldtype="datetime"> <time class="livestamp" datetime="2007-08-12T15:48:41+0000">12/Aug/07 15:48</time> </span> 
                   </dd> 
                  </dl> </li> 
                </ul> 
               </div>
              </div>
             </div>
            </div>
           </div>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
     <!-- .aui-page-panel-inner -->
    </div>
    <!-- .aui-page-panel -->
    <div class="issue-navigator-init"></div> 
   </section> 
   <footer id="footer" role="contentinfo"> 
    <section class="footer-body"> 
     <ul class="atlassian-footer"> 
      <li> Atlassian JIRA <a class="seo-link" rel="nofollow" href="https://www.atlassian.com/software/jira">Project Management Software</a> <span id="footer-build-information">(v7.6.3#76005-<span title="8a4e38d34af948780dbf52044e7aafb13a7cae58" data-commit-id="8a4e38d34af948780dbf52044e7aafb13a7cae58}">sha1:8a4e38d</span>)</span> </li> 
      <li> <a id="about-link" rel="nofollow" href="/jira/secure/AboutPage.jspa/secure/AboutPage.jspa">About JIRA</a> </li> 
      <li> <a id="footer-report-problem-link" rel="nofollow" href="/jira/secure/CreateIssue!default.jspa">Report a problem</a> </li> 
     </ul> 
     <ul class="atlassian-footer"> 
      <li class="licensemessage"> Powered by a free Atlassian <a rel="nofollow" href="http://www.atlassian.com/software/jira">JIRA</a> open source license for n/a, Apache Software Foundation. Try JIRA - <a rel="nofollow" href="http://www.atlassian.com/software/jira">bug tracking software</a> for <i>your</i> team. </li> 
     </ul> 
     <div id="footer-logo">
      <a rel="nofollow" href="http://www.atlassian.com/">Atlassian</a>
     </div> 
    </section> 
    <fieldset class="hidden parameters"> 
     <input type="hidden" title="loggedInUser" value=""> 
     <input type="hidden" title="ajaxTimeout" value="The call to the JIRA server did not complete within the timeout period.  We are unsure of the result of this operation."> 
     <input type="hidden" title="JiraVersion" value="7.6.3"> 
     <input type="hidden" title="ajaxUnauthorised" value="You are not authorised to perform this operation. Please log in."> 
     <input type="hidden" title="baseURL" value="https://issues.apache.org/jira"> 
     <input type="hidden" title="ajaxCommsError" value="The JIRA server could not be contacted. This may be a temporary glitch or the server may be down. "> 
     <input type="hidden" title="ajaxServerError" value="The JIRA server was contacted but has returned an error response. We are unsure of the result of this operation."> 
     <input type="hidden" title="ajaxErrorCloseDialog" value="Close this dialog and press refresh in your browser"> 
     <input type="hidden" title="ajaxErrorDialogHeading" value="Communications Breakdown"> 
     <input type="hidden" title="dirtyMessage" value="You have entered new data on this page. If you navigate away from this page without first saving your data, the changes will be lost."> 
     <input type="hidden" title="dirtyDialogMessage" value="You have entered new data in this dialog. If you navigate away from this dialog without first saving your data, the changes will be lost. Click cancel to return to the dialog."> 
     <input type="hidden" title="keyType" value="Type"> 
     <input type="hidden" title="keyThen" value="then"> 
     <input type="hidden" title="dblClickToExpand" value="Double click to expand"> 
     <input type="hidden" title="actions" value="Actions"> 
     <input type="hidden" title="removeItem" value="Remove"> 
     <input type="hidden" title="workflow" value="Workflow"> 
     <input type="hidden" title="labelNew" value="New Label"> 
     <input type="hidden" title="issueActionsHint" value="Begin typing for available operations or press down to see all"> 
     <input type="hidden" title="closelink" value="Close"> 
     <input type="hidden" title="dotOperations" value="Operations"> 
     <input type="hidden" title="dotLoading" value="Loading..."> 
     <input type="hidden" title="frotherSuggestions" value="Suggestions"> 
     <input type="hidden" title="frotherNomatches" value="No Matches"> 
     <input type="hidden" title="multiselectVersionsError" value="{0} is not a valid version."> 
     <input type="hidden" title="multiselectComponentsError" value="{0} is not a valid component."> 
     <input type="hidden" title="multiselectGenericError" value="The value {0} is invalid."> 
    </fieldset> 
   </footer> 
  </div> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:bigpipe-js/jira.webresources:bigpipe-js.js" data-wrm-key="jira.webresources:bigpipe-js" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["activity-panel-pipe-id"]="\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    \u003cdiv class=\\\"tabwrap tabs2\\\"\u003e\\n\\n        \u003cul id=\\\"issue-tabs\\\" class=\\\"tabs horizontal\\\"\u003e\\n                                \\n            \u003cli  data-id=\\\"all-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel\\\" data-label=\\\"All\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-843?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"all-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-843?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel\\\"\u003e\u003cstrong\u003eAll\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  class=\\\"active\\\" id=\\\"comment-tabpanel\\\"  data-id=\\\"comment-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel\\\" data-label=\\\"Comments\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-843?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel\\\"\u003e\\n                            \u003cstrong tabindex=\\\"0\\\"\u003eComments\u003c\\/strong\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"worklog-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:worklog-tabpanel\\\" data-label=\\\"Work Log\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-843?page=com.atlassian.jira.plugin.system.issuetabpanels:worklog-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"worklog-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-843?page=com.atlassian.jira.plugin.system.issuetabpanels:worklog-tabpanel\\\"\u003e\u003cstrong\u003eWork Log\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"changehistory-tabpanel\\\" data-key=\\\"com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel\\\" data-label=\\\"History\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-843?page=com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"changehistory-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-843?page=com.atlassian.jira.plugin.system.issuetabpanels:changehistory-tabpanel\\\"\u003e\u003cstrong\u003eHistory\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"activity-stream-issue-tab\\\" data-key=\\\"com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab\\\" data-label=\\\"Activity\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-843?page=com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"activity-stream-issue-tab\\\" href=\\\"\\/jira\\/browse\\/LUCENE-843?page=com.atlassian.streams.streams-jira-plugin:activity-stream-issue-tab\\\"\u003e\u003cstrong\u003eActivity\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                                \\n            \u003cli  data-id=\\\"transitions-summary-tabpanel\\\" data-key=\\\"com.googlecode.jira-suite-utilities:transitions-summary-tabpanel\\\" data-label=\\\"Transitions\\\" data-href=\\\"\\/jira\\/browse\\/LUCENE-843?page=com.googlecode.jira-suite-utilities:transitions-summary-tabpanel\\\"\u003e\\n                            \u003ca class=\\\"ajax-activity-content\\\" id=\\\"transitions-summary-tabpanel\\\" href=\\\"\\/jira\\/browse\\/LUCENE-843?page=com.googlecode.jira-suite-utilities:transitions-summary-tabpanel\\\"\u003e\u003cstrong\u003eTransitions\u003c\\/strong\u003e\u003c\\/a\u003e\\n                        \u003c\\/li\u003e\\n                \u003c\\/ul\u003e\\n\\n                    \u003cdiv class=\\\"sortwrap\\\"\u003e\\n                                    \u003ca class=\\\"issue-activity-sort-link ajax-activity-content\\\" rel=\\\"nofollow\\\" data-tab-sort data-order=\\\"desc\\\" href=\\\"\\/jira\\/browse\\/LUCENE-843?actionOrder=desc\\\" title=\\\"Ascending order - Click to sort in descending order\\\"\u003e\\n                        \u003cspan class=\\\"aui-icon aui-icon-small aui-iconfont-up\\\"\u003eAscending order - Click to sort in descending order\u003c\\/span\u003e\\n                    \u003c\\/a\u003e\\n                            \u003c\\/div\u003e\\n            \u003c\\/div\u003e\\n    \u003cdiv class=\\\"issuePanelWrapper\\\"\u003e\\n        \u003cdiv class=\\\"issuePanelProgress\\\"\u003e\u003c\\/div\u003e\\n        \u003cdiv class=\\\"issuePanelContainer\\\" id=\\\"issue_actions_container\\\"\u003e\\n                                    \\n\\n\\n\u003cdiv id=\\\"comment-12483223\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12483223&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12483223\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12483223_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12483223_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Mar\\/07 17:06\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-22T17:06:45+0000\'\u003e22\\/Mar\\/07 17:06\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI\'m attaching a patch with my current state.  NOTE: this is very rough\u003cbr\\/\u003e\\nand very much a work in progress and nowhere near ready to commit!  I\u003cbr\\/\u003e\\nwanted to get it out there sooner rather than later to get feedback,\u003cbr\\/\u003e\\nmaybe entice some daring early adopters, iterate, etc.\u003c\\/p\u003e\\n\\n\u003cp\u003eIt passes all unit tests except the disk-full tests.\u003c\\/p\u003e\\n\\n\u003cp\u003eThere are some big issues yet to resolve:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eMerge policy has problems when you \\\"flush by RAM\\\" (this is true\u003cbr\\/\u003e\\n    even before my patch).  Not sure how to fix yet.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eThread safety and thread concurrency aren\'t there yet.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eNorms are not flushed (just use up RAM until you close the\u003cbr\\/\u003e\\n    writer).\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eMany other things on my TODO list \u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/smile.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12483223_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12483223_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'22\\/Mar\\/07 17:06\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-22T17:06:45+0000\'\u003e22\\/Mar\\/07 17:06\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I\'m attaching a patch with my current state.  NOTE: this is very rough \\nand very much a work in progress and nowhere near ready to commit!  I \\nwanted to get it out there sooner rather than later to get feedback, \\nmaybe entice some daring early adopters, iterate, etc. \\n\\n It passes all unit tests except the disk-full tests. \\n\\n There are some big issues yet to resolve: \\n\\n \\n\\t Merge policy has problems when you \\\"flush by RAM\\\" (this is true \\n    even before my patch).  Not sure how to fix yet. \\n \\n\\n\\n \\n\\t Thread safety and thread concurrency aren\'t there yet. \\n \\n\\n\\n \\n\\t Norms are not flushed (just use up RAM until you close the \\n    writer). \\n \\n\\n\\n \\n\\t Many other things on my TODO list   \\n \\n\\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12483940\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12483940&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12483940\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12483940_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12483940_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'25\\/Mar\\/07 14:30\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-25T14:30:36+0000\'\u003e25\\/Mar\\/07 14:30\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eNew rev of the patch:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eFixed at least one data corruption case\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eAdded more asserts (run with \\\"java -ea\\\" so asserts run)\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eSome more small optimizations\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eUpdated to current trunk so patch applies cleanly\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12483940_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12483940_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'25\\/Mar\\/07 14:30\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-25T14:30:36+0000\'\u003e25\\/Mar\\/07 14:30\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    New rev of the patch: \\n\\n \\n\\t Fixed at least one data corruption case \\n \\n\\n\\n \\n\\t Added more asserts (run with \\\"java -ea\\\" so asserts run) \\n \\n\\n\\n \\n\\t Some more small optimizations \\n \\n\\n\\n \\n\\t Updated to current trunk so patch applies cleanly \\n \\n\\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12484853\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12484853&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12484853\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12484853_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12484853_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'28\\/Mar\\/07 12:49\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-28T12:49:18+0000\'\u003e28\\/Mar\\/07 12:49\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\\n\u003cp\u003eAnother rev of the patch:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eGot thread concurrency working: removed \\\"synchronized\\\" from entire\u003cbr\\/\u003e\\n    call to MultiDocWriter.addDocument and instead synchronize two\u003cbr\\/\u003e\\n    quick steps (init\\/finish) addDocument leaving the real work\u003cbr\\/\u003e\\n    (processDocument) unsynchronized.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eFixed bug that was failing to delete temp files from index\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eReduced memory usage of Posting by inlining positions, start\u003cbr\\/\u003e\\n    offset, end offset into a single int array.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eEnabled IndexLineFiles.java (tool I use for local benchmarking) to\u003cbr\\/\u003e\\n    run multiple threads\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eOther small optimizations\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eBTW, one of the nice side effects of this patch is it cleans up the\u003cbr\\/\u003e\\nmergeSegments method of IndexWriter by separating out \\\"flush\\\" of added\u003cbr\\/\u003e\\ndocs &amp; deletions because it\'s no longer a merge, from the \\\"true\\\"\u003cbr\\/\u003e\\nmergeSegments whose purpose is then to merge disk segments.\u003cbr\\/\u003e\\nPreviously mergeSegments was getting rather confusing with the\u003cbr\\/\u003e\\ndifferent cases\\/combinations of added docs or not, deleted docs or\u003cbr\\/\u003e\\nnot, any merges or not.\u003c\\/p\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12484853_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12484853_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'28\\/Mar\\/07 12:49\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-03-28T12:49:18+0000\'\u003e28\\/Mar\\/07 12:49\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                   \\n Another rev of the patch: \\n\\n \\n\\t Got thread concurrency working: removed \\\"synchronized\\\" from entire \\n    call to MultiDocWriter.addDocument and instead synchronize two \\n    quick steps (init\\/finish) addDocument leaving the real work \\n    (processDocument) unsynchronized. \\n \\n\\n\\n \\n\\t Fixed bug that was failing to delete temp files from index \\n \\n\\n\\n \\n\\t Reduced memory usage of Posting by inlining positions, start \\n    offset, end offset into a single int array. \\n \\n\\n\\n \\n\\t Enabled IndexLineFiles.java (tool I use for local benchmarking) to \\n    run multiple threads \\n \\n\\n\\n \\n\\t Other small optimizations \\n \\n\\n\\n BTW, one of the nice side effects of this patch is it cleans up the \\nmergeSegments method of IndexWriter by separating out \\\"flush\\\" of added \\ndocs &amp; deletions because it\'s no longer a merge, from the \\\"true\\\" \\nmergeSegments whose purpose is then to merge disk segments. \\nPreviously mergeSegments was getting rather confusing with the \\ndifferent cases\\/combinations of added docs or not, deleted docs or \\nnot, any merges or not. \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12486025\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12486025&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12486025\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486025_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486025_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'02\\/Apr\\/07 14:43\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-02T14:43:21+0000\'\u003e02\\/Apr\\/07 14:43\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eAnother rev of the patch.  All tests pass except disk full tests.  The\u003cbr\\/\u003e\\ncode is still rather \\\"dirty\\\" and not well commented.\u003c\\/p\u003e\\n\\n\u003cp\u003eI think I\'m close to finishing optimizing and now I will focus on\u003cbr\\/\u003e\\nerror handling (eg disk full), adding some deeper unit tests, more\u003cbr\\/\u003e\\ntesting on corner cases like massive docs or docs with massive terms,\u003cbr\\/\u003e\\netc., flushing pending norms to disk, cleaning up \\/ commenting the\u003cbr\\/\u003e\\ncode and various other smaller items.\u003c\\/p\u003e\\n\\n\u003cp\u003eHere are the changes in this rev:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eA proposed backwards compatible change to the Token API to also\u003cbr\\/\u003e\\n    allow the term text to be delivered as a slice (offset &amp; length)\u003cbr\\/\u003e\\n    into a char[] array instead of String.  With an analyzer\\/tokenizer\u003cbr\\/\u003e\\n    that takes advantage of this, this was a decent performance gain\u003cbr\\/\u003e\\n    in my local testing.  I\'ve created a SimpleSpaceAnalyzer that only\u003cbr\\/\u003e\\n    splits words at the space character to test this.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eAdded more asserts (run java -ea to enable asserts).  The asserts\u003cbr\\/\u003e\\n    are quite useful and now often catch a bug I\'ve introduced before\u003cbr\\/\u003e\\n    the unit tests do.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eChanged to custom int[] block buffering for postings to store\u003cbr\\/\u003e\\n    freq, prox\'s and offsets.  With this buffering we no longer have\u003cbr\\/\u003e\\n    to double the size of int[] arrays while adding positions, nor do\u003cbr\\/\u003e\\n    we have to copy ints whenever we needs more space for these\u003cbr\\/\u003e\\n    arrays.  Instead I allocate larger slices out of the shared int[]\u003cbr\\/\u003e\\n    arrays.  This reduces memory and improves performance.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eChanged to custom char[] block buffering for postings to store\u003cbr\\/\u003e\\n    term text.  This also reduces memory and improves performance.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eChanged to single file for RAM &amp; flushed partial segments (was 3\u003cbr\\/\u003e\\n    separate files before)\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eChanged how I merge flushed partial segments to match what\'s\u003cbr\\/\u003e\\n    described in \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-854\\\" title=\\\"Create merge policy that doesn&#39;t periodically inadvertently optimize\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-854\\\"\u003e\u003cdel\u003eLUCENE-854\u003c\\/del\u003e\u003c\\/a\u003e\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eReduced memory usage when indexing large docs (25 MB plain text\u003cbr\\/\u003e\\n    each).  I\'m still consuming more RAM in this case than the\u003cbr\\/\u003e\\n    baseline (trunk) so I\'m still working on this one ...\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eFixed a slow memory leak when building large (20+ GB) indices\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486025_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486025_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'02\\/Apr\\/07 14:43\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-02T14:43:21+0000\'\u003e02\\/Apr\\/07 14:43\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Another rev of the patch.  All tests pass except disk full tests.  The \\ncode is still rather \\\"dirty\\\" and not well commented. \\n\\n I think I\'m close to finishing optimizing and now I will focus on \\nerror handling (eg disk full), adding some deeper unit tests, more \\ntesting on corner cases like massive docs or docs with massive terms, \\netc., flushing pending norms to disk, cleaning up \\/ commenting the \\ncode and various other smaller items. \\n\\n Here are the changes in this rev: \\n\\n \\n\\t A proposed backwards compatible change to the Token API to also \\n    allow the term text to be delivered as a slice (offset &amp; length) \\n    into a char[] array instead of String.  With an analyzer\\/tokenizer \\n    that takes advantage of this, this was a decent performance gain \\n    in my local testing.  I\'ve created a SimpleSpaceAnalyzer that only \\n    splits words at the space character to test this. \\n \\n\\n\\n \\n\\t Added more asserts (run java -ea to enable asserts).  The asserts \\n    are quite useful and now often catch a bug I\'ve introduced before \\n    the unit tests do. \\n \\n\\n\\n \\n\\t Changed to custom int[] block buffering for postings to store \\n    freq, prox\'s and offsets.  With this buffering we no longer have \\n    to double the size of int[] arrays while adding positions, nor do \\n    we have to copy ints whenever we needs more space for these \\n    arrays.  Instead I allocate larger slices out of the shared int[] \\n    arrays.  This reduces memory and improves performance. \\n \\n\\n\\n \\n\\t Changed to custom char[] block buffering for postings to store \\n    term text.  This also reduces memory and improves performance. \\n \\n\\n\\n \\n\\t Changed to single file for RAM &amp; flushed partial segments (was 3 \\n    separate files before) \\n \\n\\n\\n \\n\\t Changed how I merge flushed partial segments to match what\'s \\n    described in   LUCENE-854   \\n \\n\\n\\n \\n\\t Reduced memory usage when indexing large docs (25 MB plain text \\n    each).  I\'m still consuming more RAM in this case than the \\n    baseline (trunk) so I\'m still working on this one ... \\n \\n\\n\\n \\n\\t Fixed a slow memory leak when building large (20+ GB) indices \\n \\n\\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12486292\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12486292&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12486292\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486292_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486292_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 10:20\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T10:20:01+0000\'\u003e03\\/Apr\\/07 10:20\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eSome details on how I measure RAM usage: both the baseline (current\u003cbr\\/\u003e\\nlucene trunk) and my patch have two general classes of RAM usage.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe first class, \\\"document processing RAM\\\", is RAM used while\u003cbr\\/\u003e\\nprocessing a single doc. This RAM is re-used for each document (in the\u003cbr\\/\u003e\\ntrunk, it\'s GC\'d and new RAM is allocated; in my patch, I explicitly\u003cbr\\/\u003e\\nre-use these objects) and how large it gets is driven by how big each\u003cbr\\/\u003e\\ndocument is.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe second class, \\\"indexed documents RAM\\\", is the RAM used up by\u003cbr\\/\u003e\\npreviously indexed documents.  This RAM grows with each added\u003cbr\\/\u003e\\ndocument and how large it gets is driven by the number and size of\u003cbr\\/\u003e\\ndocs indexed since the last flush.\u003c\\/p\u003e\\n\\n\u003cp\u003eSo when I say the writer is allowed to use 32 MB of RAM, I\'m only\u003cbr\\/\u003e\\nmeasuring the \\\"indexed documents RAM\\\".  With trunk I do this by\u003cbr\\/\u003e\\ncalling ramSizeInBytes(), and with my patch I do the analagous thing\u003cbr\\/\u003e\\nby measuring how many RAM buffers are held up storing previously\u003cbr\\/\u003e\\nindexed documents.\u003c\\/p\u003e\\n\\n\u003cp\u003eI then define \\\"RAM efficiency\\\" (docs\\/MB) as how many docs we can hold\u003cbr\\/\u003e\\nin \\\"indexed documents RAM\\\" per MB RAM, at the point that we flush to\u003cbr\\/\u003e\\ndisk.  I think this is an important metric because it drives how large\u003cbr\\/\u003e\\nyour initial (level 0) segments are.  The larger these segments are\u003cbr\\/\u003e\\nthen generally the less merging you need to do, for a given # docs in\u003cbr\\/\u003e\\nthe index.\u003c\\/p\u003e\\n\\n\u003cp\u003eI also measure overall RAM used in the JVM (using\u003cbr\\/\u003e\\nMemoryMXBean.getHeapMemoryUsage().getUsed()) just prior to each flush\u003cbr\\/\u003e\\nexcept the last, to also capture the \\\"document processing RAM\\\", object\u003cbr\\/\u003e\\noverhead, etc.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486292_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486292_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 10:20\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T10:20:01+0000\'\u003e03\\/Apr\\/07 10:20\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Some details on how I measure RAM usage: both the baseline (current \\nlucene trunk) and my patch have two general classes of RAM usage. \\n\\n The first class, \\\"document processing RAM\\\", is RAM used while \\nprocessing a single doc. This RAM is re-used for each document (in the \\ntrunk, it\'s GC\'d and new RAM is allocated; in my patch, I explicitly \\nre-use these objects) and how large it gets is driven by how big each \\ndocument is. \\n\\n The second class, \\\"indexed documents RAM\\\", is the RAM used up by \\npreviously indexed documents.  This RAM grows with each added \\ndocument and how large it gets is driven by the number and size of \\ndocs indexed since the last flush. \\n\\n So when I say the writer is allowed to use 32 MB of RAM, I\'m only \\nmeasuring the \\\"indexed documents RAM\\\".  With trunk I do this by \\ncalling ramSizeInBytes(), and with my patch I do the analagous thing \\nby measuring how many RAM buffers are held up storing previously \\nindexed documents. \\n\\n I then define \\\"RAM efficiency\\\" (docs\\/MB) as how many docs we can hold \\nin \\\"indexed documents RAM\\\" per MB RAM, at the point that we flush to \\ndisk.  I think this is an important metric because it drives how large \\nyour initial (level 0) segments are.  The larger these segments are \\nthen generally the less merging you need to do, for a given # docs in \\nthe index. \\n\\n I also measure overall RAM used in the JVM (using \\nMemoryMXBean.getHeapMemoryUsage().getUsed()) just prior to each flush \\nexcept the last, to also capture the \\\"document processing RAM\\\", object \\noverhead, etc.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12486293\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12486293&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12486293\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486293_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486293_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 10:20\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T10:20:22+0000\'\u003e03\\/Apr\\/07 10:20\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eTo do the benchmarking I created a simple standalone tool\u003cbr\\/\u003e\\n(demo\\/IndexLineFiles, in the last patch) that indexes one line at a\u003cbr\\/\u003e\\ntime from a large previously created file, optionally using multiple\u003cbr\\/\u003e\\nthreads.  I do it this way to minimize IO cost of pulling the document\u003cbr\\/\u003e\\nsource because I want to measure just indexing time as much as possible.\u003c\\/p\u003e\\n\\n\u003cp\u003eEach line is read and a doc is created with field \\\"contents\\\" that is\u003cbr\\/\u003e\\nnot stored, is tokenized, and optionally has term vectors with\u003cbr\\/\u003e\\nposition+offsets.  I also optionally add two small only-stored fields\u003cbr\\/\u003e\\n(\\\"path\\\" and \\\"modified\\\").  I think these are fairly trivial documents\u003cbr\\/\u003e\\ncompared to typical usage of Lucene.\u003c\\/p\u003e\\n\\n\u003cp\u003eFor the corpus, I took Europarl\'s \\\"en\\\" content, stripped tags, and\u003cbr\\/\u003e\\nprocessed into 3 files: one with 100 tokens per line (= ~550 bytes),\u003cbr\\/\u003e\\none with 1000 tokens per line (= ~5,500 bytes) and with 10000 tokens\u003cbr\\/\u003e\\nper line (= ~55,000 bytes) plain text per line.\u003c\\/p\u003e\\n\\n\u003cp\u003eAll settings (mergeFactor, compound file, etc.) are left at defaults.\u003cbr\\/\u003e\\nI don\'t optimize the index in the end.  I\'m using my new\u003cbr\\/\u003e\\nSimpleSpaceAnalyzer (just splits token on the space character and\u003cbr\\/\u003e\\ncreates token text as slice into a char[] array instead of new\u003cbr\\/\u003e\\nString(...)) to minimize the cost of tokenization.\u003c\\/p\u003e\\n\\n\u003cp\u003eI ran the tests with Java 1.5 on a Mac Pro quad (2 Intel CPUs, each\u003cbr\\/\u003e\\ndual core) OS X box with 2 GB RAM.  I give java 1 GB heap (-Xmx1024m).\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486293_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486293_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 10:20\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T10:20:22+0000\'\u003e03\\/Apr\\/07 10:20\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    To do the benchmarking I created a simple standalone tool \\n(demo\\/IndexLineFiles, in the last patch) that indexes one line at a \\ntime from a large previously created file, optionally using multiple \\nthreads.  I do it this way to minimize IO cost of pulling the document \\nsource because I want to measure just indexing time as much as possible. \\n\\n Each line is read and a doc is created with field \\\"contents\\\" that is \\nnot stored, is tokenized, and optionally has term vectors with \\nposition+offsets.  I also optionally add two small only-stored fields \\n(\\\"path\\\" and \\\"modified\\\").  I think these are fairly trivial documents \\ncompared to typical usage of Lucene. \\n\\n For the corpus, I took Europarl\'s \\\"en\\\" content, stripped tags, and \\nprocessed into 3 files: one with 100 tokens per line (= ~550 bytes), \\none with 1000 tokens per line (= ~5,500 bytes) and with 10000 tokens \\nper line (= ~55,000 bytes) plain text per line. \\n\\n All settings (mergeFactor, compound file, etc.) are left at defaults. \\nI don\'t optimize the index in the end.  I\'m using my new \\nSimpleSpaceAnalyzer (just splits token on the space character and \\ncreates token text as slice into a char[] array instead of new \\nString(...)) to minimize the cost of tokenization. \\n\\n I ran the tests with Java 1.5 on a Mac Pro quad (2 Intel CPUs, each \\ndual core) OS X box with 2 GB RAM.  I give java 1 GB heap (-Xmx1024m).              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12486332\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12486332&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12486332\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486332_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486332_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 12:11\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T12:11:07+0000\'\u003e03\\/Apr\\/07 12:11\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eA couple more details on the testing: I run java -server to get all\u003cbr\\/\u003e\\noptimizations in the JVM, and the IO system is a local OS X RAID 0 of\u003cbr\\/\u003e\\n4 SATA drives.\u003c\\/p\u003e\\n\\n\u003cp\u003eUsing the above tool I ran an initial set of benchmarks comparing old\u003cbr\\/\u003e\\n(= Lucene trunk) vs new (= this patch), varying document size (~550\u003cbr\\/\u003e\\nbytes to ~5,500 bytes to ~55,000 bytes of plain text from Europarl\u003cbr\\/\u003e\\n\\\"en\\\").\u003c\\/p\u003e\\n\\n\u003cp\u003eFor each document size I run 4 combinations of whether term vectors\u003cbr\\/\u003e\\nand stored fields are on or off and whether autoCommit is true or\u003cbr\\/\u003e\\nfalse.  I measure net docs\\/sec (= total # docs indexed divided by\u003cbr\\/\u003e\\ntotal time taken), RAM efficiency (= avg # docs flushed with each\u003cbr\\/\u003e\\nflush divided by RAM buffer size), and avg HEAP RAM usage before each\u003cbr\\/\u003e\\nflush.\u003c\\/p\u003e\\n\\n\u003cp\u003eHere are the results for the 10K tokens (= ~55,000 bytes plain text)\u003cbr\\/\u003e\\nper document:\u003c\\/p\u003e\\n\\n\u003cp\u003e  20000 DOCS @ ~55,000 bytes plain text\u003cbr\\/\u003e\\n  RAM = 32 MB\u003cbr\\/\u003e\\n  NUM THREADS = 1\u003cbr\\/\u003e\\n  MERGE FACTOR = 10\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e    No term vectors nor stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          20000 docs in 200.3 secs\u003cbr\\/\u003e\\n          index size = 358M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          20000 docs in 126.0 secs\u003cbr\\/\u003e\\n          index size = 356M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old    99.8; new   158.7 [   59.0% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    24.2; new    49.1 [  102.5% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    74.5; new    36.2 [   51.4% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          20000 docs in 202.7 secs\u003cbr\\/\u003e\\n          index size = 358M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          20000 docs in 120.0 secs\u003cbr\\/\u003e\\n          index size = 354M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old    98.7; new   166.7 [   69.0% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    24.2; new    48.9 [  101.7% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    74.3; new    37.0 [   50.2% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e    With term vectors (positions + offsets) and 2 small stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          20000 docs in 374.7 secs\u003cbr\\/\u003e\\n          index size = 1.4G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          20000 docs in 236.1 secs\u003cbr\\/\u003e\\n          index size = 1.4G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old    53.4; new    84.7 [   58.7% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    10.2; new    49.1 [  382.8% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   129.3; new    36.6 [   71.7% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          20000 docs in 385.7 secs\u003cbr\\/\u003e\\n          index size = 1.4G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          20000 docs in 182.8 secs\u003cbr\\/\u003e\\n          index size = 1.4G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old    51.9; new   109.4 [  111.0% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    10.2; new    48.9 [  380.9% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    76.0; new    37.3 [   50.9% less]\u003c\\/p\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486332_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486332_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 12:11\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T12:11:07+0000\'\u003e03\\/Apr\\/07 12:11\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    A couple more details on the testing: I run java -server to get all \\noptimizations in the JVM, and the IO system is a local OS X RAID 0 of \\n4 SATA drives. \\n\\n Using the above tool I ran an initial set of benchmarks comparing old \\n(= Lucene trunk) vs new (= this patch), varying document size (~550 \\nbytes to ~5,500 bytes to ~55,000 bytes of plain text from Europarl \\n\\\"en\\\"). \\n\\n For each document size I run 4 combinations of whether term vectors \\nand stored fields are on or off and whether autoCommit is true or \\nfalse.  I measure net docs\\/sec (= total # docs indexed divided by \\ntotal time taken), RAM efficiency (= avg # docs flushed with each \\nflush divided by RAM buffer size), and avg HEAP RAM usage before each \\nflush. \\n\\n Here are the results for the 10K tokens (= ~55,000 bytes plain text) \\nper document: \\n\\n   20000 DOCS @ ~55,000 bytes plain text \\n  RAM = 32 MB \\n  NUM THREADS = 1 \\n  MERGE FACTOR = 10 \\n\\n\\n     No term vectors nor stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          20000 docs in 200.3 secs \\n          index size = 358M \\n\\n         new \\n          20000 docs in 126.0 secs \\n          index size = 356M \\n\\n         Total Docs\\/sec:             old    99.8; new   158.7 [   59.0% faster] \\n        Docs\\/MB @ flush:            old    24.2; new    49.1 [  102.5% more] \\n        Avg RAM used (MB) @ flush:  old    74.5; new    36.2 [   51.4% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          20000 docs in 202.7 secs \\n          index size = 358M \\n\\n         new \\n          20000 docs in 120.0 secs \\n          index size = 354M \\n\\n         Total Docs\\/sec:             old    98.7; new   166.7 [   69.0% faster] \\n        Docs\\/MB @ flush:            old    24.2; new    48.9 [  101.7% more] \\n        Avg RAM used (MB) @ flush:  old    74.3; new    37.0 [   50.2% less] \\n\\n\\n\\n     With term vectors (positions + offsets) and 2 small stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          20000 docs in 374.7 secs \\n          index size = 1.4G \\n\\n         new \\n          20000 docs in 236.1 secs \\n          index size = 1.4G \\n\\n         Total Docs\\/sec:             old    53.4; new    84.7 [   58.7% faster] \\n        Docs\\/MB @ flush:            old    10.2; new    49.1 [  382.8% more] \\n        Avg RAM used (MB) @ flush:  old   129.3; new    36.6 [   71.7% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          20000 docs in 385.7 secs \\n          index size = 1.4G \\n\\n         new \\n          20000 docs in 182.8 secs \\n          index size = 1.4G \\n\\n         Total Docs\\/sec:             old    51.9; new   109.4 [  111.0% faster] \\n        Docs\\/MB @ flush:            old    10.2; new    48.9 [  380.9% more] \\n        Avg RAM used (MB) @ flush:  old    76.0; new    37.3 [   50.9% less] \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12486334\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12486334&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12486334\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486334_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486334_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 12:15\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T12:15:31+0000\'\u003e03\\/Apr\\/07 12:15\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eHere are the results for \\\"normal\\\" sized docs (1K tokens = ~5,500 bytes plain text each):\u003c\\/p\u003e\\n\\n\u003cp\u003e  200000 DOCS @ ~5,500 bytes plain text\u003cbr\\/\u003e\\n  RAM = 32 MB\u003cbr\\/\u003e\\n  NUM THREADS = 1\u003cbr\\/\u003e\\n  MERGE FACTOR = 10\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e    No term vectors nor stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 397.6 secs\u003cbr\\/\u003e\\n          index size = 415M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 167.5 secs\u003cbr\\/\u003e\\n          index size = 411M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   503.1; new  1194.1 [  137.3% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    81.6; new   406.2 [  397.6% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    87.3; new    35.2 [   59.7% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 394.6 secs\u003cbr\\/\u003e\\n          index size = 415M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 168.4 secs\u003cbr\\/\u003e\\n          index size = 408M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   506.9; new  1187.7 [  134.3% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    81.6; new   432.2 [  429.4% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   126.6; new    36.9 [   70.8% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e    With term vectors (positions + offsets) and 2 small stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 754.2 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 304.9 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   265.2; new   656.0 [  147.4% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    46.7; new   406.2 [  769.6% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    92.9; new    35.2 [   62.1% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 743.9 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 244.3 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   268.9; new   818.7 [  204.5% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    46.7; new   432.2 [  825.2% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    93.0; new    36.6 [   60.6% less]\u003c\\/p\u003e\\n\\n\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486334_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486334_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 12:15\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T12:15:31+0000\'\u003e03\\/Apr\\/07 12:15\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Here are the results for \\\"normal\\\" sized docs (1K tokens = ~5,500 bytes plain text each): \\n\\n   200000 DOCS @ ~5,500 bytes plain text \\n  RAM = 32 MB \\n  NUM THREADS = 1 \\n  MERGE FACTOR = 10 \\n\\n\\n     No term vectors nor stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          200000 docs in 397.6 secs \\n          index size = 415M \\n\\n         new \\n          200000 docs in 167.5 secs \\n          index size = 411M \\n\\n         Total Docs\\/sec:             old   503.1; new  1194.1 [  137.3% faster] \\n        Docs\\/MB @ flush:            old    81.6; new   406.2 [  397.6% more] \\n        Avg RAM used (MB) @ flush:  old    87.3; new    35.2 [   59.7% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          200000 docs in 394.6 secs \\n          index size = 415M \\n\\n         new \\n          200000 docs in 168.4 secs \\n          index size = 408M \\n\\n         Total Docs\\/sec:             old   506.9; new  1187.7 [  134.3% faster] \\n        Docs\\/MB @ flush:            old    81.6; new   432.2 [  429.4% more] \\n        Avg RAM used (MB) @ flush:  old   126.6; new    36.9 [   70.8% less] \\n\\n\\n\\n     With term vectors (positions + offsets) and 2 small stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          200000 docs in 754.2 secs \\n          index size = 1.7G \\n\\n         new \\n          200000 docs in 304.9 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   265.2; new   656.0 [  147.4% faster] \\n        Docs\\/MB @ flush:            old    46.7; new   406.2 [  769.6% more] \\n        Avg RAM used (MB) @ flush:  old    92.9; new    35.2 [   62.1% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          200000 docs in 743.9 secs \\n          index size = 1.7G \\n\\n         new \\n          200000 docs in 244.3 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   268.9; new   818.7 [  204.5% faster] \\n        Docs\\/MB @ flush:            old    46.7; new   432.2 [  825.2% more] \\n        Avg RAM used (MB) @ flush:  old    93.0; new    36.6 [   60.6% less] \\n\\n\\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12486335\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12486335&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12486335\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486335_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486335_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 12:16\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T12:16:20+0000\'\u003e03\\/Apr\\/07 12:16\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\\n\u003cp\u003eLast is the results for small docs (100 tokens = ~550 bytes plain text each):\u003c\\/p\u003e\\n\\n\u003cp\u003e  2000000 DOCS @ ~550 bytes plain text\u003cbr\\/\u003e\\n  RAM = 32 MB\u003cbr\\/\u003e\\n  NUM THREADS = 1\u003cbr\\/\u003e\\n  MERGE FACTOR = 10\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e    No term vectors nor stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          2000000 docs in 886.7 secs\u003cbr\\/\u003e\\n          index size = 438M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          2000000 docs in 230.5 secs\u003cbr\\/\u003e\\n          index size = 435M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old  2255.6; new  8676.4 [  284.7% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old   128.0; new  4194.6 [ 3176.2% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   107.3; new    37.7 [   64.9% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          2000000 docs in 888.7 secs\u003cbr\\/\u003e\\n          index size = 438M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          2000000 docs in 239.6 secs\u003cbr\\/\u003e\\n          index size = 432M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old  2250.5; new  8348.7 [  271.0% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old   128.0; new  4146.8 [ 3138.9% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   108.1; new    38.9 [   64.0% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e    With term vectors (positions + offsets) and 2 small stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          2000000 docs in 1480.1 secs\u003cbr\\/\u003e\\n          index size = 2.1G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          2000000 docs in 462.0 secs\u003cbr\\/\u003e\\n          index size = 2.1G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old  1351.2; new  4329.3 [  220.4% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    93.1; new  4194.6 [ 4405.7% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   296.4; new    38.3 [   87.1% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          2000000 docs in 1489.4 secs\u003cbr\\/\u003e\\n          index size = 2.1G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          2000000 docs in 347.9 secs\u003cbr\\/\u003e\\n          index size = 2.1G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old  1342.8; new  5749.4 [  328.2% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    93.1; new  4146.8 [ 4354.5% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   297.1; new    38.6 [   87.0% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e  200000 DOCS @ ~5,500 bytes plain text\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e    No term vectors nor stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 397.6 secs\u003cbr\\/\u003e\\n          index size = 415M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 167.5 secs\u003cbr\\/\u003e\\n          index size = 411M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   503.1; new  1194.1 [  137.3% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    81.6; new   406.2 [  397.6% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    87.3; new    35.2 [   59.7% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 394.6 secs\u003cbr\\/\u003e\\n          index size = 415M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 168.4 secs\u003cbr\\/\u003e\\n          index size = 408M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   506.9; new  1187.7 [  134.3% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    81.6; new   432.2 [  429.4% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   126.6; new    36.9 [   70.8% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e    With term vectors (positions + offsets) and 2 small stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 754.2 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 304.9 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   265.2; new   656.0 [  147.4% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    46.7; new   406.2 [  769.6% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    92.9; new    35.2 [   62.1% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 743.9 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 244.3 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   268.9; new   818.7 [  204.5% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    46.7; new   432.2 [  825.2% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    93.0; new    36.6 [   60.6% less]\u003c\\/p\u003e\\n\\n\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486335_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486335_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 12:16\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T12:16:20+0000\'\u003e03\\/Apr\\/07 12:16\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                   \\n Last is the results for small docs (100 tokens = ~550 bytes plain text each): \\n\\n   2000000 DOCS @ ~550 bytes plain text \\n  RAM = 32 MB \\n  NUM THREADS = 1 \\n  MERGE FACTOR = 10 \\n\\n\\n     No term vectors nor stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          2000000 docs in 886.7 secs \\n          index size = 438M \\n\\n         new \\n          2000000 docs in 230.5 secs \\n          index size = 435M \\n\\n         Total Docs\\/sec:             old  2255.6; new  8676.4 [  284.7% faster] \\n        Docs\\/MB @ flush:            old   128.0; new  4194.6 [ 3176.2% more] \\n        Avg RAM used (MB) @ flush:  old   107.3; new    37.7 [   64.9% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          2000000 docs in 888.7 secs \\n          index size = 438M \\n\\n         new \\n          2000000 docs in 239.6 secs \\n          index size = 432M \\n\\n         Total Docs\\/sec:             old  2250.5; new  8348.7 [  271.0% faster] \\n        Docs\\/MB @ flush:            old   128.0; new  4146.8 [ 3138.9% more] \\n        Avg RAM used (MB) @ flush:  old   108.1; new    38.9 [   64.0% less] \\n\\n\\n\\n     With term vectors (positions + offsets) and 2 small stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          2000000 docs in 1480.1 secs \\n          index size = 2.1G \\n\\n         new \\n          2000000 docs in 462.0 secs \\n          index size = 2.1G \\n\\n         Total Docs\\/sec:             old  1351.2; new  4329.3 [  220.4% faster] \\n        Docs\\/MB @ flush:            old    93.1; new  4194.6 [ 4405.7% more] \\n        Avg RAM used (MB) @ flush:  old   296.4; new    38.3 [   87.1% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          2000000 docs in 1489.4 secs \\n          index size = 2.1G \\n\\n         new \\n          2000000 docs in 347.9 secs \\n          index size = 2.1G \\n\\n         Total Docs\\/sec:             old  1342.8; new  5749.4 [  328.2% faster] \\n        Docs\\/MB @ flush:            old    93.1; new  4146.8 [ 4354.5% more] \\n        Avg RAM used (MB) @ flush:  old   297.1; new    38.6 [   87.0% less] \\n\\n\\n\\n   200000 DOCS @ ~5,500 bytes plain text \\n\\n\\n     No term vectors nor stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          200000 docs in 397.6 secs \\n          index size = 415M \\n\\n         new \\n          200000 docs in 167.5 secs \\n          index size = 411M \\n\\n         Total Docs\\/sec:             old   503.1; new  1194.1 [  137.3% faster] \\n        Docs\\/MB @ flush:            old    81.6; new   406.2 [  397.6% more] \\n        Avg RAM used (MB) @ flush:  old    87.3; new    35.2 [   59.7% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          200000 docs in 394.6 secs \\n          index size = 415M \\n\\n         new \\n          200000 docs in 168.4 secs \\n          index size = 408M \\n\\n         Total Docs\\/sec:             old   506.9; new  1187.7 [  134.3% faster] \\n        Docs\\/MB @ flush:            old    81.6; new   432.2 [  429.4% more] \\n        Avg RAM used (MB) @ flush:  old   126.6; new    36.9 [   70.8% less] \\n\\n\\n\\n     With term vectors (positions + offsets) and 2 small stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          200000 docs in 754.2 secs \\n          index size = 1.7G \\n\\n         new \\n          200000 docs in 304.9 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   265.2; new   656.0 [  147.4% faster] \\n        Docs\\/MB @ flush:            old    46.7; new   406.2 [  769.6% more] \\n        Avg RAM used (MB) @ flush:  old    92.9; new    35.2 [   62.1% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          200000 docs in 743.9 secs \\n          index size = 1.7G \\n\\n         new \\n          200000 docs in 244.3 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   268.9; new   818.7 [  204.5% faster] \\n        Docs\\/MB @ flush:            old    46.7; new   432.2 [  825.2% more] \\n        Avg RAM used (MB) @ flush:  old    93.0; new    36.6 [   60.6% less] \\n\\n\\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12486339\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12486339&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12486339\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486339_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486339_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 12:21\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T12:21:06+0000\'\u003e03\\/Apr\\/07 12:21\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eA few notes from these results:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eA real Lucene app won\'t see these gains because frequently the\u003cbr\\/\u003e\\n    retrieval of docs from the content source, and the tokenization,\u003cbr\\/\u003e\\n    take substantial amounts of time whereas for this test I\'ve\u003cbr\\/\u003e\\n    intentionally minimized the cost of those steps but they are very\u003cbr\\/\u003e\\n    low for this test because I\'m 1) pulling one line at a time from a\u003cbr\\/\u003e\\n    big text file, and 2) using my simplistic SimpleSpaceAnalyzer\u003cbr\\/\u003e\\n    which just breaks tokens at the space character.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eBest speedup is ~4.3X faster, for tiny docs (~550 bytes) with term\u003cbr\\/\u003e\\n    vectors and stored fields enabled and using autoCommit=false.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eLeast speedup is still ~1.6X faster, for large docs (~55,000\u003cbr\\/\u003e\\n    bytes) with autoCommit=true.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eThe autoCommit=false cases are a little unfair to the new patch\u003cbr\\/\u003e\\n    because with the new patch, you get a single-segment (optimized)\u003cbr\\/\u003e\\n    index in the end, but with existing Lucene trunk, you don\'t.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eWith term vectors and\\/or stored fields, autoCommit=false is quite\u003cbr\\/\u003e\\n    a bit faster with the patch, because we never pay the price to\u003cbr\\/\u003e\\n    merge them since they are written once.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eWith term vectors and\\/or stored fields, the new patch has\u003cbr\\/\u003e\\n    substantially better RAM efficiency.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eThe patch is especially faster and has better RAM efficiency with\u003cbr\\/\u003e\\n    smaller documents.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eThe actual HEAP RAM usage is quite a bit more stable with the\u003cbr\\/\u003e\\n    patch, especially with term vectors &amp; stored fields enabled.  I\u003cbr\\/\u003e\\n    think this is because the patch creates far less garbage for GC to\u003cbr\\/\u003e\\n    periodically reclaim.  I think this also means you could push your\u003cbr\\/\u003e\\n    RAM buffer size even higher to get better performance.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486339_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486339_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 12:21\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T12:21:06+0000\'\u003e03\\/Apr\\/07 12:21\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    A few notes from these results: \\n\\n \\n\\t A real Lucene app won\'t see these gains because frequently the \\n    retrieval of docs from the content source, and the tokenization, \\n    take substantial amounts of time whereas for this test I\'ve \\n    intentionally minimized the cost of those steps but they are very \\n    low for this test because I\'m 1) pulling one line at a time from a \\n    big text file, and 2) using my simplistic SimpleSpaceAnalyzer \\n    which just breaks tokens at the space character. \\n \\n\\n\\n \\n\\t Best speedup is ~4.3X faster, for tiny docs (~550 bytes) with term \\n    vectors and stored fields enabled and using autoCommit=false. \\n \\n\\n\\n \\n\\t Least speedup is still ~1.6X faster, for large docs (~55,000 \\n    bytes) with autoCommit=true. \\n \\n\\n\\n \\n\\t The autoCommit=false cases are a little unfair to the new patch \\n    because with the new patch, you get a single-segment (optimized) \\n    index in the end, but with existing Lucene trunk, you don\'t. \\n \\n\\n\\n \\n\\t With term vectors and\\/or stored fields, autoCommit=false is quite \\n    a bit faster with the patch, because we never pay the price to \\n    merge them since they are written once. \\n \\n\\n\\n \\n\\t With term vectors and\\/or stored fields, the new patch has \\n    substantially better RAM efficiency. \\n \\n\\n\\n \\n\\t The patch is especially faster and has better RAM efficiency with \\n    smaller documents. \\n \\n\\n\\n \\n\\t The actual HEAP RAM usage is quite a bit more stable with the \\n    patch, especially with term vectors &amp; stored fields enabled.  I \\n    think this is because the patch creates far less garbage for GC to \\n    periodically reclaim.  I think this also means you could push your \\n    RAM buffer size even higher to get better performance. \\n \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12486373\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12486373&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12486373\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12486373_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486373_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 14:23\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T14:23:33+0000\'\u003e03\\/Apr\\/07 14:23\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; The actual HEAP RAM usage is quite a bit more \u003cbr\\/\u003e\\n&gt; stable with the  patch, especially with term vectors \u003cbr\\/\u003e\\n&gt; &amp; stored fields enabled. I think this is because the \u003cbr\\/\u003e\\n&gt; patch creates far less garbage for GC to periodically \u003cbr\\/\u003e\\n&gt; reclaim. I think this also means you could push your \u003cbr\\/\u003e\\n&gt; RAM buffer size even higher to get better performance. \u003c\\/p\u003e\\n\\n\u003cp\u003eFor KinoSearch, the sweet spot seems to be a buffer of around 16 MB when benchmarking with the Reuters corpus on my G4 laptop. Larger than that and things actually slow down, unless the buffer is large enough that it never needs flushing. My hypothesis is that RAM fragmentation is slowing down malloc\\/free.  I\'ll be interested as to whether you see the same effect.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12486373_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486373_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 14:23\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T14:23:33+0000\'\u003e03\\/Apr\\/07 14:23\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; The actual HEAP RAM usage is quite a bit more  \\n&gt; stable with the  patch, especially with term vectors  \\n&gt; &amp; stored fields enabled. I think this is because the  \\n&gt; patch creates far less garbage for GC to periodically  \\n&gt; reclaim. I think this also means you could push your  \\n&gt; RAM buffer size even higher to get better performance.  \\n\\n For KinoSearch, the sweet spot seems to be a buffer of around 16 MB when benchmarking with the Reuters corpus on my G4 laptop. Larger than that and things actually slow down, unless the buffer is large enough that it never needs flushing. My hypothesis is that RAM fragmentation is slowing down malloc\\/free.  I\'ll be interested as to whether you see the same effect.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12486385\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12486385&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12486385\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486385_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486385_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 15:33\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T15:33:58+0000\'\u003e03\\/Apr\\/07 15:33\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\\n\u003cp\u003e&gt;&gt; The actual HEAP RAM usage is quite a bit more\u003cbr\\/\u003e\\n&gt;&gt; stable with the patch, especially with term vectors\u003cbr\\/\u003e\\n&gt;&gt; &amp; stored fields enabled. I think this is because the\u003cbr\\/\u003e\\n&gt;&gt; patch creates far less garbage for GC to periodically\u003cbr\\/\u003e\\n&gt;&gt; reclaim. I think this also means you could push your\u003cbr\\/\u003e\\n&gt;&gt; RAM buffer size even higher to get better performance.\u003cbr\\/\u003e\\n&gt;\u003cbr\\/\u003e\\n&gt; For KinoSearch, the sweet spot seems to be a buffer of around 16 MB\u003cbr\\/\u003e\\n&gt; when benchmarking with the Reuters corpus on my G4 laptop. Larger\u003cbr\\/\u003e\\n&gt; than that and things actually slow down, unless the buffer is large\u003cbr\\/\u003e\\n&gt; enough that it never needs flushing. My hypothesis is that RAM\u003cbr\\/\u003e\\n&gt; fragmentation is slowing down malloc\\/free. I\'ll be interested as to\u003cbr\\/\u003e\\n&gt; whether you see the same effect.\u003c\\/p\u003e\\n\\n\u003cp\u003eInteresting.  OK I will run the benchmark across increasing RAM sizes\u003cbr\\/\u003e\\nto see where the sweet spot seems to be!\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486385_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486385_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'03\\/Apr\\/07 15:33\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-03T15:33:58+0000\'\u003e03\\/Apr\\/07 15:33\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                   \\n &gt;&gt; The actual HEAP RAM usage is quite a bit more \\n&gt;&gt; stable with the patch, especially with term vectors \\n&gt;&gt; &amp; stored fields enabled. I think this is because the \\n&gt;&gt; patch creates far less garbage for GC to periodically \\n&gt;&gt; reclaim. I think this also means you could push your \\n&gt;&gt; RAM buffer size even higher to get better performance. \\n&gt; \\n&gt; For KinoSearch, the sweet spot seems to be a buffer of around 16 MB \\n&gt; when benchmarking with the Reuters corpus on my G4 laptop. Larger \\n&gt; than that and things actually slow down, unless the buffer is large \\n&gt; enough that it never needs flushing. My hypothesis is that RAM \\n&gt; fragmentation is slowing down malloc\\/free. I\'ll be interested as to \\n&gt; whether you see the same effect. \\n\\n Interesting.  OK I will run the benchmark across increasing RAM sizes \\nto see where the sweet spot seems to be!              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12486942\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12486942&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12486942\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486942_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486942_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'05\\/Apr\\/07 13:21\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-05T13:21:55+0000\'\u003e05\\/Apr\\/07 13:21\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\\n\u003cp\u003eOK I ran old (trunk) vs new (this patch) with increasing RAM buffer\u003cbr\\/\u003e\\nsizes up to 96 MB.\u003c\\/p\u003e\\n\\n\u003cp\u003eI used the \\\"normal\\\" sized docs (~5,500 bytes plain text), left stored\u003cbr\\/\u003e\\nfields and term vectors (positions + offsets) on, and\u003cbr\\/\u003e\\nautoCommit=false.\u003c\\/p\u003e\\n\\n\u003cp\u003eHere\'re the results:\u003c\\/p\u003e\\n\\n\u003cp\u003eNUM THREADS = 1\u003cbr\\/\u003e\\nMERGE FACTOR = 10\u003cbr\\/\u003e\\nWith term vectors (positions + offsets) and 2 small stored fields\u003cbr\\/\u003e\\nAUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e1 MB\u003c\\/p\u003e\\n\\n\u003cp\u003e  old\u003cbr\\/\u003e\\n    200000 docs in 862.2 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  new\u003cbr\\/\u003e\\n    200000 docs in 297.1 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  Total Docs\\/sec:             old   232.0; new   673.2 [  190.2% faster]\u003cbr\\/\u003e\\n  Docs\\/MB @ flush:            old    47.2; new   278.4 [  489.6% more]\u003cbr\\/\u003e\\n  Avg RAM used (MB) @ flush:  old    34.5; new     3.4 [   90.1% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e2 MB\u003c\\/p\u003e\\n\\n\u003cp\u003e  old\u003cbr\\/\u003e\\n    200000 docs in 828.7 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  new\u003cbr\\/\u003e\\n    200000 docs in 279.0 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  Total Docs\\/sec:             old   241.3; new   716.8 [  197.0% faster]\u003cbr\\/\u003e\\n  Docs\\/MB @ flush:            old    47.0; new   322.4 [  586.7% more]\u003cbr\\/\u003e\\n  Avg RAM used (MB) @ flush:  old    37.9; new     4.5 [   88.0% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e4 MB\u003c\\/p\u003e\\n\\n\u003cp\u003e  old\u003cbr\\/\u003e\\n    200000 docs in 840.5 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  new\u003cbr\\/\u003e\\n    200000 docs in 260.8 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  Total Docs\\/sec:             old   237.9; new   767.0 [  222.3% faster]\u003cbr\\/\u003e\\n  Docs\\/MB @ flush:            old    46.8; new   363.1 [  675.4% more]\u003cbr\\/\u003e\\n  Avg RAM used (MB) @ flush:  old    33.9; new     6.5 [   80.9% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e8 MB\u003c\\/p\u003e\\n\\n\u003cp\u003e  old\u003cbr\\/\u003e\\n    200000 docs in 678.8 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  new\u003cbr\\/\u003e\\n    200000 docs in 248.8 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  Total Docs\\/sec:             old   294.6; new   803.7 [  172.8% faster]\u003cbr\\/\u003e\\n  Docs\\/MB @ flush:            old    46.8; new   392.4 [  739.1% more]\u003cbr\\/\u003e\\n  Avg RAM used (MB) @ flush:  old    60.3; new    10.7 [   82.2% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e16 MB\u003c\\/p\u003e\\n\\n\u003cp\u003e  old\u003cbr\\/\u003e\\n    200000 docs in 660.6 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  new\u003cbr\\/\u003e\\n    200000 docs in 247.3 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  Total Docs\\/sec:             old   302.8; new   808.7 [  167.1% faster]\u003cbr\\/\u003e\\n  Docs\\/MB @ flush:            old    46.7; new   415.4 [  788.8% more]\u003cbr\\/\u003e\\n  Avg RAM used (MB) @ flush:  old    47.1; new    19.2 [   59.3% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e24 MB\u003c\\/p\u003e\\n\\n\u003cp\u003e  old\u003cbr\\/\u003e\\n    200000 docs in 658.1 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  new\u003cbr\\/\u003e\\n    200000 docs in 243.0 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  Total Docs\\/sec:             old   303.9; new   823.0 [  170.8% faster]\u003cbr\\/\u003e\\n  Docs\\/MB @ flush:            old    46.7; new   430.9 [  822.2% more]\u003cbr\\/\u003e\\n  Avg RAM used (MB) @ flush:  old    70.0; new    27.5 [   60.8% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e32 MB\u003c\\/p\u003e\\n\\n\u003cp\u003e  old\u003cbr\\/\u003e\\n    200000 docs in 714.2 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  new\u003cbr\\/\u003e\\n    200000 docs in 239.2 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  Total Docs\\/sec:             old   280.0; new   836.0 [  198.5% faster]\u003cbr\\/\u003e\\n  Docs\\/MB @ flush:            old    46.7; new   432.2 [  825.2% more]\u003cbr\\/\u003e\\n  Avg RAM used (MB) @ flush:  old    92.5; new    36.7 [   60.3% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e48 MB\u003c\\/p\u003e\\n\\n\u003cp\u003e  old\u003cbr\\/\u003e\\n    200000 docs in 640.3 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  new\u003cbr\\/\u003e\\n    200000 docs in 236.0 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  Total Docs\\/sec:             old   312.4; new   847.5 [  171.3% faster]\u003cbr\\/\u003e\\n  Docs\\/MB @ flush:            old    46.7; new   438.5 [  838.8% more]\u003cbr\\/\u003e\\n  Avg RAM used (MB) @ flush:  old   138.9; new    52.8 [   62.0% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e64 MB\u003c\\/p\u003e\\n\\n\u003cp\u003e  old\u003cbr\\/\u003e\\n    200000 docs in 649.3 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  new\u003cbr\\/\u003e\\n    200000 docs in 238.3 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  Total Docs\\/sec:             old   308.0; new   839.3 [  172.5% faster]\u003cbr\\/\u003e\\n  Docs\\/MB @ flush:            old    46.7; new   441.3 [  844.7% more]\u003cbr\\/\u003e\\n  Avg RAM used (MB) @ flush:  old   302.6; new    72.7 [   76.0% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e80 MB\u003c\\/p\u003e\\n\\n\u003cp\u003e  old\u003cbr\\/\u003e\\n    200000 docs in 670.2 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  new\u003cbr\\/\u003e\\n    200000 docs in 227.2 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  Total Docs\\/sec:             old   298.4; new   880.5 [  195.0% faster]\u003cbr\\/\u003e\\n  Docs\\/MB @ flush:            old    46.7; new   446.2 [  855.2% more]\u003cbr\\/\u003e\\n  Avg RAM used (MB) @ flush:  old   231.7; new    94.3 [   59.3% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e96 MB\u003c\\/p\u003e\\n\\n\u003cp\u003e  old\u003cbr\\/\u003e\\n    200000 docs in 683.4 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  new\u003cbr\\/\u003e\\n    200000 docs in 226.8 secs\u003cbr\\/\u003e\\n    index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e  Total Docs\\/sec:             old   292.7; new   882.0 [  201.4% faster]\u003cbr\\/\u003e\\n  Docs\\/MB @ flush:            old    46.7; new   448.0 [  859.1% more]\u003cbr\\/\u003e\\n  Avg RAM used (MB) @ flush:  old   274.5; new   112.7 [   59.0% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003eSome observations:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eRemember the test is already biased against \\\"new\\\" because with the\u003cbr\\/\u003e\\n    patch you get an optimized index in the end but with \\\"old\\\" you\u003cbr\\/\u003e\\n    don\'t.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eSweet spot for old (trunk) seems to be 48 MB: that is the peak\u003cbr\\/\u003e\\n    docs\\/sec @ 312.4.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eNew (with patch) seems to just get faster the more memory you give\u003cbr\\/\u003e\\n    it, though gradually.  The peak was 96 MB (the largest I ran).  So\u003cbr\\/\u003e\\n    no sweet spot (or maybe I need to give more memory, but, above 96\u003cbr\\/\u003e\\n    MB the trunk was starting to swap on my test env).\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eNew gets better and better RAM efficiency, the more RAM you give.\u003cbr\\/\u003e\\n    This makes sense: it\'s better able to compress the terms dict, the\u003cbr\\/\u003e\\n    more docs are merged in RAM before having to flush to disk.  I\u003cbr\\/\u003e\\n    would also expect this curve to be somewhat content dependent.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12486942_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12486942_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'05\\/Apr\\/07 13:21\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-05T13:21:55+0000\'\u003e05\\/Apr\\/07 13:21\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                   \\n OK I ran old (trunk) vs new (this patch) with increasing RAM buffer \\nsizes up to 96 MB. \\n\\n I used the \\\"normal\\\" sized docs (~5,500 bytes plain text), left stored \\nfields and term vectors (positions + offsets) on, and \\nautoCommit=false. \\n\\n Here\'re the results: \\n\\n NUM THREADS = 1 \\nMERGE FACTOR = 10 \\nWith term vectors (positions + offsets) and 2 small stored fields \\nAUTOCOMMIT = false (commit only once at the end) \\n\\n\\n 1 MB \\n\\n   old \\n    200000 docs in 862.2 secs \\n    index size = 1.7G \\n\\n   new \\n    200000 docs in 297.1 secs \\n    index size = 1.7G \\n\\n   Total Docs\\/sec:             old   232.0; new   673.2 [  190.2% faster] \\n  Docs\\/MB @ flush:            old    47.2; new   278.4 [  489.6% more] \\n  Avg RAM used (MB) @ flush:  old    34.5; new     3.4 [   90.1% less] \\n\\n\\n\\n 2 MB \\n\\n   old \\n    200000 docs in 828.7 secs \\n    index size = 1.7G \\n\\n   new \\n    200000 docs in 279.0 secs \\n    index size = 1.7G \\n\\n   Total Docs\\/sec:             old   241.3; new   716.8 [  197.0% faster] \\n  Docs\\/MB @ flush:            old    47.0; new   322.4 [  586.7% more] \\n  Avg RAM used (MB) @ flush:  old    37.9; new     4.5 [   88.0% less] \\n\\n\\n\\n 4 MB \\n\\n   old \\n    200000 docs in 840.5 secs \\n    index size = 1.7G \\n\\n   new \\n    200000 docs in 260.8 secs \\n    index size = 1.7G \\n\\n   Total Docs\\/sec:             old   237.9; new   767.0 [  222.3% faster] \\n  Docs\\/MB @ flush:            old    46.8; new   363.1 [  675.4% more] \\n  Avg RAM used (MB) @ flush:  old    33.9; new     6.5 [   80.9% less] \\n\\n\\n\\n 8 MB \\n\\n   old \\n    200000 docs in 678.8 secs \\n    index size = 1.7G \\n\\n   new \\n    200000 docs in 248.8 secs \\n    index size = 1.7G \\n\\n   Total Docs\\/sec:             old   294.6; new   803.7 [  172.8% faster] \\n  Docs\\/MB @ flush:            old    46.8; new   392.4 [  739.1% more] \\n  Avg RAM used (MB) @ flush:  old    60.3; new    10.7 [   82.2% less] \\n\\n\\n\\n 16 MB \\n\\n   old \\n    200000 docs in 660.6 secs \\n    index size = 1.7G \\n\\n   new \\n    200000 docs in 247.3 secs \\n    index size = 1.7G \\n\\n   Total Docs\\/sec:             old   302.8; new   808.7 [  167.1% faster] \\n  Docs\\/MB @ flush:            old    46.7; new   415.4 [  788.8% more] \\n  Avg RAM used (MB) @ flush:  old    47.1; new    19.2 [   59.3% less] \\n\\n\\n\\n 24 MB \\n\\n   old \\n    200000 docs in 658.1 secs \\n    index size = 1.7G \\n\\n   new \\n    200000 docs in 243.0 secs \\n    index size = 1.7G \\n\\n   Total Docs\\/sec:             old   303.9; new   823.0 [  170.8% faster] \\n  Docs\\/MB @ flush:            old    46.7; new   430.9 [  822.2% more] \\n  Avg RAM used (MB) @ flush:  old    70.0; new    27.5 [   60.8% less] \\n\\n\\n\\n 32 MB \\n\\n   old \\n    200000 docs in 714.2 secs \\n    index size = 1.7G \\n\\n   new \\n    200000 docs in 239.2 secs \\n    index size = 1.7G \\n\\n   Total Docs\\/sec:             old   280.0; new   836.0 [  198.5% faster] \\n  Docs\\/MB @ flush:            old    46.7; new   432.2 [  825.2% more] \\n  Avg RAM used (MB) @ flush:  old    92.5; new    36.7 [   60.3% less] \\n\\n\\n\\n 48 MB \\n\\n   old \\n    200000 docs in 640.3 secs \\n    index size = 1.7G \\n\\n   new \\n    200000 docs in 236.0 secs \\n    index size = 1.7G \\n\\n   Total Docs\\/sec:             old   312.4; new   847.5 [  171.3% faster] \\n  Docs\\/MB @ flush:            old    46.7; new   438.5 [  838.8% more] \\n  Avg RAM used (MB) @ flush:  old   138.9; new    52.8 [   62.0% less] \\n\\n\\n\\n 64 MB \\n\\n   old \\n    200000 docs in 649.3 secs \\n    index size = 1.7G \\n\\n   new \\n    200000 docs in 238.3 secs \\n    index size = 1.7G \\n\\n   Total Docs\\/sec:             old   308.0; new   839.3 [  172.5% faster] \\n  Docs\\/MB @ flush:            old    46.7; new   441.3 [  844.7% more] \\n  Avg RAM used (MB) @ flush:  old   302.6; new    72.7 [   76.0% less] \\n\\n\\n\\n 80 MB \\n\\n   old \\n    200000 docs in 670.2 secs \\n    index size = 1.7G \\n\\n   new \\n    200000 docs in 227.2 secs \\n    index size = 1.7G \\n\\n   Total Docs\\/sec:             old   298.4; new   880.5 [  195.0% faster] \\n  Docs\\/MB @ flush:            old    46.7; new   446.2 [  855.2% more] \\n  Avg RAM used (MB) @ flush:  old   231.7; new    94.3 [   59.3% less] \\n\\n\\n\\n 96 MB \\n\\n   old \\n    200000 docs in 683.4 secs \\n    index size = 1.7G \\n\\n   new \\n    200000 docs in 226.8 secs \\n    index size = 1.7G \\n\\n   Total Docs\\/sec:             old   292.7; new   882.0 [  201.4% faster] \\n  Docs\\/MB @ flush:            old    46.7; new   448.0 [  859.1% more] \\n  Avg RAM used (MB) @ flush:  old   274.5; new   112.7 [   59.0% less] \\n\\n\\n Some observations: \\n\\n \\n\\t Remember the test is already biased against \\\"new\\\" because with the \\n    patch you get an optimized index in the end but with \\\"old\\\" you \\n    don\'t. \\n \\n\\n\\n \\n\\t Sweet spot for old (trunk) seems to be 48 MB: that is the peak \\n    docs\\/sec @ 312.4. \\n \\n\\n\\n \\n\\t New (with patch) seems to just get faster the more memory you give \\n    it, though gradually.  The peak was 96 MB (the largest I ran).  So \\n    no sweet spot (or maybe I need to give more memory, but, above 96 \\n    MB the trunk was starting to swap on my test env). \\n \\n\\n\\n \\n\\t New gets better and better RAM efficiency, the more RAM you give. \\n    This makes sense: it\'s better able to compress the terms dict, the \\n    more docs are merged in RAM before having to flush to disk.  I \\n    would also expect this curve to be somewhat content dependent. \\n \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12492650\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12492650&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12492650\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12492650_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492650_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 10:39\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T10:39:19+0000\'\u003e30\\/Apr\\/07 10:39\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI attached a new iteration of the patch.  It\'s quite different from\u003cbr\\/\u003e\\nthe last patch.\u003c\\/p\u003e\\n\\n\u003cp\u003eAfter discussion on java-dev last time, I decided to retry the\u003cbr\\/\u003e\\n\\\"persistent hash\\\" approach, where the Postings hash lasts across many\u003cbr\\/\u003e\\ndocs and then a single flush produces a partial segment containing all\u003cbr\\/\u003e\\nof those docs.  This is in contrast to the previous approach where\u003cbr\\/\u003e\\neach doc makes its own segment and then they are merged.\u003c\\/p\u003e\\n\\n\u003cp\u003eIt turns out this is even faster than my previous approach, especially\u003cbr\\/\u003e\\nfor smaller docs and especially when term vectors are off (because no\u003cbr\\/\u003e\\nquicksort() is needed until the segment is flushed).  I will attach\u003cbr\\/\u003e\\nnew benchmark results.\u003c\\/p\u003e\\n\\n\u003cp\u003eOther changes:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eChanged my benchmarking tool \\/ testing (IndexLineFiles):\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eI turned off compound file (to reduce time NOT spent on\u003cbr\\/\u003e\\n      indexing).\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eI noticed I was not downcasing the terms, so I fixed that\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eI now do my own line processing to reduce GC cost of\u003cbr\\/\u003e\\n      \\\"BufferedReader.readLine\\\" (to reduct time NOT spent on\u003cbr\\/\u003e\\n      indexing).\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eNorms now properly flush to disk in the autoCommit=false case\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eAll unit tests pass except disk full\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eI turned on asserts for unit tests (jvm arg -ea added to junit ant\u003cbr\\/\u003e\\n    task).  I think we should use asserts when running tests.  I have\u003cbr\\/\u003e\\n    quite a few asserts now.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eWith this new approach, as I process each term in the document I\u003cbr\\/\u003e\\nimmediately write the prox\\/freq in their compact (vints) format into\u003cbr\\/\u003e\\nshared byte[] buffers, rather than accumulating int[] arrays that then\u003cbr\\/\u003e\\nneed to be re-processed into the vint encoding.  This speeds things up\u003cbr\\/\u003e\\nbecause we don\'t double-process the postings.  It also uses less\u003cbr\\/\u003e\\nper-document RAM overhead because intermediate postings are stored as\u003cbr\\/\u003e\\nvints not as ints.\u003c\\/p\u003e\\n\\n\u003cp\u003eWhen enough RAM is used by the Posting entries plus the byte[]\u003cbr\\/\u003e\\nbuffers, I flush them to a partial RAM segment.  When enough of these\u003cbr\\/\u003e\\nRAM segments have accumulated I flush to a real Lucene segment\u003cbr\\/\u003e\\n(autoCommit=true) or to on-disk partial segments (autoCommit=false)\u003cbr\\/\u003e\\nwhich are then merged in the end to create a real Lucene segment.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12492650_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492650_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 10:39\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T10:39:19+0000\'\u003e30\\/Apr\\/07 10:39\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I attached a new iteration of the patch.  It\'s quite different from \\nthe last patch. \\n\\n After discussion on java-dev last time, I decided to retry the \\n\\\"persistent hash\\\" approach, where the Postings hash lasts across many \\ndocs and then a single flush produces a partial segment containing all \\nof those docs.  This is in contrast to the previous approach where \\neach doc makes its own segment and then they are merged. \\n\\n It turns out this is even faster than my previous approach, especially \\nfor smaller docs and especially when term vectors are off (because no \\nquicksort() is needed until the segment is flushed).  I will attach \\nnew benchmark results. \\n\\n Other changes: \\n\\n \\n\\t Changed my benchmarking tool \\/ testing (IndexLineFiles): \\n \\n\\n\\n \\n\\t I turned off compound file (to reduce time NOT spent on \\n      indexing). \\n \\n\\n\\n \\n\\t I noticed I was not downcasing the terms, so I fixed that \\n \\n\\n\\n \\n\\t I now do my own line processing to reduce GC cost of \\n      \\\"BufferedReader.readLine\\\" (to reduct time NOT spent on \\n      indexing). \\n \\n\\n\\n \\n\\t Norms now properly flush to disk in the autoCommit=false case \\n \\n\\n\\n \\n\\t All unit tests pass except disk full \\n \\n\\n\\n \\n\\t I turned on asserts for unit tests (jvm arg -ea added to junit ant \\n    task).  I think we should use asserts when running tests.  I have \\n    quite a few asserts now. \\n \\n\\n\\n With this new approach, as I process each term in the document I \\nimmediately write the prox\\/freq in their compact (vints) format into \\nshared byte[] buffers, rather than accumulating int[] arrays that then \\nneed to be re-processed into the vint encoding.  This speeds things up \\nbecause we don\'t double-process the postings.  It also uses less \\nper-document RAM overhead because intermediate postings are stored as \\nvints not as ints. \\n\\n When enough RAM is used by the Posting entries plus the byte[] \\nbuffers, I flush them to a partial RAM segment.  When enough of these \\nRAM segments have accumulated I flush to a real Lucene segment \\n(autoCommit=true) or to on-disk partial segments (autoCommit=false) \\nwhich are then merged in the end to create a real Lucene segment.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12492655\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12492655&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12492655\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12492655_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492655_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 11:44\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T11:44:28+0000\'\u003e30\\/Apr\\/07 11:44\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eHow are you writing the frq data in compressed format?  The  works fine for\u003cbr\\/\u003e\\nprx data, because the deltas are all within a single doc &#8211; but for  the freq\u003cbr\\/\u003e\\ndata, the deltas are tied up in doc num deltas, so you have to decompress it\u003cbr\\/\u003e\\nwhen performing merges.  \u003c\\/p\u003e\\n\\n\u003cp\u003eTo continue our discussion from java-dev... \u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eI haven\'t been able to come up with a file format tweak that\u003cbr\\/\u003e\\n   gets around this doc-num-delta-decompression problem to enhance the speed\u003cbr\\/\u003e\\n   of frq data merging. I toyed with splitting off the freq from the\u003cbr\\/\u003e\\n   doc_delta, at the price of increasing the file size in the common case of\u003cbr\\/\u003e\\n   freq == 1, but went back to the old design.  It\'s not worth the size\u003cbr\\/\u003e\\n   increase for what\'s at best a minor indexing speedup.\u003c\\/li\u003e\\n\\t\u003cli\u003eI\'ve added a custom MemoryPool class to KS which grabs memory in 1 meg\u003cbr\\/\u003e\\n   chunks, allows resizing (downwards) of only the last allocation, and can\u003cbr\\/\u003e\\n   only release everything at once.  From one of these pools, I\'m allocating\u003cbr\\/\u003e\\n   RawPosting objects, each of which is a doc_num, a freq, the term_text, and\u003cbr\\/\u003e\\n   the pre-packed prx data (which varies based on which Posting subclass\u003cbr\\/\u003e\\n   created the RawPosting object).  I haven\'t got things 100% stable yet, but\u003cbr\\/\u003e\\n   preliminary results seem to indicate that this technique, which is a riff\u003cbr\\/\u003e\\n   on your persistent arrays, improves indexing speed by about 15%.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"creamyg\\\" id=\\\"commentauthor_12492655_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=creamyg\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"creamyg\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Marvin Humphrey\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492655_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 11:44\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T11:44:28+0000\'\u003e30\\/Apr\\/07 11:44\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    How are you writing the frq data in compressed format?  The  works fine for \\nprx data, because the deltas are all within a single doc &#8211; but for  the freq \\ndata, the deltas are tied up in doc num deltas, so you have to decompress it \\nwhen performing merges.   \\n\\n To continue our discussion from java-dev...  \\n\\n \\n\\t I haven\'t been able to come up with a file format tweak that \\n   gets around this doc-num-delta-decompression problem to enhance the speed \\n   of frq data merging. I toyed with splitting off the freq from the \\n   doc_delta, at the price of increasing the file size in the common case of \\n   freq == 1, but went back to the old design.  It\'s not worth the size \\n   increase for what\'s at best a minor indexing speedup. \\n\\t I\'ve added a custom MemoryPool class to KS which grabs memory in 1 meg \\n   chunks, allows resizing (downwards) of only the last allocation, and can \\n   only release everything at once.  From one of these pools, I\'m allocating \\n   RawPosting objects, each of which is a doc_num, a freq, the term_text, and \\n   the pre-packed prx data (which varies based on which Posting subclass \\n   created the RawPosting object).  I haven\'t got things 100% stable yet, but \\n   preliminary results seem to indicate that this technique, which is a riff \\n   on your persistent arrays, improves indexing speed by about 15%. \\n \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12492658\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12492658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12492658\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12492658_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492658_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 12:14\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T12:14:37+0000\'\u003e30\\/Apr\\/07 12:14\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\\n\u003cp\u003e&gt; How are you writing the frq data in compressed format? The works fine for\u003cbr\\/\u003e\\n&gt; prx data, because the deltas are all within a single doc &#8211; but for the freq\u003cbr\\/\u003e\\n&gt; data, the deltas are tied up in doc num deltas, so you have to decompress it\u003cbr\\/\u003e\\n&gt; when performing merges.\u003c\\/p\u003e\\n\\n\u003cp\u003eFor each Posting I keep track of the last docID that its term occurred\u003cbr\\/\u003e\\nin; when this differs from the current docID I record the \\\"delta code\\\"\u003cbr\\/\u003e\\nthat needs to be written and then I later write it with the final freq\u003cbr\\/\u003e\\nfor this document.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; * I haven\'t been able to come up with a file format tweak that\u003cbr\\/\u003e\\n&gt;   gets around this doc-num-delta-decompression problem to enhance the speed\u003cbr\\/\u003e\\n&gt;   of frq data merging. I toyed with splitting off the freq from the\u003cbr\\/\u003e\\n&gt;   doc_delta, at the price of increasing the file size in the common case of\u003cbr\\/\u003e\\n&gt;   freq == 1, but went back to the old design. It\'s not worth the size\u003cbr\\/\u003e\\n&gt;   increase for what\'s at best a minor indexing speedup.\u003c\\/p\u003e\\n\\n\u003cp\u003eI\'m just doing the \\\"stitching\\\" approach here: it\'s only the very first\u003cbr\\/\u003e\\ndocCode (&amp; freq when freq==1) that must be re-encoded on merging.  The\u003cbr\\/\u003e\\none catch is you must store the last docID of the previous segment so\u003cbr\\/\u003e\\nyou can compute the new delta at the boundary.  Then I do a raw\u003cbr\\/\u003e\\n\\\"copyBytes\\\" for the remainder of the freq postings.\u003c\\/p\u003e\\n\\n\u003cp\u003eNote that I\'m only doing this for the \\\"internal\\\" merges (of partial\u003cbr\\/\u003e\\nRAM segments and flushed partial segments) I do before creating a real\u003cbr\\/\u003e\\nLucene segment.  I haven\'t changed how the \\\"normal\\\" Lucene segment\u003cbr\\/\u003e\\nmerging works (though I think we should look into it &#8211; I opened a\u003cbr\\/\u003e\\nseparate issue): it still re-interprets and then re-encodes all\u003cbr\\/\u003e\\ndocID\\/freq\'s.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; * I\'ve added a custom MemoryPool class to KS which grabs memory in 1 meg\u003cbr\\/\u003e\\n&gt;   chunks, allows resizing (downwards) of only the last allocation, and can\u003cbr\\/\u003e\\n&gt;   only release everything at once. From one of these pools, I\'m allocating\u003cbr\\/\u003e\\n&gt;    RawPosting objects, each of which is a doc_num, a freq, the term_text, and\u003cbr\\/\u003e\\n&gt;   the pre-packed prx data (which varies based on which Posting subclass\u003cbr\\/\u003e\\n&gt;   created the RawPosting object). I haven\'t got things 100% stable yet, but\u003cbr\\/\u003e\\n&gt;   preliminary results seem to indicate that this technique, which is a riff\u003cbr\\/\u003e\\n&gt;   on your persistent arrays, improves indexing speed by about 15%.\u003c\\/p\u003e\\n\\n\u003cp\u003eFabulous!!\u003c\\/p\u003e\\n\\n\u003cp\u003eI think it\'s the custom memory management I\'m doing with slices into\u003cbr\\/\u003e\\nshared byte[] arrays for the postings that made the persistent hash\u003cbr\\/\u003e\\napproach work well, this time around (when I had previously tried this\u003cbr\\/\u003e\\nit was slower).\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12492658_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492658_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 12:14\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T12:14:37+0000\'\u003e30\\/Apr\\/07 12:14\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                   \\n &gt; How are you writing the frq data in compressed format? The works fine for \\n&gt; prx data, because the deltas are all within a single doc &#8211; but for the freq \\n&gt; data, the deltas are tied up in doc num deltas, so you have to decompress it \\n&gt; when performing merges. \\n\\n For each Posting I keep track of the last docID that its term occurred \\nin; when this differs from the current docID I record the \\\"delta code\\\" \\nthat needs to be written and then I later write it with the final freq \\nfor this document. \\n\\n &gt; * I haven\'t been able to come up with a file format tweak that \\n&gt;   gets around this doc-num-delta-decompression problem to enhance the speed \\n&gt;   of frq data merging. I toyed with splitting off the freq from the \\n&gt;   doc_delta, at the price of increasing the file size in the common case of \\n&gt;   freq == 1, but went back to the old design. It\'s not worth the size \\n&gt;   increase for what\'s at best a minor indexing speedup. \\n\\n I\'m just doing the \\\"stitching\\\" approach here: it\'s only the very first \\ndocCode (&amp; freq when freq==1) that must be re-encoded on merging.  The \\none catch is you must store the last docID of the previous segment so \\nyou can compute the new delta at the boundary.  Then I do a raw \\n\\\"copyBytes\\\" for the remainder of the freq postings. \\n\\n Note that I\'m only doing this for the \\\"internal\\\" merges (of partial \\nRAM segments and flushed partial segments) I do before creating a real \\nLucene segment.  I haven\'t changed how the \\\"normal\\\" Lucene segment \\nmerging works (though I think we should look into it &#8211; I opened a \\nseparate issue): it still re-interprets and then re-encodes all \\ndocID\\/freq\'s. \\n\\n &gt; * I\'ve added a custom MemoryPool class to KS which grabs memory in 1 meg \\n&gt;   chunks, allows resizing (downwards) of only the last allocation, and can \\n&gt;   only release everything at once. From one of these pools, I\'m allocating \\n&gt;    RawPosting objects, each of which is a doc_num, a freq, the term_text, and \\n&gt;   the pre-packed prx data (which varies based on which Posting subclass \\n&gt;   created the RawPosting object). I haven\'t got things 100% stable yet, but \\n&gt;   preliminary results seem to indicate that this technique, which is a riff \\n&gt;   on your persistent arrays, improves indexing speed by about 15%. \\n\\n Fabulous!! \\n\\n I think it\'s the custom memory management I\'m doing with slices into \\nshared byte[] arrays for the postings that made the persistent hash \\napproach work well, this time around (when I had previously tried this \\nit was slower).              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12492668\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12492668&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12492668\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12492668_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492668_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 13:49\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T13:49:00+0000\'\u003e30\\/Apr\\/07 13:49\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eResults with the above patch:\u003c\\/p\u003e\\n\\n\u003cp\u003eRAM = 32 MB\u003cbr\\/\u003e\\nNUM THREADS = 1\u003cbr\\/\u003e\\nMERGE FACTOR = 10\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e  2000000 DOCS @ ~550 bytes plain text\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e    No term vectors nor stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          2000000 docs in 782.8 secs\u003cbr\\/\u003e\\n          index size = 436M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          2000000 docs in 93.4 secs\u003cbr\\/\u003e\\n          index size = 430M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old  2554.8; new 21421.1 [  738.5% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old   128.0; new  4058.0 [ 3069.6% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   140.2; new    38.0 [   72.9% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          2000000 docs in 780.2 secs\u003cbr\\/\u003e\\n          index size = 436M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          2000000 docs in 90.6 secs\u003cbr\\/\u003e\\n          index size = 427M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old  2563.3; new 22086.8 [  761.7% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old   128.0; new  4118.4 [ 3116.7% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   144.6; new    36.4 [   74.8% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e    With term vectors (positions + offsets) and 2 small stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          2000000 docs in 1227.6 secs\u003cbr\\/\u003e\\n          index size = 2.1G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          2000000 docs in 559.8 secs\u003cbr\\/\u003e\\n          index size = 2.1G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old  1629.2; new  3572.5 [  119.3% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    93.1; new  4058.0 [ 4259.1% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   193.4; new    38.5 [   80.1% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          2000000 docs in 1229.2 secs\u003cbr\\/\u003e\\n          index size = 2.1G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          2000000 docs in 241.0 secs\u003cbr\\/\u003e\\n          index size = 2.1G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old  1627.0; new  8300.0 [  410.1% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    93.1; new  4118.4 [ 4323.9% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   150.5; new    38.4 [   74.5% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e  200000 DOCS @ ~5,500 bytes plain text\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e    No term vectors nor stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 352.2 secs\u003cbr\\/\u003e\\n          index size = 406M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 86.4 secs\u003cbr\\/\u003e\\n          index size = 403M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   567.9; new  2313.7 [  307.4% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    83.5; new   420.0 [  402.7% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    76.8; new    38.1 [   50.4% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 399.2 secs\u003cbr\\/\u003e\\n          index size = 406M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 89.6 secs\u003cbr\\/\u003e\\n          index size = 400M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   501.0; new  2231.0 [  345.3% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    83.5; new   422.6 [  405.8% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    76.7; new    36.2 [   52.7% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e    With term vectors (positions + offsets) and 2 small stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 594.2 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 229.0 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   336.6; new   873.3 [  159.5% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    47.9; new   420.0 [  776.9% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   157.8; new    38.0 [   75.9% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 605.1 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 181.3 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   330.5; new  1103.1 [  233.7% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    47.9; new   422.6 [  782.2% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   132.0; new    37.1 [   71.9% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e  20000 DOCS @ ~55,000 bytes plain text\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e    No term vectors nor stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          20000 docs in 180.8 secs\u003cbr\\/\u003e\\n          index size = 350M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          20000 docs in 79.1 secs\u003cbr\\/\u003e\\n          index size = 349M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   110.6; new   252.8 [  128.5% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    25.0; new    46.8 [   87.0% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   112.2; new    44.3 [   60.5% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          20000 docs in 180.1 secs\u003cbr\\/\u003e\\n          index size = 350M\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          20000 docs in 75.9 secs\u003cbr\\/\u003e\\n          index size = 347M\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   111.0; new   263.5 [  137.3% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    25.0; new    47.5 [   89.7% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   111.1; new    42.5 [   61.7% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003e    With term vectors (positions + offsets) and 2 small stored fields\u003c\\/p\u003e\\n\\n\u003cp\u003e      AUTOCOMMIT = true (commit whenever RAM is full)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          20000 docs in 323.1 secs\u003cbr\\/\u003e\\n          index size = 1.4G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          20000 docs in 183.9 secs\u003cbr\\/\u003e\\n          index size = 1.4G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old    61.9; new   108.7 [   75.7% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    10.4; new    46.8 [  348.3% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    74.2; new    44.9 [   39.5% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003e      AUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          20000 docs in 323.5 secs\u003cbr\\/\u003e\\n          index size = 1.4G\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          20000 docs in 135.6 secs\u003cbr\\/\u003e\\n          index size = 1.4G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old    61.8; new   147.5 [  138.5% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    10.4; new    47.5 [  354.8% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old    74.3; new    42.9 [   42.2% less]\u003c\\/p\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12492668_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492668_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 13:49\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T13:49:00+0000\'\u003e30\\/Apr\\/07 13:49\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Results with the above patch: \\n\\n RAM = 32 MB \\nNUM THREADS = 1 \\nMERGE FACTOR = 10 \\n\\n\\n   2000000 DOCS @ ~550 bytes plain text \\n\\n\\n     No term vectors nor stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          2000000 docs in 782.8 secs \\n          index size = 436M \\n\\n         new \\n          2000000 docs in 93.4 secs \\n          index size = 430M \\n\\n         Total Docs\\/sec:             old  2554.8; new 21421.1 [  738.5% faster] \\n        Docs\\/MB @ flush:            old   128.0; new  4058.0 [ 3069.6% more] \\n        Avg RAM used (MB) @ flush:  old   140.2; new    38.0 [   72.9% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          2000000 docs in 780.2 secs \\n          index size = 436M \\n\\n         new \\n          2000000 docs in 90.6 secs \\n          index size = 427M \\n\\n         Total Docs\\/sec:             old  2563.3; new 22086.8 [  761.7% faster] \\n        Docs\\/MB @ flush:            old   128.0; new  4118.4 [ 3116.7% more] \\n        Avg RAM used (MB) @ flush:  old   144.6; new    36.4 [   74.8% less] \\n\\n\\n\\n     With term vectors (positions + offsets) and 2 small stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          2000000 docs in 1227.6 secs \\n          index size = 2.1G \\n\\n         new \\n          2000000 docs in 559.8 secs \\n          index size = 2.1G \\n\\n         Total Docs\\/sec:             old  1629.2; new  3572.5 [  119.3% faster] \\n        Docs\\/MB @ flush:            old    93.1; new  4058.0 [ 4259.1% more] \\n        Avg RAM used (MB) @ flush:  old   193.4; new    38.5 [   80.1% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          2000000 docs in 1229.2 secs \\n          index size = 2.1G \\n\\n         new \\n          2000000 docs in 241.0 secs \\n          index size = 2.1G \\n\\n         Total Docs\\/sec:             old  1627.0; new  8300.0 [  410.1% faster] \\n        Docs\\/MB @ flush:            old    93.1; new  4118.4 [ 4323.9% more] \\n        Avg RAM used (MB) @ flush:  old   150.5; new    38.4 [   74.5% less] \\n\\n\\n\\n   200000 DOCS @ ~5,500 bytes plain text \\n\\n\\n     No term vectors nor stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          200000 docs in 352.2 secs \\n          index size = 406M \\n\\n         new \\n          200000 docs in 86.4 secs \\n          index size = 403M \\n\\n         Total Docs\\/sec:             old   567.9; new  2313.7 [  307.4% faster] \\n        Docs\\/MB @ flush:            old    83.5; new   420.0 [  402.7% more] \\n        Avg RAM used (MB) @ flush:  old    76.8; new    38.1 [   50.4% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          200000 docs in 399.2 secs \\n          index size = 406M \\n\\n         new \\n          200000 docs in 89.6 secs \\n          index size = 400M \\n\\n         Total Docs\\/sec:             old   501.0; new  2231.0 [  345.3% faster] \\n        Docs\\/MB @ flush:            old    83.5; new   422.6 [  405.8% more] \\n        Avg RAM used (MB) @ flush:  old    76.7; new    36.2 [   52.7% less] \\n\\n\\n\\n     With term vectors (positions + offsets) and 2 small stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          200000 docs in 594.2 secs \\n          index size = 1.7G \\n\\n         new \\n          200000 docs in 229.0 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   336.6; new   873.3 [  159.5% faster] \\n        Docs\\/MB @ flush:            old    47.9; new   420.0 [  776.9% more] \\n        Avg RAM used (MB) @ flush:  old   157.8; new    38.0 [   75.9% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          200000 docs in 605.1 secs \\n          index size = 1.7G \\n\\n         new \\n          200000 docs in 181.3 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   330.5; new  1103.1 [  233.7% faster] \\n        Docs\\/MB @ flush:            old    47.9; new   422.6 [  782.2% more] \\n        Avg RAM used (MB) @ flush:  old   132.0; new    37.1 [   71.9% less] \\n\\n\\n\\n   20000 DOCS @ ~55,000 bytes plain text \\n\\n\\n     No term vectors nor stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          20000 docs in 180.8 secs \\n          index size = 350M \\n\\n         new \\n          20000 docs in 79.1 secs \\n          index size = 349M \\n\\n         Total Docs\\/sec:             old   110.6; new   252.8 [  128.5% faster] \\n        Docs\\/MB @ flush:            old    25.0; new    46.8 [   87.0% more] \\n        Avg RAM used (MB) @ flush:  old   112.2; new    44.3 [   60.5% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          20000 docs in 180.1 secs \\n          index size = 350M \\n\\n         new \\n          20000 docs in 75.9 secs \\n          index size = 347M \\n\\n         Total Docs\\/sec:             old   111.0; new   263.5 [  137.3% faster] \\n        Docs\\/MB @ flush:            old    25.0; new    47.5 [   89.7% more] \\n        Avg RAM used (MB) @ flush:  old   111.1; new    42.5 [   61.7% less] \\n\\n\\n\\n     With term vectors (positions + offsets) and 2 small stored fields \\n\\n       AUTOCOMMIT = true (commit whenever RAM is full) \\n\\n         old \\n          20000 docs in 323.1 secs \\n          index size = 1.4G \\n\\n         new \\n          20000 docs in 183.9 secs \\n          index size = 1.4G \\n\\n         Total Docs\\/sec:             old    61.9; new   108.7 [   75.7% faster] \\n        Docs\\/MB @ flush:            old    10.4; new    46.8 [  348.3% more] \\n        Avg RAM used (MB) @ flush:  old    74.2; new    44.9 [   39.5% less] \\n\\n\\n       AUTOCOMMIT = false (commit only once at the end) \\n\\n         old \\n          20000 docs in 323.5 secs \\n          index size = 1.4G \\n\\n         new \\n          20000 docs in 135.6 secs \\n          index size = 1.4G \\n\\n         Total Docs\\/sec:             old    61.8; new   147.5 [  138.5% faster] \\n        Docs\\/MB @ flush:            old    10.4; new    47.5 [  354.8% more] \\n        Avg RAM used (MB) @ flush:  old    74.3; new    42.9 [   42.2% less] \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12492674\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12492674&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12492674\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"yseeley@gmail.com\\\" id=\\\"commentauthor_12492674_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=yseeley%40gmail.com\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"yseeley@gmail.com\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Yonik Seeley\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492674_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 14:10\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T14:10:35+0000\'\u003e30\\/Apr\\/07 14:10\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eHow does this work with pending deletes?\u003cbr\\/\u003e\\nI assume that if autocommit is false, then you need to wait until the end when you get a real lucene segment to delete the pending terms?\u003c\\/p\u003e\\n\\n\u003cp\u003eAlso, how has the merge policy (or index invariants) of lucene segments changed?\u003cbr\\/\u003e\\nIf autocommit is off, then you wait until the end to create a big lucene segment.  This new segment may be much larger than segments to it\'s \\\"left\\\".  I suppose the idea of merging rightmost segments should just be dropped in favor of merging the smallest adjacent segments?  Sorry if this has already been covered... as I said, I\'m trying to follow along at a high level.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"yseeley@gmail.com\\\" id=\\\"commentauthor_12492674_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=yseeley%40gmail.com\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"yseeley@gmail.com\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Yonik Seeley\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492674_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 14:10\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T14:10:35+0000\'\u003e30\\/Apr\\/07 14:10\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    How does this work with pending deletes? \\nI assume that if autocommit is false, then you need to wait until the end when you get a real lucene segment to delete the pending terms? \\n\\n Also, how has the merge policy (or index invariants) of lucene segments changed? \\nIf autocommit is off, then you wait until the end to create a big lucene segment.  This new segment may be much larger than segments to it\'s \\\"left\\\".  I suppose the idea of merging rightmost segments should just be dropped in favor of merging the smallest adjacent segments?  Sorry if this has already been covered... as I said, I\'m trying to follow along at a high level.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12492748\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12492748&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12492748\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12492748_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492748_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 18:54\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T18:54:27+0000\'\u003e30\\/Apr\\/07 18:54\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; How does this work with pending deletes?\u003cbr\\/\u003e\\n&gt; I assume that if autocommit is false, then you need to wait until the end when you get a real lucene segment to delete the pending terms?\u003c\\/p\u003e\\n\\n\u003cp\u003eYes, all of this sits \\\"below\\\" the pending deletes layer since this\u003cbr\\/\u003e\\nchange writes a single segment either when RAM is full\u003cbr\\/\u003e\\n(autoCommit=true) or when writer is closed (autoCommit=false).  Then\u003cbr\\/\u003e\\nthe deletes get applied like normal (I haven\'t changed that part).\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; Also, how has the merge policy (or index invariants) of lucene segments changed?\u003cbr\\/\u003e\\n&gt; If autocommit is off, then you wait until the end to create a big lucene segment.  This new segment may be much larger than segments to it\'s \\\"left\\\".  I suppose the idea of merging rightmost segments should just be dropped in favor of merging the smallest adjacent segments?  Sorry if this has already been covered... as I said, I\'m trying to follow along at a high level.\u003c\\/p\u003e\\n\\n\u003cp\u003eHas not been covered, and as usual these are excellent questions\u003cbr\\/\u003e\\nYonik!\u003c\\/p\u003e\\n\\n\u003cp\u003eI haven\'t yet changed anything about merge policy, but you\'re right\u003cbr\\/\u003e\\nthe current invariants won\'t hold anymore.  In fact they already don\'t\u003cbr\\/\u003e\\nhold if you \\\"flush by RAM\\\" now (APIs are exposed in 2.1 to let you do\u003cbr\\/\u003e\\nthis).  So we need to do something.\u003c\\/p\u003e\\n\\n\u003cp\u003eI like your idea to relax merge policy (&amp; invariants) to allow\u003cbr\\/\u003e\\n\\\"merging of any adjacent segments\\\" (not just rightmost ones) and then\u003cbr\\/\u003e\\nmake the policy merge the smallest ones \\/ most similarly sized ones,\u003cbr\\/\u003e\\nmeasuring size by net # bytes in the segment.  This would preserve the\u003cbr\\/\u003e\\n\\\"docID monotonicity invariance\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003eIf we take that approach then it would automatically resolve\u003cbr\\/\u003e\\n\u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-845\\\" title=\\\"If you &quot;flush by RAM usage&quot; then IndexWriter may over-merge\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-845\\\"\u003e\u003cdel\u003eLUCENE-845\u003c\\/del\u003e\u003c\\/a\u003e as well (which would otherwise block this issue).\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12492748_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12492748_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'30\\/Apr\\/07 18:54\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-04-30T18:54:27+0000\'\u003e30\\/Apr\\/07 18:54\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; How does this work with pending deletes? \\n&gt; I assume that if autocommit is false, then you need to wait until the end when you get a real lucene segment to delete the pending terms? \\n\\n Yes, all of this sits \\\"below\\\" the pending deletes layer since this \\nchange writes a single segment either when RAM is full \\n(autoCommit=true) or when writer is closed (autoCommit=false).  Then \\nthe deletes get applied like normal (I haven\'t changed that part). \\n\\n &gt; Also, how has the merge policy (or index invariants) of lucene segments changed? \\n&gt; If autocommit is off, then you wait until the end to create a big lucene segment.  This new segment may be much larger than segments to it\'s \\\"left\\\".  I suppose the idea of merging rightmost segments should just be dropped in favor of merging the smallest adjacent segments?  Sorry if this has already been covered... as I said, I\'m trying to follow along at a high level. \\n\\n Has not been covered, and as usual these are excellent questions \\nYonik! \\n\\n I haven\'t yet changed anything about merge policy, but you\'re right \\nthe current invariants won\'t hold anymore.  In fact they already don\'t \\nhold if you \\\"flush by RAM\\\" now (APIs are exposed in 2.1 to let you do \\nthis).  So we need to do something. \\n\\n I like your idea to relax merge policy (&amp; invariants) to allow \\n\\\"merging of any adjacent segments\\\" (not just rightmost ones) and then \\nmake the policy merge the smallest ones \\/ most similarly sized ones, \\nmeasuring size by net # bytes in the segment.  This would preserve the \\n\\\"docID monotonicity invariance\\\". \\n\\n If we take that approach then it would automatically resolve \\n  LUCENE-845   as well (which would otherwise block this issue).              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12497528\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12497528&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12497528\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12497528_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12497528_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/May\\/07 18:14\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-05-21T18:14:40+0000\'\u003e21\\/May\\/07 18:14\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eAttached latest patch.\u003c\\/p\u003e\\n\\n\u003cp\u003eI\'m now working towards simplify &amp; cleaning up the code &amp; design:\u003cbr\\/\u003e\\neliminated dead code leftover from the previous iterations, use\u003cbr\\/\u003e\\nexisting RAMFile instead of my own new class, refactored\u003cbr\\/\u003e\\nduplicate\\/confusing code, added comments, etc. It\'s getting closer to\u003cbr\\/\u003e\\na committable state but still has a ways to go.\u003c\\/p\u003e\\n\\n\u003cp\u003eI also renamed the class from MultiDocumentWriter to DocumentsWriter.\u003c\\/p\u003e\\n\\n\u003cp\u003eTo summarize the current design:\u003c\\/p\u003e\\n\\n\u003cp\u003e  1. Write stored fields &amp; term vectors to files in the Directory\u003cbr\\/\u003e\\n     immediately (don\'t buffer these in RAM).\u003c\\/p\u003e\\n\\n\u003cp\u003e  2. Write freq &amp; prox postings to RAM directly as a byte stream\u003cbr\\/\u003e\\n     instead of first pass as int[] and then second pass as a byte\u003cbr\\/\u003e\\n     stream.  This single-pass instead of double-pass is a big\u003cbr\\/\u003e\\n     savings.  I use slices into shared byte[] arrays to efficiently\u003cbr\\/\u003e\\n     allocate bytes to the postings the need them.\u003c\\/p\u003e\\n\\n\u003cp\u003e  3. Build Postings hash that holds the Postings for many documents at\u003cbr\\/\u003e\\n     once instead of a single doc, keyed by unique term.  Not tearing\u003cbr\\/\u003e\\n     down &amp; rebuilding the Postings hash w\\/ every doc saves alot of\u003cbr\\/\u003e\\n     time.  Also when term vectors are off this saves quicksort for\u003cbr\\/\u003e\\n     every doc and this gives very good performance gain.\u003c\\/p\u003e\\n\\n\u003cp\u003e     When the Postings hash is full (used up the allowed RAM usage) I\u003cbr\\/\u003e\\n     then create a real Lucene segment when autoCommit=true, else a\u003cbr\\/\u003e\\n     \\\"partial segment\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003e  4. Use my own \\\"partial segment\\\" format that differs from Lucene\'s\u003cbr\\/\u003e\\n     normal segments in that it is optimized for merging (and unusable\u003cbr\\/\u003e\\n     for searching).  This format, and the merger I created to work\u003cbr\\/\u003e\\n     with this format, performs merging mostly by copying blocks of\u003cbr\\/\u003e\\n     bytes instead of reinterpreting every vInt in each Postings list.\u003cbr\\/\u003e\\n     These partial segments are are only created when IndexWriter has\u003cbr\\/\u003e\\n     autoCommit=false, and then on commit they are merged into the\u003cbr\\/\u003e\\n     real Lucene segment format.\u003c\\/p\u003e\\n\\n\u003cp\u003e  5. Reuse the Posting, PostingVector, char[] and byte[] objects that\u003cbr\\/\u003e\\n     are used by the Postings hash.\u003c\\/p\u003e\\n\\n\u003cp\u003eI plan to keep simplifying the design &amp; implementation.  Specifically,\u003cbr\\/\u003e\\nI\'m going to test removing #4 above entirely (using my own \\\"partial\u003cbr\\/\u003e\\nsegment\\\" format that\'s optimized for merging not searching).\u003c\\/p\u003e\\n\\n\u003cp\u003eWhile doing this may give back some of the performance gains, that\u003cbr\\/\u003e\\ncode is the source of much added complexity in the patch, and, it\u003cbr\\/\u003e\\nduplicates the current SegmentMerger code.  It was more necessary\u003cbr\\/\u003e\\nbefore (when we would merge thousands of single-doc segments in\u003cbr\\/\u003e\\nmemory) but now that each segment contains many docs I think we are no\u003cbr\\/\u003e\\nlonger gaining as much performance from it.\u003c\\/p\u003e\\n\\n\u003cp\u003eI plan instead to write all segments in the \\\"real\\\" Lucene segment\u003cbr\\/\u003e\\nformat and use the current SegmentMerger, possibly w\\/ some small\u003cbr\\/\u003e\\nchanges, to do the merges even when autoCommit=false.  Since we have\u003cbr\\/\u003e\\nanother issue (\u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-856\\\" title=\\\"Optimize segment merging\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-856\\\"\u003e\u003cdel\u003eLUCENE-856\u003c\\/del\u003e\u003c\\/a\u003e) to optimize segment merging I can carry\u003cbr\\/\u003e\\nover any optimizations that we may want to keep into that issue.  If\u003cbr\\/\u003e\\nthis doesn\'t lose much performance it will make the approach here even\u003cbr\\/\u003e\\nsimpler.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12497528_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12497528_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/May\\/07 18:14\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-05-21T18:14:40+0000\'\u003e21\\/May\\/07 18:14\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Attached latest patch. \\n\\n I\'m now working towards simplify &amp; cleaning up the code &amp; design: \\neliminated dead code leftover from the previous iterations, use \\nexisting RAMFile instead of my own new class, refactored \\nduplicate\\/confusing code, added comments, etc. It\'s getting closer to \\na committable state but still has a ways to go. \\n\\n I also renamed the class from MultiDocumentWriter to DocumentsWriter. \\n\\n To summarize the current design: \\n\\n   1. Write stored fields &amp; term vectors to files in the Directory \\n     immediately (don\'t buffer these in RAM). \\n\\n   2. Write freq &amp; prox postings to RAM directly as a byte stream \\n     instead of first pass as int[] and then second pass as a byte \\n     stream.  This single-pass instead of double-pass is a big \\n     savings.  I use slices into shared byte[] arrays to efficiently \\n     allocate bytes to the postings the need them. \\n\\n   3. Build Postings hash that holds the Postings for many documents at \\n     once instead of a single doc, keyed by unique term.  Not tearing \\n     down &amp; rebuilding the Postings hash w\\/ every doc saves alot of \\n     time.  Also when term vectors are off this saves quicksort for \\n     every doc and this gives very good performance gain. \\n\\n      When the Postings hash is full (used up the allowed RAM usage) I \\n     then create a real Lucene segment when autoCommit=true, else a \\n     \\\"partial segment\\\". \\n\\n   4. Use my own \\\"partial segment\\\" format that differs from Lucene\'s \\n     normal segments in that it is optimized for merging (and unusable \\n     for searching).  This format, and the merger I created to work \\n     with this format, performs merging mostly by copying blocks of \\n     bytes instead of reinterpreting every vInt in each Postings list. \\n     These partial segments are are only created when IndexWriter has \\n     autoCommit=false, and then on commit they are merged into the \\n     real Lucene segment format. \\n\\n   5. Reuse the Posting, PostingVector, char[] and byte[] objects that \\n     are used by the Postings hash. \\n\\n I plan to keep simplifying the design &amp; implementation.  Specifically, \\nI\'m going to test removing #4 above entirely (using my own \\\"partial \\nsegment\\\" format that\'s optimized for merging not searching). \\n\\n While doing this may give back some of the performance gains, that \\ncode is the source of much added complexity in the patch, and, it \\nduplicates the current SegmentMerger code.  It was more necessary \\nbefore (when we would merge thousands of single-doc segments in \\nmemory) but now that each segment contains many docs I think we are no \\nlonger gaining as much performance from it. \\n\\n I plan instead to write all segments in the \\\"real\\\" Lucene segment \\nformat and use the current SegmentMerger, possibly w\\/ some small \\nchanges, to do the merges even when autoCommit=false.  Since we have \\nanother issue (  LUCENE-856  ) to optimize segment merging I can carry \\nover any optimizations that we may want to keep into that issue.  If \\nthis doesn\'t lose much performance it will make the approach here even \\nsimpler.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12502790\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12502790&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12502790\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12502790_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12502790_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'08\\/Jun\\/07 13:31\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-08T13:31:03+0000\'\u003e08\\/Jun\\/07 13:31\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eLatest working patch attached.\u003c\\/p\u003e\\n\\n\u003cp\u003eI\'ve cutover to using Lucene\'s normal segment merging for all merging\u003cbr\\/\u003e\\n(ie, I no longer use a different merge-efficient format for segments\u003cbr\\/\u003e\\nwhen autoCommit=false); this has substantially simplified the code.\u003c\\/p\u003e\\n\\n\u003cp\u003eAll unit tests pass except disk-full test and certain contrib tests\u003cbr\\/\u003e\\n(gdata-server, lucli, similarity, wordnet) that I think I\'m not\u003cbr\\/\u003e\\ncausing.\u003c\\/p\u003e\\n\\n\u003cp\u003eOther changes:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eConsolidated flushing of a new segment back into IndexWriter\u003cbr\\/\u003e\\n    (previously DocumentsWriter would do its own flushing when\u003cbr\\/\u003e\\n    autoCommit=false).\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003e    I would also like to consolidate merging entirely into\u003cbr\\/\u003e\\n    IndexWriter; right now DocumentsWriter does its own merging of the\u003cbr\\/\u003e\\n    flushed segments when autoCommit=false (this is because those\u003cbr\\/\u003e\\n    segments are \\\"partial\\\" meaning they do not have their own stored\u003cbr\\/\u003e\\n    fields or term vectors).  I\'m trying to find a clean way to do\u003cbr\\/\u003e\\n    this...\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eThread concurrency now works: each thread writes into a separate\u003cbr\\/\u003e\\n    Postings hash (up until a limit (currently 5) at which point the\u003cbr\\/\u003e\\n    threads share the Postings hashes) and then when flushing the\u003cbr\\/\u003e\\n    segment I merge the docIDs together. I flush when the total RAM\u003cbr\\/\u003e\\n    used across threads is over the limit.  I ran a test comparing\u003cbr\\/\u003e\\n    thread concurrency on current trunk vs this patch, which I\'ll post\u003cbr\\/\u003e\\n    next.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eReduced bytes used per-unique-term to be lower than current\u003cbr\\/\u003e\\n    Lucene.  This means the worst-case document (many terms, all of\u003cbr\\/\u003e\\n    which are unique) should use less RAM overall than Lucene trunk\u003cbr\\/\u003e\\n    does.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eAdded some new unit test cases; added missing \\\"writer.close()\\\" to\u003cbr\\/\u003e\\n    one of the contrib tests.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eCleanup, comments, etc.  I think the code is getting more\u003cbr\\/\u003e\\n    \\\"approachable\\\" now.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12502790_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12502790_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'08\\/Jun\\/07 13:31\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-08T13:31:03+0000\'\u003e08\\/Jun\\/07 13:31\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Latest working patch attached. \\n\\n I\'ve cutover to using Lucene\'s normal segment merging for all merging \\n(ie, I no longer use a different merge-efficient format for segments \\nwhen autoCommit=false); this has substantially simplified the code. \\n\\n All unit tests pass except disk-full test and certain contrib tests \\n(gdata-server, lucli, similarity, wordnet) that I think I\'m not \\ncausing. \\n\\n Other changes: \\n\\n \\n\\t Consolidated flushing of a new segment back into IndexWriter \\n    (previously DocumentsWriter would do its own flushing when \\n    autoCommit=false). \\n \\n\\n\\n     I would also like to consolidate merging entirely into \\n    IndexWriter; right now DocumentsWriter does its own merging of the \\n    flushed segments when autoCommit=false (this is because those \\n    segments are \\\"partial\\\" meaning they do not have their own stored \\n    fields or term vectors).  I\'m trying to find a clean way to do \\n    this... \\n\\n \\n\\t Thread concurrency now works: each thread writes into a separate \\n    Postings hash (up until a limit (currently 5) at which point the \\n    threads share the Postings hashes) and then when flushing the \\n    segment I merge the docIDs together. I flush when the total RAM \\n    used across threads is over the limit.  I ran a test comparing \\n    thread concurrency on current trunk vs this patch, which I\'ll post \\n    next. \\n \\n\\n\\n \\n\\t Reduced bytes used per-unique-term to be lower than current \\n    Lucene.  This means the worst-case document (many terms, all of \\n    which are unique) should use less RAM overall than Lucene trunk \\n    does. \\n \\n\\n\\n \\n\\t Added some new unit test cases; added missing \\\"writer.close()\\\" to \\n    one of the contrib tests. \\n \\n\\n\\n \\n\\t Cleanup, comments, etc.  I think the code is getting more \\n    \\\"approachable\\\" now. \\n \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12502793\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12502793&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12502793\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12502793_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12502793_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'08\\/Jun\\/07 13:33\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-08T13:33:30+0000\'\u003e08\\/Jun\\/07 13:33\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI ran a benchmark using more than 1 thread to do indexing, in order to\u003cbr\\/\u003e\\ntest &amp; compare concurrency of trunk and the patch.  The test is the\u003cbr\\/\u003e\\nsame as above, and runs on a 4 core Mac Pro (OS X) box with 4 drive\u003cbr\\/\u003e\\nRAID 0 IO system.\u003c\\/p\u003e\\n\\n\u003cp\u003eHere are the raw results:\u003c\\/p\u003e\\n\\n\u003cp\u003eDOCS = ~5,500 bytes plain text\u003cbr\\/\u003e\\nRAM = 32 MB\u003cbr\\/\u003e\\nMERGE FACTOR = 10\u003cbr\\/\u003e\\nWith term vectors (positions + offsets) and 2 small stored fields\u003cbr\\/\u003e\\nAUTOCOMMIT = false (commit only once at the end)\u003c\\/p\u003e\\n\\n\u003cp\u003eNUM THREADS = 1\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200000 docs in 172.3 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200000 docs in 539.5 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   370.7; new  1161.0 [  213.2% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    47.9; new   334.6 [  598.7% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   131.9; new    33.1 [   74.9% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003eNUM THREADS = 2\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200001 docs in 130.8 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200001 docs in 452.8 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   441.7; new  1529.3 [  246.2% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    47.9; new   301.5 [  529.7% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   226.1; new    35.2 [   84.4% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003eNUM THREADS = 3\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200002 docs in 105.4 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200002 docs in 428.4 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   466.8; new  1897.9 [  306.6% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    47.9; new   277.8 [  480.2% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   289.8; new    37.0 [   87.2% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003eNUM THREADS = 4\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200003 docs in 104.8 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200003 docs in 440.4 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   454.1; new  1908.5 [  320.3% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    47.9; new   259.9 [  442.9% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   293.7; new    37.1 [   87.3% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003eNUM THREADS = 5\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200004 docs in 99.5 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200004 docs in 425.0 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   470.6; new  2010.5 [  327.2% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    47.9; new   245.3 [  412.6% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   390.9; new    38.3 [   90.2% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003eNUM THREADS = 6\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200005 docs in 106.3 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200005 docs in 427.1 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   468.2; new  1882.3 [  302.0% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    47.8; new   248.5 [  419.3% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   340.9; new    38.7 [   88.6% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003eNUM THREADS = 7\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200006 docs in 106.1 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200006 docs in 435.2 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   459.6; new  1885.3 [  310.2% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    47.8; new   248.7 [  420.0% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   408.6; new    39.1 [   90.4% less]\u003c\\/p\u003e\\n\\n\\n\u003cp\u003eNUM THREADS = 8\u003c\\/p\u003e\\n\\n\u003cp\u003e        new\u003cbr\\/\u003e\\n          200007 docs in 109.0 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        old\u003cbr\\/\u003e\\n          200007 docs in 469.2 secs\u003cbr\\/\u003e\\n          index size = 1.7G\u003c\\/p\u003e\\n\\n\u003cp\u003e        Total Docs\\/sec:             old   426.3; new  1835.2 [  330.5% faster]\u003cbr\\/\u003e\\n        Docs\\/MB @ flush:            old    47.8; new   251.3 [  425.5% more]\u003cbr\\/\u003e\\n        Avg RAM used (MB) @ flush:  old   448.9; new    39.0 [   91.3% less]\u003c\\/p\u003e\\n\\n\\n\\n\u003cp\u003eSome quick comments:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eBoth trunk &amp; the patch show speedups if you use more than 1 thread\u003cbr\\/\u003e\\n    to do indexing.  This is expected since the machine has concurrency. \u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eThe biggest speedup is from 1-&gt;2 threads but still good gains from\u003cbr\\/\u003e\\n    2-&gt;5 threads.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eBest seems to be 5 threads.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eThe patch allows better concurrency: relatively speaking it speeds\u003cbr\\/\u003e\\n    up faster than the trunk (the % faster increases as we add\u003cbr\\/\u003e\\n    threads) as you increase # threads.  I think this makes sense\u003cbr\\/\u003e\\n    because we flush less often with the patch, and, flushing is time\u003cbr\\/\u003e\\n    consuming and single threaded.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12502793_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12502793_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'08\\/Jun\\/07 13:33\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-08T13:33:30+0000\'\u003e08\\/Jun\\/07 13:33\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I ran a benchmark using more than 1 thread to do indexing, in order to \\ntest &amp; compare concurrency of trunk and the patch.  The test is the \\nsame as above, and runs on a 4 core Mac Pro (OS X) box with 4 drive \\nRAID 0 IO system. \\n\\n Here are the raw results: \\n\\n DOCS = ~5,500 bytes plain text \\nRAM = 32 MB \\nMERGE FACTOR = 10 \\nWith term vectors (positions + offsets) and 2 small stored fields \\nAUTOCOMMIT = false (commit only once at the end) \\n\\n NUM THREADS = 1 \\n\\n         new \\n          200000 docs in 172.3 secs \\n          index size = 1.7G \\n\\n         old \\n          200000 docs in 539.5 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   370.7; new  1161.0 [  213.2% faster] \\n        Docs\\/MB @ flush:            old    47.9; new   334.6 [  598.7% more] \\n        Avg RAM used (MB) @ flush:  old   131.9; new    33.1 [   74.9% less] \\n\\n\\n NUM THREADS = 2 \\n\\n         new \\n          200001 docs in 130.8 secs \\n          index size = 1.7G \\n\\n         old \\n          200001 docs in 452.8 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   441.7; new  1529.3 [  246.2% faster] \\n        Docs\\/MB @ flush:            old    47.9; new   301.5 [  529.7% more] \\n        Avg RAM used (MB) @ flush:  old   226.1; new    35.2 [   84.4% less] \\n\\n\\n NUM THREADS = 3 \\n\\n         new \\n          200002 docs in 105.4 secs \\n          index size = 1.7G \\n\\n         old \\n          200002 docs in 428.4 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   466.8; new  1897.9 [  306.6% faster] \\n        Docs\\/MB @ flush:            old    47.9; new   277.8 [  480.2% more] \\n        Avg RAM used (MB) @ flush:  old   289.8; new    37.0 [   87.2% less] \\n\\n\\n NUM THREADS = 4 \\n\\n         new \\n          200003 docs in 104.8 secs \\n          index size = 1.7G \\n\\n         old \\n          200003 docs in 440.4 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   454.1; new  1908.5 [  320.3% faster] \\n        Docs\\/MB @ flush:            old    47.9; new   259.9 [  442.9% more] \\n        Avg RAM used (MB) @ flush:  old   293.7; new    37.1 [   87.3% less] \\n\\n\\n NUM THREADS = 5 \\n\\n         new \\n          200004 docs in 99.5 secs \\n          index size = 1.7G \\n\\n         old \\n          200004 docs in 425.0 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   470.6; new  2010.5 [  327.2% faster] \\n        Docs\\/MB @ flush:            old    47.9; new   245.3 [  412.6% more] \\n        Avg RAM used (MB) @ flush:  old   390.9; new    38.3 [   90.2% less] \\n\\n\\n NUM THREADS = 6 \\n\\n         new \\n          200005 docs in 106.3 secs \\n          index size = 1.7G \\n\\n         old \\n          200005 docs in 427.1 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   468.2; new  1882.3 [  302.0% faster] \\n        Docs\\/MB @ flush:            old    47.8; new   248.5 [  419.3% more] \\n        Avg RAM used (MB) @ flush:  old   340.9; new    38.7 [   88.6% less] \\n\\n\\n NUM THREADS = 7 \\n\\n         new \\n          200006 docs in 106.1 secs \\n          index size = 1.7G \\n\\n         old \\n          200006 docs in 435.2 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   459.6; new  1885.3 [  310.2% faster] \\n        Docs\\/MB @ flush:            old    47.8; new   248.7 [  420.0% more] \\n        Avg RAM used (MB) @ flush:  old   408.6; new    39.1 [   90.4% less] \\n\\n\\n NUM THREADS = 8 \\n\\n         new \\n          200007 docs in 109.0 secs \\n          index size = 1.7G \\n\\n         old \\n          200007 docs in 469.2 secs \\n          index size = 1.7G \\n\\n         Total Docs\\/sec:             old   426.3; new  1835.2 [  330.5% faster] \\n        Docs\\/MB @ flush:            old    47.8; new   251.3 [  425.5% more] \\n        Avg RAM used (MB) @ flush:  old   448.9; new    39.0 [   91.3% less] \\n\\n\\n\\n Some quick comments: \\n\\n \\n\\t Both trunk &amp; the patch show speedups if you use more than 1 thread \\n    to do indexing.  This is expected since the machine has concurrency.  \\n \\n\\n\\n \\n\\t The biggest speedup is from 1-&gt;2 threads but still good gains from \\n    2-&gt;5 threads. \\n \\n\\n\\n \\n\\t Best seems to be 5 threads. \\n \\n\\n\\n \\n\\t The patch allows better concurrency: relatively speaking it speeds \\n    up faster than the trunk (the % faster increases as we add \\n    threads) as you increase # threads.  I think this makes sense \\n    because we flush less often with the patch, and, flushing is time \\n    consuming and single threaded. \\n \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12505346\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12505346&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12505346\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12505346_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12505346_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Jun\\/07 19:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-15T19:00:53+0000\'\u003e15\\/Jun\\/07 19:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eAttached latest patch.\u003c\\/p\u003e\\n\\n\u003cp\u003eI think this patch is ready to commit.  I will let it sit for a while\u003cbr\\/\u003e\\nso people can review it.\u003c\\/p\u003e\\n\\n\u003cp\u003eWe still need to do \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-845\\\" title=\\\"If you &quot;flush by RAM usage&quot; then IndexWriter may over-merge\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-845\\\"\u003e\u003cdel\u003eLUCENE-845\u003c\\/del\u003e\u003c\\/a\u003e before it can be committed as is.\u003c\\/p\u003e\\n\\n\u003cp\u003eHowever one option instead would be to commit this patch, but leave\u003cbr\\/\u003e\\nIndexWriter flushing by doc count by default and then later switch it\u003cbr\\/\u003e\\nto flush by net RAM usage once \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-845\\\" title=\\\"If you &quot;flush by RAM usage&quot; then IndexWriter may over-merge\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-845\\\"\u003e\u003cdel\u003eLUCENE-845\u003c\\/del\u003e\u003c\\/a\u003e is done.  I like this option\u003cbr\\/\u003e\\nbest.\u003c\\/p\u003e\\n\\n\u003cp\u003eAll tests pass (I\'ve re-enabled the disk full tests and fixed error\u003cbr\\/\u003e\\nhandling so they now pass) on Windows XP, Debian Linux and OS X.\u003c\\/p\u003e\\n\\n\u003cp\u003eSummary of the changes in this rev:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eFinished cleaning up &amp; commenting code\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eException handling: if there is a disk full or any other exception\u003cbr\\/\u003e\\n    while adding a document or flushing then the index is rolled back\u003cbr\\/\u003e\\n    to the last commit point.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eAdded more unit tests\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eRemoved my profiling tool from the patch (not intended to be\u003cbr\\/\u003e\\n    committed)\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eFixed a thread safety issue where if you flush by doc count you\u003cbr\\/\u003e\\n    would sometimes get more than the doc count at flush than you\u003cbr\\/\u003e\\n    requested.  I moved the thread synchronization for determining\u003cbr\\/\u003e\\n    flush time down into DocumentsWriter.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eAlso fixed thread safety of calling flush with one thread while\u003cbr\\/\u003e\\n    other threads are still adding documents.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eThe biggest change is: absorbed all merging logic back into\u003cbr\\/\u003e\\n    IndexWriter.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003e    Previously in DocumentsWriter I was tracking my own\u003cbr\\/\u003e\\n    flushed\\/partial segments and merging them on my own (but using\u003cbr\\/\u003e\\n    SegmentMerger).  This makes DocumentsWriter much simpler: now its\u003cbr\\/\u003e\\n    sole purpose is to gather added docs and write a new segment.\u003c\\/p\u003e\\n\\n\u003cp\u003e    This turns out to be a big win:\u003c\\/p\u003e\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eCode is much simpler (no duplication of \\\"merging\\\"\u003cbr\\/\u003e\\n        policy\\/logic)\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003e21-25% additional performance gain for autoCommit=false case\u003cbr\\/\u003e\\n        when stored fields &amp; vectors are used\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003eIndexWriter.close() no longer takes an unexpected long time to\u003cbr\\/\u003e\\n        close in autoCommit=false case\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003e    However I had to make a change to the index format to do this.\u003cbr\\/\u003e\\n    The basic idea is to allow multiple segments to share access to\u003cbr\\/\u003e\\n    the \\\"doc store\\\" (stored fields, vectors) index files.\u003c\\/p\u003e\\n\\n\u003cp\u003e    The change is quite simple: FieldsReader\\/VectorsReader are now\u003cbr\\/\u003e\\n    told the doc offset that they should start from when seeking in\u003cbr\\/\u003e\\n    the index stream (this info is stored in SegmentInfo).  When\u003cbr\\/\u003e\\n    merging segments we don\'t merge the \\\"doc store\\\" files when all\u003cbr\\/\u003e\\n    segments are sharing the same ones (big performance gain), else,\u003cbr\\/\u003e\\n    we make a private copy of the \\\"doc store\\\" files (ie as segments\u003cbr\\/\u003e\\n    normally are on the trunk today).\u003c\\/p\u003e\\n\\n\u003cp\u003e    The change is fully backwards compatible (I added a test case to\u003cbr\\/\u003e\\n    the backwards compatibility unit test to be sure) and the change\u003cbr\\/\u003e\\n    is only used when autoCommit=false.\u003c\\/p\u003e\\n\\n\u003cp\u003e    When autoCommit=false, the writer will append stored fields \\/\u003cbr\\/\u003e\\n    vectors to a single set of files even though it is flushing normal\u003cbr\\/\u003e\\n    segments whenever RAM is full.  These normal segments all refer to\u003cbr\\/\u003e\\n    the single shared set of \\\"doc store\\\" files.  Then when segments\u003cbr\\/\u003e\\n    are merged, the newly merged segment has its own \\\"private\\\" doc\u003cbr\\/\u003e\\n    stores again.  So the sharing only occurs for the \\\"level 0\\\"\u003cbr\\/\u003e\\n    segments.\u003c\\/p\u003e\\n\\n\u003cp\u003e    I still need to update fileformats doc with this change.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12505346_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12505346_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Jun\\/07 19:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-15T19:00:53+0000\'\u003e15\\/Jun\\/07 19:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Attached latest patch. \\n\\n I think this patch is ready to commit.  I will let it sit for a while \\nso people can review it. \\n\\n We still need to do   LUCENE-845   before it can be committed as is. \\n\\n However one option instead would be to commit this patch, but leave \\nIndexWriter flushing by doc count by default and then later switch it \\nto flush by net RAM usage once   LUCENE-845   is done.  I like this option \\nbest. \\n\\n All tests pass (I\'ve re-enabled the disk full tests and fixed error \\nhandling so they now pass) on Windows XP, Debian Linux and OS X. \\n\\n Summary of the changes in this rev: \\n\\n \\n\\t Finished cleaning up &amp; commenting code \\n \\n\\n\\n \\n\\t Exception handling: if there is a disk full or any other exception \\n    while adding a document or flushing then the index is rolled back \\n    to the last commit point. \\n \\n\\n\\n \\n\\t Added more unit tests \\n \\n\\n\\n \\n\\t Removed my profiling tool from the patch (not intended to be \\n    committed) \\n \\n\\n\\n \\n\\t Fixed a thread safety issue where if you flush by doc count you \\n    would sometimes get more than the doc count at flush than you \\n    requested.  I moved the thread synchronization for determining \\n    flush time down into DocumentsWriter. \\n \\n\\n\\n \\n\\t Also fixed thread safety of calling flush with one thread while \\n    other threads are still adding documents. \\n \\n\\n\\n \\n\\t The biggest change is: absorbed all merging logic back into \\n    IndexWriter. \\n \\n\\n\\n     Previously in DocumentsWriter I was tracking my own \\n    flushed\\/partial segments and merging them on my own (but using \\n    SegmentMerger).  This makes DocumentsWriter much simpler: now its \\n    sole purpose is to gather added docs and write a new segment. \\n\\n     This turns out to be a big win: \\n\\n \\n\\t Code is much simpler (no duplication of \\\"merging\\\" \\n        policy\\/logic) \\n \\n\\n\\n \\n\\t 21-25% additional performance gain for autoCommit=false case \\n        when stored fields &amp; vectors are used \\n \\n\\n\\n \\n\\t IndexWriter.close() no longer takes an unexpected long time to \\n        close in autoCommit=false case \\n \\n\\n\\n     However I had to make a change to the index format to do this. \\n    The basic idea is to allow multiple segments to share access to \\n    the \\\"doc store\\\" (stored fields, vectors) index files. \\n\\n     The change is quite simple: FieldsReader\\/VectorsReader are now \\n    told the doc offset that they should start from when seeking in \\n    the index stream (this info is stored in SegmentInfo).  When \\n    merging segments we don\'t merge the \\\"doc store\\\" files when all \\n    segments are sharing the same ones (big performance gain), else, \\n    we make a private copy of the \\\"doc store\\\" files (ie as segments \\n    normally are on the trunk today). \\n\\n     The change is fully backwards compatible (I added a test case to \\n    the backwards compatibility unit test to be sure) and the change \\n    is only used when autoCommit=false. \\n\\n     When autoCommit=false, the writer will append stored fields \\/ \\n    vectors to a single set of files even though it is flushing normal \\n    segments whenever RAM is full.  These normal segments all refer to \\n    the single shared set of \\\"doc store\\\" files.  Then when segments \\n    are merged, the newly merged segment has its own \\\"private\\\" doc \\n    stores again.  So the sharing only occurs for the \\\"level 0\\\" \\n    segments. \\n\\n     I still need to update fileformats doc with this change.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12505373\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12505373&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12505373\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"yseeley@gmail.com\\\" id=\\\"commentauthor_12505373_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=yseeley%40gmail.com\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"yseeley@gmail.com\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Yonik Seeley\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12505373_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Jun\\/07 21:26\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-15T21:26:33+0000\'\u003e15\\/Jun\\/07 21:26\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; When merging segments we don\'t merge the \\\"doc store\\\" files when all segments are sharing the same ones (big performance gain), \u003c\\/p\u003e\\n\\n\u003cp\u003eIs this only in the case where the segments have no deleted docs?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"yseeley@gmail.com\\\" id=\\\"commentauthor_12505373_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=yseeley%40gmail.com\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"yseeley@gmail.com\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Yonik Seeley\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12505373_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'15\\/Jun\\/07 21:26\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-15T21:26:33+0000\'\u003e15\\/Jun\\/07 21:26\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; When merging segments we don\'t merge the \\\"doc store\\\" files when all segments are sharing the same ones (big performance gain),  \\n\\n Is this only in the case where the segments have no deleted docs?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12505418\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12505418&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12505418\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12505418_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12505418_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'16\\/Jun\\/07 01:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-16T01:00:45+0000\'\u003e16\\/Jun\\/07 01:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; &gt; When merging segments we don\'t merge the \\\"doc store\\\" files when all segments are sharing the same ones (big performance gain),\u003cbr\\/\u003e\\n&gt; \u003cbr\\/\u003e\\n&gt; Is this only in the case where the segments have no deleted docs? \u003c\\/p\u003e\\n\\n\u003cp\u003eRight.  Also the segments must be contiguous which the current merge\u003cbr\\/\u003e\\npolicy ensures but future merge policies may not.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12505418_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12505418_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'16\\/Jun\\/07 01:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-16T01:00:45+0000\'\u003e16\\/Jun\\/07 01:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; &gt; When merging segments we don\'t merge the \\\"doc store\\\" files when all segments are sharing the same ones (big performance gain), \\n&gt;  \\n&gt; Is this only in the case where the segments have no deleted docs?  \\n\\n Right.  Also the segments must be contiguous which the current merge \\npolicy ensures but future merge policies may not.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12505822\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12505822&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12505822\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12505822_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12505822_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'18\\/Jun\\/07 13:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-18T13:56:56+0000\'\u003e18\\/Jun\\/07 13:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eOK, I attached a new version (take9) of the patch that reverts back to\u003cbr\\/\u003e\\nthe default of \\\"flush after every 10 documents added\\\" in IndexWriter.\u003cbr\\/\u003e\\nThis removes the dependency on \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-845\\\" title=\\\"If you &quot;flush by RAM usage&quot; then IndexWriter may over-merge\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-845\\\"\u003e\u003cdel\u003eLUCENE-845\u003c\\/del\u003e\u003c\\/a\u003e.\u003c\\/p\u003e\\n\\n\u003cp\u003eHowever, I still think we should later (once \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-845\\\" title=\\\"If you &quot;flush by RAM usage&quot; then IndexWriter may over-merge\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-845\\\"\u003e\u003cdel\u003eLUCENE-845\u003c\\/del\u003e\u003c\\/a\u003e is done)\u003cbr\\/\u003e\\ndefault IndexWriter to flush by RAM usage since this will generally\u003cbr\\/\u003e\\ngive the best \\\"out of the box\\\" performance.  I will open a separate\u003cbr\\/\u003e\\nissue to change the default after this issue is resolved.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12505822_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12505822_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'18\\/Jun\\/07 13:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-18T13:56:56+0000\'\u003e18\\/Jun\\/07 13:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    OK, I attached a new version (take9) of the patch that reverts back to \\nthe default of \\\"flush after every 10 documents added\\\" in IndexWriter. \\nThis removes the dependency on   LUCENE-845  . \\n\\n However, I still think we should later (once   LUCENE-845   is done) \\ndefault IndexWriter to flush by RAM usage since this will generally \\ngive the best \\\"out of the box\\\" performance.  I will open a separate \\nissue to change the default after this issue is resolved.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12506576\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12506576&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12506576\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"steven_parkes\\\" id=\\\"commentauthor_12506576_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=steven_parkes\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"steven_parkes\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Steven Parkes\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506576_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jun\\/07 15:44\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-20T15:44:39+0000\'\u003e20\\/Jun\\/07 15:44\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eI\'ve started looking at this, what it would take to merge with the merge policy stuff (\u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-847\\\" title=\\\"Factor merge policy out of IndexWriter\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-847\\\"\u003e\u003cdel\u003eLUCENE-847\u003c\\/del\u003e\u003c\\/a\u003e). Noticed that there are a couple of test failures?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"steven_parkes\\\" id=\\\"commentauthor_12506576_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=steven_parkes\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"steven_parkes\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Steven Parkes\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506576_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jun\\/07 15:44\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-20T15:44:39+0000\'\u003e20\\/Jun\\/07 15:44\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    I\'ve started looking at this, what it would take to merge with the merge policy stuff (  LUCENE-847  ). Noticed that there are a couple of test failures?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12506580\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12506580&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12506580\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12506580_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506580_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jun\\/07 15:58\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-20T15:58:57+0000\'\u003e20\\/Jun\\/07 15:58\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eOh, were the test failures only in the TestBackwardsCompatibility?\u003c\\/p\u003e\\n\\n\u003cp\u003eBecause I changed the index file format, I added 2 more ZIP files to\u003cbr\\/\u003e\\nthat unit test, but, \\\"svn diff\\\" doesn\'t pick up the new zip files.  So\u003cbr\\/\u003e\\nI\'m attaching them.  Can you pull off these zip files into your\u003cbr\\/\u003e\\nsrc\\/test\\/org\\/apache\\/lucene\\/index and test again?  Thanks.\u003c\\/p\u003e\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12506580_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506580_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jun\\/07 15:58\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-20T15:58:57+0000\'\u003e20\\/Jun\\/07 15:58\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Oh, were the test failures only in the TestBackwardsCompatibility? \\n\\n Because I changed the index file format, I added 2 more ZIP files to \\nthat unit test, but, \\\"svn diff\\\" doesn\'t pick up the new zip files.  So \\nI\'m attaching them.  Can you pull off these zip files into your \\nsrc\\/test\\/org\\/apache\\/lucene\\/index and test again?  Thanks. \\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12506609\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12506609&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12506609\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"steven_parkes\\\" id=\\\"commentauthor_12506609_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=steven_parkes\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"steven_parkes\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Steven Parkes\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506609_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jun\\/07 17:37\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-20T17:37:19+0000\'\u003e20\\/Jun\\/07 17:37\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eYeah, that was it.\u003c\\/p\u003e\\n\\n\u003cp\u003eI\'ll be delving more into the code as I try to figure out how it will dove tail with the merge policy factoring.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"steven_parkes\\\" id=\\\"commentauthor_12506609_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=steven_parkes\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"steven_parkes\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Steven Parkes\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506609_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jun\\/07 17:37\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-20T17:37:19+0000\'\u003e20\\/Jun\\/07 17:37\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Yeah, that was it. \\n\\n I\'ll be delving more into the code as I try to figure out how it will dove tail with the merge policy factoring.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12506718\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12506718&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12506718\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12506718_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506718_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jun\\/07 23:25\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-20T23:25:49+0000\'\u003e20\\/Jun\\/07 23:25\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; Yeah, that was it.\u003c\\/p\u003e\\n\\n\u003cp\u003ePhew!\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; I\'ll be delving more into the code as I try to figure out how it will\u003cbr\\/\u003e\\n&gt; dove tail with the merge policy factoring.\u003c\\/p\u003e\\n\\n\u003cp\u003eOK, thanks.  I am very eager to get some other eyeballs looking for\u003cbr\\/\u003e\\nissues with this patch!\u003c\\/p\u003e\\n\\n\u003cp\u003eI \u003cb\u003ethink\u003c\\/b\u003e this patch and the merge policy refactoring should be fairly\u003cbr\\/\u003e\\nseparate.\u003c\\/p\u003e\\n\\n\u003cp\u003eWith this patch, \\\"flushing\\\" RAM -&gt; Lucene segment is no longer a\u003cbr\\/\u003e\\n\\\"mergeSegments\\\" call which I think simplifies IndexWriter.  Previously\u003cbr\\/\u003e\\nmergeSegments had lots of extra logic to tell if it was merging RAM\u003cbr\\/\u003e\\nsegments (= a flush) vs merging \\\"real\\\" segments but now it\'s simpler\u003cbr\\/\u003e\\nbecause mergeSegments really only merges segments.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12506718_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506718_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'20\\/Jun\\/07 23:25\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-20T23:25:49+0000\'\u003e20\\/Jun\\/07 23:25\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; Yeah, that was it. \\n\\n Phew! \\n\\n &gt; I\'ll be delving more into the code as I try to figure out how it will \\n&gt; dove tail with the merge policy factoring. \\n\\n OK, thanks.  I am very eager to get some other eyeballs looking for \\nissues with this patch! \\n\\n I  think  this patch and the merge policy refactoring should be fairly \\nseparate. \\n\\n With this patch, \\\"flushing\\\" RAM -&gt; Lucene segment is no longer a \\n\\\"mergeSegments\\\" call which I think simplifies IndexWriter.  Previously \\nmergeSegments had lots of extra logic to tell if it was merging RAM \\nsegments (= a flush) vs merging \\\"real\\\" segments but now it\'s simpler \\nbecause mergeSegments really only merges segments.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12506752\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12506752&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12506752\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"michaelbusch\\\" id=\\\"commentauthor_12506752_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=michaelbusch\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"michaelbusch\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael Busch\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506752_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 03:05\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T03:05:36+0000\'\u003e21\\/Jun\\/07 03:05\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eHi Mike,\u003c\\/p\u003e\\n\\n\u003cp\u003emy first comment on this patch is: Impressive!\u003c\\/p\u003e\\n\\n\u003cp\u003eIt\'s also quite overwhelming at the beginning, but I\'m trying to dig into it. I\'ll probably have more questions, here\'s the first one:\u003c\\/p\u003e\\n\\n\u003cp\u003eDoes DocumentsWriter also solve the problem DocumentWriter had before \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-880\\\" title=\\\"DocumentWriter closes TokenStreams too early\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-880\\\"\u003e\u003cdel\u003eLUCENE-880\u003c\\/del\u003e\u003c\\/a\u003e? I believe the answer is yes. Even though you close the TokenStreams in the finally clause of invertField() like DocumentWriter did before 880 this is safe, because addPosition() serializes the term strings and payload bytes into the posting hash table right away. Is that right?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"michaelbusch\\\" id=\\\"commentauthor_12506752_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=michaelbusch\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"michaelbusch\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael Busch\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506752_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 03:05\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T03:05:36+0000\'\u003e21\\/Jun\\/07 03:05\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Hi Mike, \\n\\n my first comment on this patch is: Impressive! \\n\\n It\'s also quite overwhelming at the beginning, but I\'m trying to dig into it. I\'ll probably have more questions, here\'s the first one: \\n\\n Does DocumentsWriter also solve the problem DocumentWriter had before   LUCENE-880  ? I believe the answer is yes. Even though you close the TokenStreams in the finally clause of invertField() like DocumentWriter did before 880 this is safe, because addPosition() serializes the term strings and payload bytes into the posting hash table right away. Is that right?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12506778\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12506778&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12506778\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"michaelbusch\\\" id=\\\"commentauthor_12506778_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=michaelbusch\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"michaelbusch\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael Busch\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506778_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 06:51\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T06:51:13+0000\'\u003e21\\/Jun\\/07 06:51\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eMike,\u003c\\/p\u003e\\n\\n\u003cp\u003ethe benchmarks you run focus on measuring the pure indexing performance. I think it would be interesting to know how big the speedup is in real-life scenarios, i. e. with StandardAnalyzer and maybe even HTML parsing? For sure the speedup will be less, but it should still be a significant improvement. Did you run those kinds of benchmarks already?\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"michaelbusch\\\" id=\\\"commentauthor_12506778_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=michaelbusch\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"michaelbusch\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael Busch\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506778_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 06:51\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T06:51:13+0000\'\u003e21\\/Jun\\/07 06:51\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Mike, \\n\\n the benchmarks you run focus on measuring the pure indexing performance. I think it would be interesting to know how big the speedup is in real-life scenarios, i. e. with StandardAnalyzer and maybe even HTML parsing? For sure the speedup will be less, but it should still be a significant improvement. Did you run those kinds of benchmarks already?              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12506811\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12506811&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12506811\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12506811_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506811_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 09:35\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T09:35:44+0000\'\u003e21\\/Jun\\/07 09:35\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; Does DocumentsWriter also solve the problem DocumentWriter had\u003cbr\\/\u003e\\n&gt; before \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-880\\\" title=\\\"DocumentWriter closes TokenStreams too early\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-880\\\"\u003e\u003cdel\u003eLUCENE-880\u003c\\/del\u003e\u003c\\/a\u003e? I believe the answer is yes. Even though you\u003cbr\\/\u003e\\n&gt; close the TokenStreams in the finally clause of invertField() like\u003cbr\\/\u003e\\n&gt; DocumentWriter did before 880 this is safe, because addPosition()\u003cbr\\/\u003e\\n&gt; serializes the term strings and payload bytes into the posting hash\u003cbr\\/\u003e\\n&gt; table right away. Is that right?\u003c\\/p\u003e\\n\\n\u003cp\u003eThat\'s right.  When I merged in the fix for \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-880\\\" title=\\\"DocumentWriter closes TokenStreams too early\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-880\\\"\u003e\u003cdel\u003eLUCENE-880\u003c\\/del\u003e\u003c\\/a\u003e, I realized\u003cbr\\/\u003e\\nwith this patch it\'s fine to close the token stream immediately after\u003cbr\\/\u003e\\nprocessing all of its tokens because everything about the token stream\u003cbr\\/\u003e\\nhas been \\\"absorbed\\\" into postings hash.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; the benchmarks you run focus on measuring the pure indexing\u003cbr\\/\u003e\\n&gt; performance. I think it would be interesting to know how big the\u003cbr\\/\u003e\\n&gt; speedup is in real-life scenarios, i. e. with StandardAnalyzer and\u003cbr\\/\u003e\\n&gt; maybe even HTML parsing? For sure the speedup will be less, but it\u003cbr\\/\u003e\\n&gt; should still be a significant improvement. Did you run those kinds\u003cbr\\/\u003e\\n&gt; of benchmarks already?\u003c\\/p\u003e\\n\\n\u003cp\u003eGood question ... I haven\'t measured the performance cost of using\u003cbr\\/\u003e\\nStandardAnalyzer or HTML parsing but I will test &amp; post back.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12506811_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506811_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 09:35\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T09:35:44+0000\'\u003e21\\/Jun\\/07 09:35\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; Does DocumentsWriter also solve the problem DocumentWriter had \\n&gt; before   LUCENE-880  ? I believe the answer is yes. Even though you \\n&gt; close the TokenStreams in the finally clause of invertField() like \\n&gt; DocumentWriter did before 880 this is safe, because addPosition() \\n&gt; serializes the term strings and payload bytes into the posting hash \\n&gt; table right away. Is that right? \\n\\n That\'s right.  When I merged in the fix for   LUCENE-880  , I realized \\nwith this patch it\'s fine to close the token stream immediately after \\nprocessing all of its tokens because everything about the token stream \\nhas been \\\"absorbed\\\" into postings hash. \\n\\n &gt; the benchmarks you run focus on measuring the pure indexing \\n&gt; performance. I think it would be interesting to know how big the \\n&gt; speedup is in real-life scenarios, i. e. with StandardAnalyzer and \\n&gt; maybe even HTML parsing? For sure the speedup will be less, but it \\n&gt; should still be a significant improvement. Did you run those kinds \\n&gt; of benchmarks already? \\n\\n Good question ... I haven\'t measured the performance cost of using \\nStandardAnalyzer or HTML parsing but I will test &amp; post back.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12506907\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12506907&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12506907\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12506907_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506907_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 14:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T14:00:19+0000\'\u003e21\\/Jun\\/07 14:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eOK I ran tests comparing analyzer performance.\u003c\\/p\u003e\\n\\n\u003cp\u003eIt\'s the same test framework as above, using the ~5,500 byte Europarl\u003cbr\\/\u003e\\ndocs with autoCommit=true, 32 MB RAM buffer, no stored fields nor\u003cbr\\/\u003e\\nvectors, and CFS=false, indexing 200,000 documents.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe SimpleSpaceAnalyzer is my own whitespace analyzer that minimizes\u003cbr\\/\u003e\\nGC cost by not allocating a Term or String for every token in every\u003cbr\\/\u003e\\ndocument.\u003c\\/p\u003e\\n\\n\u003cp\u003eEach run is best time of 2 runs:\u003c\\/p\u003e\\n\\n\u003cp\u003e  ANALYZER            PATCH (sec) TRUNK (sec)  SPEEDUP\u003cbr\\/\u003e\\n  SimpleSpaceAnalyzer  79.0       326.5        4.1 X\u003cbr\\/\u003e\\n  StandardAnalyzer    449.0       674.1        1.5 X\u003cbr\\/\u003e\\n  WhitespaceAnalyzer  104.0       338.9        3.3 X\u003cbr\\/\u003e\\n  SimpleAnalyzer      104.7       328.0        3.1 X\u003c\\/p\u003e\\n\\n\u003cp\u003eStandardAnalyzer is definiteely rather time consuming!\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12506907_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506907_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 14:00\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T14:00:19+0000\'\u003e21\\/Jun\\/07 14:00\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    OK I ran tests comparing analyzer performance. \\n\\n It\'s the same test framework as above, using the ~5,500 byte Europarl \\ndocs with autoCommit=true, 32 MB RAM buffer, no stored fields nor \\nvectors, and CFS=false, indexing 200,000 documents. \\n\\n The SimpleSpaceAnalyzer is my own whitespace analyzer that minimizes \\nGC cost by not allocating a Term or String for every token in every \\ndocument. \\n\\n Each run is best time of 2 runs: \\n\\n   ANALYZER            PATCH (sec) TRUNK (sec)  SPEEDUP \\n  SimpleSpaceAnalyzer  79.0       326.5        4.1 X \\n  StandardAnalyzer    449.0       674.1        1.5 X \\n  WhitespaceAnalyzer  104.0       338.9        3.3 X \\n  SimpleAnalyzer      104.7       328.0        3.1 X \\n\\n StandardAnalyzer is definiteely rather time consuming!              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12506961\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12506961&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12506961\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"michaelbusch\\\" id=\\\"commentauthor_12506961_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=michaelbusch\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"michaelbusch\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael Busch\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506961_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 17:08\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T17:08:52+0000\'\u003e21\\/Jun\\/07 17:08\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; OK I ran tests comparing analyzer performance.\u003c\\/p\u003e\\n\\n\u003cp\u003eThanks for the numbers Mike. Yes the gain is less with StandardAnalyzer\u003cbr\\/\u003e\\nbut 1.5X faster is still very good!\u003c\\/p\u003e\\n\\n\\n\u003cp\u003eI have some question about the extensibility of your code. For flexible\u003cbr\\/\u003e\\nindexing we want to be able in the future to implement different posting\u003cbr\\/\u003e\\nformats and we might even want to allow our users to implement own \u003cbr\\/\u003e\\nposting formats.\u003c\\/p\u003e\\n\\n\u003cp\u003eWhen I implemented multi-level skipping I tried to keep this in mind. \u003cbr\\/\u003e\\nTherefore I put most of the functionality in the two abstract classes\u003cbr\\/\u003e\\nMultiLevelSkipListReader\\/Writer. Subclasses implement the actual format\u003cbr\\/\u003e\\nof the skip data. I think with this design it should be quite easy to\u003cbr\\/\u003e\\nimplement different formats in the future while limiting the code\u003cbr\\/\u003e\\ncomplexity.\u003c\\/p\u003e\\n\\n\u003cp\u003eWith the old DocumentWriter I think this is quite simple to do too by\u003cbr\\/\u003e\\nadding a class like PostingListWriter, where subclasses define the actual \u003cbr\\/\u003e\\nformat (because DocumentWriter is so simple).\u003c\\/p\u003e\\n\\n\u003cp\u003eDo you think your code is easily extensible in this regard? I\'m \u003cbr\\/\u003e\\nwondering because of all the optimizations you\'re doing like e. g.\u003cbr\\/\u003e\\nsharing byte arrays. But I\'m certainly not familiar enough with your code \u003cbr\\/\u003e\\nyet, so I\'m only guessing here.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"michaelbusch\\\" id=\\\"commentauthor_12506961_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=michaelbusch\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"michaelbusch\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael Busch\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506961_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 17:08\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T17:08:52+0000\'\u003e21\\/Jun\\/07 17:08\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; OK I ran tests comparing analyzer performance. \\n\\n Thanks for the numbers Mike. Yes the gain is less with StandardAnalyzer \\nbut 1.5X faster is still very good! \\n\\n\\n I have some question about the extensibility of your code. For flexible \\nindexing we want to be able in the future to implement different posting \\nformats and we might even want to allow our users to implement own  \\nposting formats. \\n\\n When I implemented multi-level skipping I tried to keep this in mind.  \\nTherefore I put most of the functionality in the two abstract classes \\nMultiLevelSkipListReader\\/Writer. Subclasses implement the actual format \\nof the skip data. I think with this design it should be quite easy to \\nimplement different formats in the future while limiting the code \\ncomplexity. \\n\\n With the old DocumentWriter I think this is quite simple to do too by \\nadding a class like PostingListWriter, where subclasses define the actual  \\nformat (because DocumentWriter is so simple). \\n\\n Do you think your code is easily extensible in this regard? I\'m  \\nwondering because of all the optimizations you\'re doing like e. g. \\nsharing byte arrays. But I\'m certainly not familiar enough with your code  \\nyet, so I\'m only guessing here.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12506974\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12506974&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12506974\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12506974_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506974_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 17:59\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T17:59:00+0000\'\u003e21\\/Jun\\/07 17:59\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003e&gt; Do you think your code is easily extensible in this regard? I\'m \u003cbr\\/\u003e\\n&gt; wondering because of all the optimizations you\'re doing like e. g.\u003cbr\\/\u003e\\n&gt; sharing byte arrays. But I\'m certainly not familiar enough with your code \u003cbr\\/\u003e\\n&gt; yet, so I\'m only guessing here.\u003c\\/p\u003e\\n\\n\u003cp\u003eGood question!\u003c\\/p\u003e\\n\\n\u003cp\u003eDocumentsWriter is definitely more complex than DocumentWriter, but it\u003cbr\\/\u003e\\ndoesn\'t prevent extensibility and I think will work very well when we\u003cbr\\/\u003e\\ndo flexible indexing.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe patch now has dedicated methods for writing into the freq\\/prox\\/etc\u003cbr\\/\u003e\\nstreams (\'writeFreqByte\', \'writeFreqVInt\', \'writeProxByte\',\u003cbr\\/\u003e\\n\'writeProxVInt\', etc.), but, this could easily be changed to instead\u003cbr\\/\u003e\\nuse true IndexOutput streams.  This would then hide all details of\u003cbr\\/\u003e\\nshared byte arrays from whoever is doing the writing.\u003c\\/p\u003e\\n\\n\u003cp\u003eThe way I roughly see flexible indexing working in the future is\u003cbr\\/\u003e\\nDocumentsWriter will be responsible for keeping track of unique terms\u003cbr\\/\u003e\\nseen (in its hash table), holding the Posting instance (which could be\u003cbr\\/\u003e\\nsubclassed in the future) for each term, flushing a real segment when\u003cbr\\/\u003e\\nfull, handling shared byte arrays, etc.  Ie all the \\\"infrastructure\\\".\u003c\\/p\u003e\\n\\n\u003cp\u003eBut then the specific logic of what bytes are written into which\u003cbr\\/\u003e\\nstreams (freq\\/prox\\/vectors\\/others) will be handled by a separate class\u003cbr\\/\u003e\\nor classes that we can plug\\/unplug according to some \\\"schema\\\".\u003cbr\\/\u003e\\nDocumentsWriter would call on these classes and provide the\u003cbr\\/\u003e\\nIndexOutput\'s for all streams for the Posting, per position, and these\u003cbr\\/\u003e\\nclasses write their own format into the IndexOutputs.\u003c\\/p\u003e\\n\\n\u003cp\u003eI think a separation like that would work well: we could have good\u003cbr\\/\u003e\\nperformance and also extensibility.  Devil is in the details of\u003cbr\\/\u003e\\ncourse...\u003c\\/p\u003e\\n\\n\u003cp\u003eI obviously haven\'t factored DocumentsWriter in this way (it has its\u003cbr\\/\u003e\\nown addPosition that writes the current Lucene index format) but I\u003cbr\\/\u003e\\nthink this is very doable in the future.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12506974_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12506974_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'21\\/Jun\\/07 17:59\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-21T17:59:00+0000\'\u003e21\\/Jun\\/07 17:59\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    &gt; Do you think your code is easily extensible in this regard? I\'m  \\n&gt; wondering because of all the optimizations you\'re doing like e. g. \\n&gt; sharing byte arrays. But I\'m certainly not familiar enough with your code  \\n&gt; yet, so I\'m only guessing here. \\n\\n Good question! \\n\\n DocumentsWriter is definitely more complex than DocumentWriter, but it \\ndoesn\'t prevent extensibility and I think will work very well when we \\ndo flexible indexing. \\n\\n The patch now has dedicated methods for writing into the freq\\/prox\\/etc \\nstreams (\'writeFreqByte\', \'writeFreqVInt\', \'writeProxByte\', \\n\'writeProxVInt\', etc.), but, this could easily be changed to instead \\nuse true IndexOutput streams.  This would then hide all details of \\nshared byte arrays from whoever is doing the writing. \\n\\n The way I roughly see flexible indexing working in the future is \\nDocumentsWriter will be responsible for keeping track of unique terms \\nseen (in its hash table), holding the Posting instance (which could be \\nsubclassed in the future) for each term, flushing a real segment when \\nfull, handling shared byte arrays, etc.  Ie all the \\\"infrastructure\\\". \\n\\n But then the specific logic of what bytes are written into which \\nstreams (freq\\/prox\\/vectors\\/others) will be handled by a separate class \\nor classes that we can plug\\/unplug according to some \\\"schema\\\". \\nDocumentsWriter would call on these classes and provide the \\nIndexOutput\'s for all streams for the Posting, per position, and these \\nclasses write their own format into the IndexOutputs. \\n\\n I think a separation like that would work well: we could have good \\nperformance and also extensibility.  Devil is in the details of \\ncourse... \\n\\n I obviously haven\'t factored DocumentsWriter in this way (it has its \\nown addPosition that writes the current Lucene index format) but I \\nthink this is very doable in the future.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12507567\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12507567&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12507567\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12507567_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12507567_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jun\\/07 06:59\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-23T06:59:02+0000\'\u003e23\\/Jun\\/07 06:59\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eMike, I am considering testing the performance of this patch on a somewhat different use case, real one I think. After indexing 25M docs of TREC .gov2 (~500GB of docs) I pushed the index terms to create a spell correction index, by using the contrib spell checker. Docs here are \u003cb\u003every\u003c\\/b\u003e short - For each index term a document is created, containing some N-GRAMS. On the specific machine I used there are 2 CPUs but the SpellChecker indexing does not take advantage of that. Anyhow, 126,684,685 words==documents were indexed. \u003cbr\\/\u003e\\nFor the docs adding step I had:\u003cbr\\/\u003e\\n    mergeFactor = 100,000\u003cbr\\/\u003e\\n    maxBufferedDocs = 10,000\u003cbr\\/\u003e\\nSo no merging took place.\u003cbr\\/\u003e\\nThis step took 21 hours, and created 12,685 segments, total size 15 - 20 GB. \u003cbr\\/\u003e\\nThen I optimized the index with\u003cbr\\/\u003e\\n    mergeFactor = 400\u003cbr\\/\u003e\\n(Larger values were hard on the open files limits.)\u003c\\/p\u003e\\n\\n\u003cp\u003eI thought it would be interesting to see how the new code performs in this scenario, what do you think?\u003c\\/p\u003e\\n\\n\u003cp\u003eIf you too find this comparison interesting, I have two more questions:\u003c\\/p\u003e\\n\u003cul class=\\\"alternate\\\" type=\\\"square\\\"\u003e\\n\\t\u003cli\u003ewhat settings do you recommend?\u003c\\/li\u003e\\n\\t\u003cli\u003eis there any chance for speed-up in optimize()?  I didn\'t read your\u003cbr\\/\u003e\\n    new code yet, but at least from some comments here it seems that \u003cbr\\/\u003e\\n    on disk merging was not changed... is this (still) so? I would skip the \u003cbr\\/\u003e\\n    optimize part if this is not of interest for the comparison. (In fact I am \u003cbr\\/\u003e\\n    still waiting for my optimize() to complete, but if it is not of interest I \u003cbr\\/\u003e\\n    will just interrupt it...)\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003eThanks,\u003cbr\\/\u003e\\nDoron\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12507567_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12507567_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jun\\/07 06:59\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-23T06:59:02+0000\'\u003e23\\/Jun\\/07 06:59\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Mike, I am considering testing the performance of this patch on a somewhat different use case, real one I think. After indexing 25M docs of TREC .gov2 (~500GB of docs) I pushed the index terms to create a spell correction index, by using the contrib spell checker. Docs here are  very  short - For each index term a document is created, containing some N-GRAMS. On the specific machine I used there are 2 CPUs but the SpellChecker indexing does not take advantage of that. Anyhow, 126,684,685 words==documents were indexed.  \\nFor the docs adding step I had: \\n    mergeFactor = 100,000 \\n    maxBufferedDocs = 10,000 \\nSo no merging took place. \\nThis step took 21 hours, and created 12,685 segments, total size 15 - 20 GB.  \\nThen I optimized the index with \\n    mergeFactor = 400 \\n(Larger values were hard on the open files limits.) \\n\\n I thought it would be interesting to see how the new code performs in this scenario, what do you think? \\n\\n If you too find this comparison interesting, I have two more questions: \\n \\n\\t what settings do you recommend? \\n\\t is there any chance for speed-up in optimize()?  I didn\'t read your \\n    new code yet, but at least from some comments here it seems that  \\n    on disk merging was not changed... is this (still) so? I would skip the  \\n    optimize part if this is not of interest for the comparison. (In fact I am  \\n    still waiting for my optimize() to complete, but if it is not of interest I  \\n    will just interrupt it...) \\n \\n\\n\\n Thanks, \\nDoron              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12507587\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12507587&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12507587\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12507587_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12507587_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jun\\/07 09:43\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-23T09:43:11+0000\'\u003e23\\/Jun\\/07 09:43\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\\n\u003cp\u003e&gt; I thought it would be interesting to see how the new code performs in this scenario, what do you think?\u003c\\/p\u003e\\n\\n\u003cp\u003eYes I\'d be very interested to see the results of this.  It\'s a\u003cbr\\/\u003e\\nsomewhat \\\"unusual\\\" indexing situation (such tiny docs) but it\'s a real\u003cbr\\/\u003e\\nworld test case.  Thanks!\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt;  - what settings do you recommend?\u003c\\/p\u003e\\n\\n\u003cp\u003eI think these are likely the important ones in this case:\u003c\\/p\u003e\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eFlush by RAM instead of doc count\u003cbr\\/\u003e\\n    (writer.setRAMBufferSizeMB(...)).\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eGive it as much RAM as you can.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eUse maybe 3 indexing threads (if you can).\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eTurn off compound file.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eIf you have stored fields\\/vectors (seems not in this case) use\u003cbr\\/\u003e\\n    autoCommit=false.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eUse a trivial analyzer that doesn\'t create new String\\/new Token\u003cbr\\/\u003e\\n    (re-use the same Token, and use the char[] based term text\u003cbr\\/\u003e\\n    storage instead of the String one).\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cul\u003e\\n\\t\u003cli\u003eRe-use Document\\/Field instances.  The DocumentsWriter is fine with\u003cbr\\/\u003e\\n    this and it saves substantial time from GC especially because your\u003cbr\\/\u003e\\n    docs are so tiny (per-doc overhead is otherwise a killer).  In\u003cbr\\/\u003e\\n    IndexLineFiles I made a StringReader that lets me reset its String\u003cbr\\/\u003e\\n    value; this way I didn\'t have to change the Field instances stored\u003cbr\\/\u003e\\n    in the Document.\u003c\\/li\u003e\\n\u003c\\/ul\u003e\\n\\n\\n\u003cp\u003e&gt;  - is there any chance for speed-up in optimize()?  I didn\'t read\u003cbr\\/\u003e\\n&gt;    your new code yet, but at least from some comments here it seems\u003cbr\\/\u003e\\n&gt;    that on disk merging was not changed... is this (still) so? I would\u003c\\/p\u003e\\n\\n\u003cp\u003eCorrect: my patch doesn\'t touch merging and optimizing.  All it does\u003cbr\\/\u003e\\nnow is gather many docs in RAM and then flush a new segment when it\'s\u003cbr\\/\u003e\\ntime.  I\'ve opened a separate issue (\u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-856\\\" title=\\\"Optimize segment merging\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-856\\\"\u003e\u003cdel\u003eLUCENE-856\u003c\\/del\u003e\u003c\\/a\u003e) for optimizations\u003cbr\\/\u003e\\nin segment merging.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12507587_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12507587_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'23\\/Jun\\/07 09:43\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-23T09:43:11+0000\'\u003e23\\/Jun\\/07 09:43\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                   \\n &gt; I thought it would be interesting to see how the new code performs in this scenario, what do you think? \\n\\n Yes I\'d be very interested to see the results of this.  It\'s a \\nsomewhat \\\"unusual\\\" indexing situation (such tiny docs) but it\'s a real \\nworld test case.  Thanks! \\n\\n &gt;  - what settings do you recommend? \\n\\n I think these are likely the important ones in this case: \\n\\n \\n\\t Flush by RAM instead of doc count \\n    (writer.setRAMBufferSizeMB(...)). \\n \\n\\n\\n \\n\\t Give it as much RAM as you can. \\n \\n\\n\\n \\n\\t Use maybe 3 indexing threads (if you can). \\n \\n\\n\\n \\n\\t Turn off compound file. \\n \\n\\n\\n \\n\\t If you have stored fields\\/vectors (seems not in this case) use \\n    autoCommit=false. \\n \\n\\n\\n \\n\\t Use a trivial analyzer that doesn\'t create new String\\/new Token \\n    (re-use the same Token, and use the char[] based term text \\n    storage instead of the String one). \\n \\n\\n\\n \\n\\t Re-use Document\\/Field instances.  The DocumentsWriter is fine with \\n    this and it saves substantial time from GC especially because your \\n    docs are so tiny (per-doc overhead is otherwise a killer).  In \\n    IndexLineFiles I made a StringReader that lets me reset its String \\n    value; this way I didn\'t have to change the Field instances stored \\n    in the Document. \\n \\n\\n\\n &gt;  - is there any chance for speed-up in optimize()?  I didn\'t read \\n&gt;    your new code yet, but at least from some comments here it seems \\n&gt;    that on disk merging was not changed... is this (still) so? I would \\n\\n Correct: my patch doesn\'t touch merging and optimizing.  All it does \\nnow is gather many docs in RAM and then flush a new segment when it\'s \\ntime.  I\'ve opened a separate issue (  LUCENE-856  ) for optimizations \\nin segment merging.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12507708\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12507708&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12507708\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12507708_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12507708_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'24\\/Jun\\/07 19:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-24T19:56:05+0000\'\u003e24\\/Jun\\/07 19:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eJust to clarify your comment on reusing field and doc instances - to my understanding reusing a field instance is ok \u003cb\u003eonly\u003c\\/b\u003e after the containing doc was added to the index.\u003c\\/p\u003e\\n\\n\u003cp\u003eFor a \\\"fair\\\" comparison I ended up not following most of your recommendations, including the reuse field\\/docs one and the non-compound one (apologies\u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/smile.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e), but I might use them later. \u003c\\/p\u003e\\n\\n\u003cp\u003eFor the first 100,000,000 docs (==speller words) the speed-up is quite amazing:\u003cbr\\/\u003e\\n    Orig:    Speller: added 100000000 words in 10912 seconds = 3 hours 1 minutes 52 seconds\u003cbr\\/\u003e\\n    New:   Speller: added 100000000 words in 58490 seconds = 16 hours 14 minutes 50 seconds\u003cbr\\/\u003e\\nThis is 5.3 times faster !!!\u003c\\/p\u003e\\n\\n\u003cp\u003eThis btw was with maxBufDocs=100,000 (I forgot to set the MEM param). \u003cbr\\/\u003e\\nI stopped the run now, I don\'t expect to learn anything new by letting it continue.\u003c\\/p\u003e\\n\\n\u003cp\u003eWhen trying with  MEM=512MB, it at first seemed faster, but then there were now and then local slow-downs, and eventually it became a bit slower than the previous run. I know these are not merges, so they are either flushes (RAM directed), or GC activity. I will perhaps run with GC debug flags and perhaps add a print at flush so to tell the culprit for these local slow-downs.\u003c\\/p\u003e\\n\\n\u003cp\u003eOther than that, I will perhaps try to index .GOV2 (25 Million HTML docs) with this patch. The way I indexed it before it took about 4 days - running in 4 threads, and creating 36 indexes. This is even more a real life scenario, it involves HTML parsing, standard analysis, and merging (to some extent). Since there are 4 threads each one will get, say, 250MB. Again, for a \\\"fair\\\" comparison, I will remain with compound.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"doronc\\\" id=\\\"commentauthor_12507708_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=doronc\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"doronc\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Doron Cohen\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12507708_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'24\\/Jun\\/07 19:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-24T19:56:05+0000\'\u003e24\\/Jun\\/07 19:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Just to clarify your comment on reusing field and doc instances - to my understanding reusing a field instance is ok  only  after the containing doc was added to the index. \\n\\n For a \\\"fair\\\" comparison I ended up not following most of your recommendations, including the reuse field\\/docs one and the non-compound one (apologies ), but I might use them later.  \\n\\n For the first 100,000,000 docs (==speller words) the speed-up is quite amazing: \\n    Orig:    Speller: added 100000000 words in 10912 seconds = 3 hours 1 minutes 52 seconds \\n    New:   Speller: added 100000000 words in 58490 seconds = 16 hours 14 minutes 50 seconds \\nThis is 5.3 times faster !!! \\n\\n This btw was with maxBufDocs=100,000 (I forgot to set the MEM param).  \\nI stopped the run now, I don\'t expect to learn anything new by letting it continue. \\n\\n When trying with  MEM=512MB, it at first seemed faster, but then there were now and then local slow-downs, and eventually it became a bit slower than the previous run. I know these are not merges, so they are either flushes (RAM directed), or GC activity. I will perhaps run with GC debug flags and perhaps add a print at flush so to tell the culprit for these local slow-downs. \\n\\n Other than that, I will perhaps try to index .GOV2 (25 Million HTML docs) with this patch. The way I indexed it before it took about 4 days - running in 4 threads, and creating 36 indexes. This is even more a real life scenario, it involves HTML parsing, standard analysis, and merging (to some extent). Since there are 4 threads each one will get, say, 250MB. Again, for a \\\"fair\\\" comparison, I will remain with compound.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12507716\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12507716&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12507716\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12507716_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12507716_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'24\\/Jun\\/07 20:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-24T20:56:36+0000\'\u003e24\\/Jun\\/07 20:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\\n\u003cp\u003e&gt; Just to clarify your comment on reusing field and doc instances - to my\u003cbr\\/\u003e\\n&gt; understanding reusing a field instance is ok \u003cb\u003eonly\u003c\\/b\u003e after the containing\u003cbr\\/\u003e\\n&gt; doc was added to the index.\u003c\\/p\u003e\\n\\n\u003cp\u003eRight, if your documents are very \\\"regular\\\" you should get a sizable\u003cbr\\/\u003e\\nspeedup (especially for tiny docs), with or without this patch, if you\u003cbr\\/\u003e\\nmake a single Document and add \u003cb\u003eseparate\u003c\\/b\u003e Field instances to it for\u003cbr\\/\u003e\\neach field, and then reuse the Document and Field instances for all\u003cbr\\/\u003e\\nthe docs you want to add.\u003c\\/p\u003e\\n\\n\u003cp\u003eIt\'s not easy to reuse Field instances now (there\'s no\u003cbr\\/\u003e\\nsetStringValue()).  I made a ReusableStringReader to do this but you\u003cbr\\/\u003e\\ncould also make your own class that implements Fieldable.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; For a \\\"fair\\\" comparison I ended up not following most of your\u003cbr\\/\u003e\\n&gt; recommendations, including the reuse field\\/docs one and the non-compound\u003cbr\\/\u003e\\n&gt; one (apologies\u003cimg class=\\\"emoticon\\\" src=\\\"\\/jira\\/images\\/icons\\/emoticons\\/smile.png\\\" height=\\\"16\\\" width=\\\"16\\\" align=\\\"absmiddle\\\" alt=\\\"\\\" border=\\\"0\\\"\\/\u003e), but I might use them later.\u003c\\/p\u003e\\n\\n\u003cp\u003eOK, when you say \\\"fair\\\" I think you mean because you already had a\u003cbr\\/\u003e\\nprevious run that used compound file, you had to use compound file in\u003cbr\\/\u003e\\nthe run with the \u003ca href=\\\"https:\\/\\/issues.apache.org\\/jira\\/browse\\/LUCENE-843\\\" title=\\\"improve how IndexWriter uses RAM to buffer added documents\\\" class=\\\"issue-link\\\" data-issue-key=\\\"LUCENE-843\\\"\u003e\u003cdel\u003eLUCENE-843\u003c\\/del\u003e\u003c\\/a\u003e patch (etc)?  The recommendations above\u003cbr\\/\u003e\\nshould speed up Lucene with or without my patch.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; For the first 100,000,000 docs (==speller words) the speed-up is quite\u003cbr\\/\u003e\\n&gt; amazing:\u003cbr\\/\u003e\\n&gt;     Orig:    Speller: added 100000000 words in 10912 seconds = 3 hours 1\u003cbr\\/\u003e\\n&gt;     minutes 52 seconds\u003cbr\\/\u003e\\n&gt;     New:   Speller: added 100000000 words in 58490 seconds = 16 hours 14\u003cbr\\/\u003e\\n&gt;     minutes 50 seconds\u003cbr\\/\u003e\\n&gt; This is 5.3 times faster !!!\u003c\\/p\u003e\\n\\n\u003cp\u003eWow!  I think the speedup might be even more if both of your runs followed\u003cbr\\/\u003e\\nthe suggestions above.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; This btw was with maxBufDocs=100,000 (I forgot to set the MEM param).\u003cbr\\/\u003e\\n&gt; I stopped the run now, I don\'t expect to learn anything new by letting it\u003cbr\\/\u003e\\n&gt; continue.\u003cbr\\/\u003e\\n&gt;\u003cbr\\/\u003e\\n&gt; When trying with  MEM=512MB, it at first seemed faster, but then there\u003cbr\\/\u003e\\n&gt; were now and then local slow-downs, and eventually it became a bit slower\u003cbr\\/\u003e\\n&gt; than the previous run. I know these are not merges, so they are either\u003cbr\\/\u003e\\n&gt; flushes (RAM directed), or GC activity. I will perhaps run with GC debug\u003cbr\\/\u003e\\n&gt; flags and perhaps add a print at flush so to tell the culprit for these\u003cbr\\/\u003e\\n&gt; local slow-downs.\u003c\\/p\u003e\\n\\n\u003cp\u003eHurm, odd.  I haven\'t pushed RAM buffer up to 512 MB so it could be GC\u003cbr\\/\u003e\\ncost somehow makes things worse ... curious.\u003c\\/p\u003e\\n\\n\u003cp\u003e&gt; Other than that, I will perhaps try to index .GOV2 (25 Million HTML docs)\u003cbr\\/\u003e\\n&gt; with this patch. The way I indexed it before it took about 4 days -\u003cbr\\/\u003e\\n&gt; running in 4 threads, and creating 36 indexes. This is even more a real\u003cbr\\/\u003e\\n&gt; life scenario, it involves HTML parsing, standard analysis, and merging\u003cbr\\/\u003e\\n&gt; (to some extent). Since there are 4 threads each one will get, say,\u003cbr\\/\u003e\\n&gt; 250MB. Again, for a \\\"fair\\\" comparison, I will remain with compound.\u003c\\/p\u003e\\n\\n\u003cp\u003eOK, because you\'re doing StandardAnalyzer and HTML parsing and\u003cbr\\/\u003e\\npresumably loading one-doc-per-file, most of your time is spent\u003cbr\\/\u003e\\noutside of Lucene indexing so I\'d expect less that 50% speedup in\u003cbr\\/\u003e\\nthis case.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12507716_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12507716_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'24\\/Jun\\/07 20:56\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-06-24T20:56:36+0000\'\u003e24\\/Jun\\/07 20:56\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                   \\n &gt; Just to clarify your comment on reusing field and doc instances - to my \\n&gt; understanding reusing a field instance is ok  only  after the containing \\n&gt; doc was added to the index. \\n\\n Right, if your documents are very \\\"regular\\\" you should get a sizable \\nspeedup (especially for tiny docs), with or without this patch, if you \\nmake a single Document and add  separate  Field instances to it for \\neach field, and then reuse the Document and Field instances for all \\nthe docs you want to add. \\n\\n It\'s not easy to reuse Field instances now (there\'s no \\nsetStringValue()).  I made a ReusableStringReader to do this but you \\ncould also make your own class that implements Fieldable. \\n\\n &gt; For a \\\"fair\\\" comparison I ended up not following most of your \\n&gt; recommendations, including the reuse field\\/docs one and the non-compound \\n&gt; one (apologies ), but I might use them later. \\n\\n OK, when you say \\\"fair\\\" I think you mean because you already had a \\nprevious run that used compound file, you had to use compound file in \\nthe run with the   LUCENE-843   patch (etc)?  The recommendations above \\nshould speed up Lucene with or without my patch. \\n\\n &gt; For the first 100,000,000 docs (==speller words) the speed-up is quite \\n&gt; amazing: \\n&gt;     Orig:    Speller: added 100000000 words in 10912 seconds = 3 hours 1 \\n&gt;     minutes 52 seconds \\n&gt;     New:   Speller: added 100000000 words in 58490 seconds = 16 hours 14 \\n&gt;     minutes 50 seconds \\n&gt; This is 5.3 times faster !!! \\n\\n Wow!  I think the speedup might be even more if both of your runs followed \\nthe suggestions above. \\n\\n &gt; This btw was with maxBufDocs=100,000 (I forgot to set the MEM param). \\n&gt; I stopped the run now, I don\'t expect to learn anything new by letting it \\n&gt; continue. \\n&gt; \\n&gt; When trying with  MEM=512MB, it at first seemed faster, but then there \\n&gt; were now and then local slow-downs, and eventually it became a bit slower \\n&gt; than the previous run. I know these are not merges, so they are either \\n&gt; flushes (RAM directed), or GC activity. I will perhaps run with GC debug \\n&gt; flags and perhaps add a print at flush so to tell the culprit for these \\n&gt; local slow-downs. \\n\\n Hurm, odd.  I haven\'t pushed RAM buffer up to 512 MB so it could be GC \\ncost somehow makes things worse ... curious. \\n\\n &gt; Other than that, I will perhaps try to index .GOV2 (25 Million HTML docs) \\n&gt; with this patch. The way I indexed it before it took about 4 days - \\n&gt; running in 4 threads, and creating 36 indexes. This is even more a real \\n&gt; life scenario, it involves HTML parsing, standard analysis, and merging \\n&gt; (to some extent). Since there are 4 threads each one will get, say, \\n&gt; 250MB. Again, for a \\\"fair\\\" comparison, I will remain with compound. \\n\\n OK, because you\'re doing StandardAnalyzer and HTML parsing and \\npresumably loading one-doc-per-file, most of your time is spent \\noutside of Lucene indexing so I\'d expect less that 50% speedup in \\nthis case.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12510662\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12510662&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12510662\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12510662_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12510662_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'06\\/Jul\\/07 11:52\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-07-06T11:52:03+0000\'\u003e06\\/Jul\\/07 11:52\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eRe-opening this issue: I saw one failure of the contrib\\/benchmark\u003cbr\\/\u003e\\nTestPerfTasksLogic.testParallelDocMaker() tests due to an intermittant\u003cbr\\/\u003e\\nthread-safety issue.  It\'s hard to get the failure to happen (it\'s\u003cbr\\/\u003e\\nhappened only once in ~20 runs of contrib\\/benchmark) but I see where\u003cbr\\/\u003e\\nthe issue is.  Will commit a fix shortly.\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12510662_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12510662_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'06\\/Jul\\/07 11:52\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-07-06T11:52:03+0000\'\u003e06\\/Jul\\/07 11:52\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Re-opening this issue: I saw one failure of the contrib\\/benchmark \\nTestPerfTasksLogic.testParallelDocMaker() tests due to an intermittant \\nthread-safety issue.  It\'s hard to get the failure to happen (it\'s \\nhappened only once in ~20 runs of contrib\\/benchmark) but I see where \\nthe issue is.  Will commit a fix shortly.              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12512264\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12512264&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12512264\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"steven_parkes\\\" id=\\\"commentauthor_12512264_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=steven_parkes\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"steven_parkes\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Steven Parkes\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12512264_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'12\\/Jul\\/07 21:27\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-07-12T21:27:58+0000\'\u003e12\\/Jul\\/07 21:27\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eDid we lose the triggered merge stuff from 887, i.e.,, should it be\u003c\\/p\u003e\\n\\n\u003cp\u003e        if (triggerMerge) \u003c\\/p\u003e\\n{\\n          \\/* new merge policy\\n          if (0 == docWriter.getMaxBufferedDocs())\\n            maybeMergeSegments(mergeFactor * numDocs \\/ 2);\\n          else\\n            maybeMergeSegments(docWriter.getMaxBufferedDocs());\\n          *\\/\\n          maybeMergeSegments(docWriter.getMaxBufferedDocs());\\n        }\\n \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"steven_parkes\\\" id=\\\"commentauthor_12512264_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=steven_parkes\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"steven_parkes\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Steven Parkes\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12512264_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'12\\/Jul\\/07 21:27\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-07-12T21:27:58+0000\'\u003e12\\/Jul\\/07 21:27\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Did we lose the triggered merge stuff from 887, i.e.,, should it be \\n\\n         if (triggerMerge)  \\n{\\n          \\/* new merge policy\\n          if (0 == docWriter.getMaxBufferedDocs())\\n            maybeMergeSegments(mergeFactor * numDocs \\/ 2);\\n          else\\n            maybeMergeSegments(docWriter.getMaxBufferedDocs());\\n          *\\/\\n          maybeMergeSegments(docWriter.getMaxBufferedDocs());\\n        }\\n             \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \\n\\n\\n\u003cdiv id=\\\"comment-12512275\\\" class=\\\"issue-data-block activity-comment twixi-block  expanded\\\"\u003e\\n    \u003cdiv class=\\\"twixi-wrap verbose actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Collapse comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-expanded\\\"\u003e\u003cspan\u003eHide\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-links\\\"\u003e\\n                \u003ca href=\\\"\\/jira\\/browse\\/LUCENE-843?focusedCommentId=12512275&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12512275\\\"\\n                   title=\\\"Right click and copy link for a permanent link to this comment.\\\" class=\\\"activitymodule-link issue-comment-action\\\"\u003e\\n                    \u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-link\\\"\u003ePermalink\u003c\\/span\u003e\u003c\\/a\u003e\\n                                            \u003c\\/div\u003e\\n            \u003cdiv class=\\\"action-details\\\"\u003e        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12512275_verbose\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12512275_verbose subText\'\u003e\u003cspan class=\'date user-tz\' title=\'12\\/Jul\\/07 21:59\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-07-12T21:59:52+0000\'\u003e12\\/Jul\\/07 21:59\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e  \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n        \u003cdiv class=\\\"action-body flooded\\\"\u003e\u003cp\u003eWoops ... you are right; thanks for catching it!  I will add a unit\u003cbr\\/\u003e\\ntest &amp; fix it.  I will also make the flush(boolean triggerMerge,\u003cbr\\/\u003e\\nboolean flushDocStores) protected, not public, and move the javadoc\u003cbr\\/\u003e\\nback to the public flush().\u003c\\/p\u003e \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n    \u003cdiv class=\\\"twixi-wrap concise actionContainer\\\"\u003e\\n        \u003cdiv class=\\\"action-head\\\"\u003e\\n            \u003ca href=\\\"#\\\" title=\\\"Expand comment\\\" class=\\\"twixi\\\"\u003e\u003cspan class=\\\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\\\"\u003e\u003cspan\u003eShow\u003c\\/span\u003e\u003c\\/span\u003e\u003c\\/a\u003e\\n            \u003cdiv class=\\\"action-details flooded\\\"\u003e\\n                        \\n    \\n    \\n    \\n                \\n\\n    \u003ca class=\\\"user-hover user-avatar\\\" rel=\\\"mikemccand\\\" id=\\\"commentauthor_12512275_concise\\\" href=\\\"\\/jira\\/secure\\/ViewProfile.jspa?name=mikemccand\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-xsmall\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"https:\\/\\/issues.apache.org\\/jira\\/secure\\/useravatar?size=xsmall&amp;avatarId=10452\\\" alt=\\\"mikemccand\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e Michael McCandless\u003c\\/a\u003e\\n added a comment  - \u003cspan class=\'commentdate_12512275_concise subText\'\u003e\u003cspan class=\'date user-tz\' title=\'12\\/Jul\\/07 21:59\'\u003e\u003ctime class=\'livestamp\' datetime=\'2007-07-12T21:59:52+0000\'\u003e12\\/Jul\\/07 21:59\u003c\\/time\u003e\u003c\\/span\u003e\u003c\\/span\u003e                    Woops ... you are right; thanks for catching it!  I will add a unit \\ntest &amp; fix it.  I will also make the flush(boolean triggerMerge, \\nboolean flushDocStores) protected, not public, and move the javadoc \\nback to the public flush().              \u003c\\/div\u003e\\n        \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\u003c\\/div\u003e\\n                             \u003c\\/div\u003e\\n    \u003c\\/div\u003e\\n\"";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["scope-filter-data"]="{\"createScopeActions\":[],\"scopes\":[]}";
WRM._unparsedData["sidebar-collapsed-by-default"]="true";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:can-manage"]="false";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:with-icons"]="false";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:shortcuts"]="[]";
WRM._unparsedData["com.atlassian.jira.projects.shortcuts:project-id"]="12310110";
WRM._unparsedData["sidebar-id"]="\"\u003cdiv class=\\\"aui-sidebar  projects-sidebar sidebar-pending\\\" \u003e\u003cdiv class=\\\"aui-sidebar-wrapper\\\"\u003e\u003cdiv class=\\\"aui-sidebar-body\\\"\u003e\u003cheader class=\\\"aui-page-header\\\"\u003e\u003cdiv class=\\\"aui-page-header-inner\\\"\u003e\u003cdiv class=\\\"aui-page-header-image\\\"\u003e\u003ca href=\\\"\\/jira\\/projects\\/LUCENE\\/summary\\\" title=\\\"Lucene - Core\\\" class=\\\"jira-project-avatar\\\"\u003e\u003cspan class=\\\"aui-avatar aui-avatar-large aui-avatar-project\\\"\u003e\u003cspan class=\\\"aui-avatar-inner\\\"\u003e\u003cimg src=\\\"\\/jira\\/secure\\/projectavatar?pid=12310110&amp;avatarId=10061\\\" alt=\\\"Lucene - Core\\\" \\/\u003e\u003c\\/span\u003e\u003c\\/span\u003e\u003cimg src=\\\"data:image\\/svg+xml;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI\\/Pg0KPCEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDE4LjEuMSwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgIC0tPg0KPHN2ZyB2ZXJzaW9uPSIxLjEiIGlkPSJMYXllcl8xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4PSIwcHgiIHk9IjBweCINCgkgdmlld0JveD0iMCAwIDMwMCAzMDAiIHN0eWxlPSJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDMwMCAzMDA7IiB4bWw6c3BhY2U9InByZXNlcnZlIj4NCjxnIGlkPSJMYXllcl8yIj4NCgk8cGF0aCBzdHlsZT0iZmlsbDojRjc5MjMyOyIgZD0iTTE1MCwwQzY2LjY2NywwLDAsNjYuNjY3LDAsMTUwczY2LjY2NywxNTAsMTUwLDE1MHMxNTAtNjYuNjY3LDE1MC0xNTBTMjMzLjMzMywwLDE1MCwweg0KCQkgTTEzNi42NjcsMTc4LjMzM0wxMjUsMTkwbC00MS42NjctNDBMOTUsMTM4LjMzM2wzMC0zMEwxMzYuNjY3LDEyMGwtMzAsMzBMMTM2LjY2NywxNzguMzMzeiBNMjA1LDE2MS42NjdsLTMwLDMwTDE2My4zMzMsMTgwDQoJCWwzMC0zMGwtMzAtMzBMMTc1LDEwOC4zMzNMMjE2LjY2NywxNTBMMjA1LDE2MS42Njd6Ii8+DQo8L2c+DQo8Zz4NCgk8cG9seWdvbiBzdHlsZT0iZmlsbDojRkZGRkZGOyIgcG9pbnRzPSIxNzUsMTkxLjY2NyAyMDUsMTYxLjY2NyAyMTYuNjY3LDE1MCAxNzUsMTA4LjMzMyAxNjMuMzMzLDEyMCAxOTMuMzMzLDE1MCAxNjMuMzMzLDE4MCAJIi8+DQoJPHBvbHlnb24gc3R5bGU9ImZpbGw6I0ZGRkZGRjsiIHBvaW50cz0iMTI1LDEwOC4zMzMgOTUsMTM4LjMzMyA4My4zMzMsMTUwIDEyNSwxOTAgMTM2LjY2NywxNzguMzMzIDEwNi42NjcsMTUwIDEzNi42NjcsMTIwIAkiLz4NCjwvZz4NCjwvc3ZnPg0K\\\" alt=\\\"Icon indicating the project type\\\" class=\\\"jira-project-avatar-icon\\\" \\/\u003e\u003c\\/a\u003e\u003c\\/div\u003e\u003c!-- .aui-page-header-image --\u003e\u003cdiv class=\\\"aui-page-header-main\\\"\u003e\u003ch1\u003e\u003cdiv class=\\\"aui-group aui-group-split\\\"\u003e\u003cdiv class=\\\"aui-item project-title\\\"\u003e\u003ca href=\\\"\\/jira\\/projects\\/LUCENE\\/summary\\\" title=\\\"Lucene - Core\\\"\u003eLucene - Core\u003c\\/a\u003e\u003c\\/div\u003e\u003c\\/div\u003e\u003c\\/h1\u003e\u003c\\/div\u003e\u003c!-- .aui-page-header-main --\u003e\u003c\\/div\u003e\u003c!-- .aui-page-header-inner --\u003e\u003c\\/header\u003e\u003c!-- .aui-page-header --\u003e\u003cnav class=\\\"aui-navgroup aui-navgroup-vertical\\\"\u003e\u003cdiv class=\\\"aui-navgroup-inner sidebar-content-container\\\"\u003e\u003cdiv class=\\\"aui-sidebar-group aui-sidebar-group-tier-one\\\" data-id=\\\"sidebar-navigation-panel\\\"\u003e\u003cul class=\\\"aui-nav\\\"\u003e\u003cli class=\\\"aui-nav-selected\\\" \u003e\u003ca class=\\\"aui-nav-item \\\" href=\\\"\\/jira\\/projects\\/LUCENE\\/issues\\\" data-link-id=\\\"com.atlassian.jira.jira-projects-issue-navigator:sidebar-issue-navigator\\\" \u003e\u003cspan class=\\\"aui-icon aui-icon-large icon-sidebar-issues\\\"\u003e\u003c\\/span\u003e\u003cspan class=\\\"aui-nav-item-label\\\" title=\\\"Issues\\\"\u003eIssues\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/li\u003e\u003cli  \u003e\u003ca class=\\\"aui-nav-item \\\" href=\\\"\\/jira\\/projects\\/LUCENE?selectedItem=com.atlassian.jira.jira-projects-plugin:report-page\\\" data-link-id=\\\"com.atlassian.jira.jira-projects-plugin:report-page\\\" \u003e\u003cspan class=\\\"aui-icon aui-icon-large agile-icon-report\\\"\u003e\u003c\\/span\u003e\u003cspan class=\\\"aui-nav-item-label\\\" title=\\\"Reports\\\"\u003eReports\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/li\u003e\u003cli  \u003e\u003ca class=\\\"aui-nav-item \\\" href=\\\"\\/jira\\/projects\\/LUCENE?selectedItem=com.atlassian.jira.jira-projects-plugin:components-page\\\" data-link-id=\\\"com.atlassian.jira.jira-projects-plugin:components-page\\\" \u003e\u003cspan class=\\\"aui-icon aui-icon-large icon-sidebar-components\\\"\u003e\u003c\\/span\u003e\u003cspan class=\\\"aui-nav-item-label\\\" title=\\\"Components\\\"\u003eComponents\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/li\u003e\u003c\\/ul\u003e\u003c\\/div\u003e\u003c\\/div\u003e\u003c\\/nav\u003e\u003c\\/div\u003e\u003cdiv class=\\\"aui-sidebar-footer\\\"\u003e\u003ca class=\\\"aui-button aui-button-subtle aui-sidebar-toggle aui-sidebar-footer-tipsy\\\" data-tooltip=\\\"Expand sidebar ( [ )\\\" href=\\\"#\\\"\u003e\u003cspan class=\\\"aui-icon aui-icon-small\\\"\u003e\u003c\\/span\u003e\u003c\\/a\u003e\u003c\\/div\u003e\u003c\\/div\u003e\u003c\\/div\u003e\"";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script> 
  <script type="text/javascript" src="/jira/s/d41d8cd98f00b204e9800998ecf8427e-CDN/-juyfor/76005/1c78b578e5c0e813799ab2baea47b6f7/1.0/_/download/batch/jira.webresources:bigpipe-init/jira.webresources:bigpipe-init.js" data-wrm-key="jira.webresources:bigpipe-init" data-wrm-batch-type="resource" data-initially-rendered></script> 
  <form id="jira_request_timing_info" class="dont-default-focus"> 
   <fieldset class="parameters hidden"> 
    <input type="hidden" title="jira.request.start.millis" value="1516202073090"> 
    <input type="hidden" title="jira.request.server.time" value="576"> 
    <input type="hidden" title="jira.request.id" value="914x7659343x16"> 
    <input type="hidden" title="jira.session.expiry.time" value="-"> 
    <input type="hidden" title="jira.session.expiry.in.mins" value="-"> 
    <input id="jiraConcurrentRequests" type="hidden" name="jira.request.concurrent.requests" value="15"> 
    <input type="hidden" title="db.reads.time.in.ms" value="90"> 
    <input type="hidden" title="db.conns.time.in.ms" value="97"> 
   </fieldset> 
  </form> 
  <!--
	                 REQUEST ID : 914x7659343x16
	          REQUEST TIMESTAMP : [17/Jan/2018:15:14:33 +0000]
	               REQUEST TIME : 0.5760
	                 ASESSIONID : -
	        CONCURRENT REQUESTS : 15

	                      db.reads : OpSnapshot{name='db.reads', invocationCount=29, elapsedTotal=90854753, elapsedMin=455416, elapsedMax=17824193, resultSetSize=0, cpuTotal=0, cpuMin=0, cpuMax=0}
	                      db.conns : OpSnapshot{name='db.conns', invocationCount=33, elapsedTotal=97827253, elapsedMin=483610, elapsedMax=17909804, resultSetSize=0, cpuTotal=0, cpuMin=0, cpuMax=0}
-->   
 </body>
</html>